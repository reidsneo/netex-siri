from dataclasses import dataclass, field
from decimal import Decimal
from enum import Enum
from typing import List, Optional, Union
from xsdata.models.datatype import XmlDateTime, XmlDuration, XmlTime

__NAMESPACE__ = "http://www.siri.org.uk/siri"


class AbnormalTrafficTypeEnum(Enum):
    STATIONARY_TRAFFIC = "stationaryTraffic"
    QUEUING_TRAFFIC = "queuingTraffic"
    SLOW_TRAFFIC = "slowTraffic"
    HEAVY_TRAFFIC = "heavyTraffic"
    UNSPECIFIED_ABNORMAL_TRAFFIC = "unspecifiedAbnormalTraffic"
    OTHER = "other"


class AccidentCauseEnum(Enum):
    AVOIDANCE_OF_OBSTACLES = "avoidanceOfObstacles"
    DRIVER_DISTRACTION = "driverDistraction"
    DRIVER_DRUG_ABUSE = "driverDrugAbuse"
    DRIVER_ILLNESS = "driverIllness"
    EXCEEDING_SPEEDS_LIMITS = "exceedingSpeedsLimits"
    EXCESS_ALCOHOL = "excessAlcohol"
    EXCESSIVE_DRIVER_TIREDNESS = "excessiveDriverTiredness"
    IMPERMISSIBLE_MANOEUVRE = "impermissibleManoeuvre"
    LIMITED_VISIBILITY = "limitedVisibility"
    NOT_KEEPING_ASAFE_DISTANCE = "notKeepingASafeDistance"
    ON_THE_WRONG_SIDE_OF_THE_ROAD = "onTheWrongSideOfTheRoad"
    PEDESTRIAN_IN_ROAD = "pedestrianInRoad"
    POOR_LANE_ADHERENCE = "poorLaneAdherence"
    POOR_MERGE_ENTRY_OR_EXIT_JUDGEMENT = "poorMergeEntryOrExitJudgement"
    POOR_ROAD_SURFACE_CONDITION = "poorRoadSurfaceCondition"
    POOR_SURFACE_ADHERENCE = "poorSurfaceAdherence"
    UNDISCLOSED = "undisclosed"
    UNKNOWN = "unknown"
    VEHICLE_FAILURE = "vehicleFailure"
    OTHER = "other"


class AccidentTypeEnum(Enum):
    ACCIDENT = "accident"
    ACCIDENT_INVOLVING_BICYCLES = "accidentInvolvingBicycles"
    ACCIDENT_INVOLVING_BUSES = "accidentInvolvingBuses"
    ACCIDENT_INVOLVING_HAZARDOUS_MATERIALS = "accidentInvolvingHazardousMaterials"
    ACCIDENT_INVOLVING_HEAVY_LORRIES = "accidentInvolvingHeavyLorries"
    ACCIDENT_INVOLVING_MASS_TRANSIT_VEHICLE = "accidentInvolvingMassTransitVehicle"
    ACCIDENT_INVOLVING_MOPEDS = "accidentInvolvingMopeds"
    ACCIDENT_INVOLVING_MOTORCYCLES = "accidentInvolvingMotorcycles"
    ACCIDENT_INVOLVING_RADIOACTIVE_MATERIAL = "accidentInvolvingRadioactiveMaterial"
    ACCIDENT_INVOLVING_TRAIN = "accidentInvolvingTrain"
    CHEMICAL_SPILLAGE_ACCIDENT = "chemicalSpillageAccident"
    COLLISION = "collision"
    COLLISION_WITH_ANIMAL = "collisionWithAnimal"
    COLLISION_WITH_OBSTRUCTION = "collisionWithObstruction"
    COLLISION_WITH_PERSON = "collisionWithPerson"
    EARLIER_ACCIDENT = "earlierAccident"
    FUEL_SPILLAGE_ACCIDENT = "fuelSpillageAccident"
    HEAD_ON_COLLISION = "headOnCollision"
    HEAD_ON_OR_SIDE_COLLISION = "headOnOrSideCollision"
    JACKKNIFED_ARTICULATED_LORRY = "jackknifedArticulatedLorry"
    JACKKNIFED_CARAVAN = "jackknifedCaravan"
    JACKKNIFED_TRAILER = "jackknifedTrailer"
    MULTIPLE_VEHICLE_COLLISION = "multipleVehicleCollision"
    MULTIVEHICLE_ACCIDENT = "multivehicleAccident"
    OIL_SPILLAGE_ACCIDENT = "oilSpillageAccident"
    OVERTURNED_HEAVY_LORRY = "overturnedHeavyLorry"
    OVERTURNED_TRAILER = "overturnedTrailer"
    OVERTURNED_VEHICLE = "overturnedVehicle"
    REAR_COLLISION = "rearCollision"
    SECONDARY_ACCIDENT = "secondaryAccident"
    SERIOUS_ACCIDENT = "seriousAccident"
    SIDE_COLLISION = "sideCollision"
    VEHICLE_OFF_ROAD = "vehicleOffRoad"
    VEHICLE_SPUN_AROUND = "vehicleSpunAround"
    OTHER = "other"


class AlertCdirectionEnum(Enum):
    BOTH = "both"
    NEGATIVE = "negative"
    POSITIVE = "positive"
    UNKNOWN = "unknown"


class AnimalPresenceTypeEnum(Enum):
    ANIMALS_ON_THE_ROAD = "animalsOnTheRoad"
    HERD_OF_ANIMALS_ON_THE_ROAD = "herdOfAnimalsOnTheRoad"
    LARGE_ANIMALS_ON_THE_ROAD = "largeAnimalsOnTheRoad"


class AreaOfInterestEnum(Enum):
    CONTINENT_WIDE = "continentWide"
    NATIONAL = "national"
    NEIGHBOURING_COUNTRIES = "neighbouringCountries"
    NOT_SPECIFIED = "notSpecified"
    REGIONAL = "regional"


class AuthorityOperationTypeEnum(Enum):
    ACCIDENT_INVESTIGATION_WORK = "accidentInvestigationWork"
    BOMB_SQUAD_IN_ACTION = "bombSquadInAction"
    CIVIL_EMERGENCY = "civilEmergency"
    CUSTOMS_OPERATION = "customsOperation"
    JURIDICAL_RECONSTRUCTION = "juridicalReconstruction"
    POLICE_CHECK_POINT = "policeCheckPoint"
    POLICE_INVESTIGATION = "policeInvestigation"
    ROAD_OPERATOR_CHECK_POINT = "roadOperatorCheckPoint"
    SURVEY = "survey"
    TRANSPORT_OF_VIP = "transportOfVip"
    UNDEFINED_AUTHORITY_ACTIVITY = "undefinedAuthorityActivity"
    VEHICLE_INSPECTION_CHECK_POINT = "vehicleInspectionCheckPoint"
    VEHICLE_WEIGHING = "vehicleWeighing"
    WEIGH_IN_MOTION = "weighInMotion"
    OTHER = "other"


class CarParkConfigurationEnum(Enum):
    MULTI_STOREY = "multiStorey"
    PARK_AND_RIDE = "parkAndRide"
    SINGLE_LEVEL = "singleLevel"
    UNDERGROUND = "underground"


class CarParkStatusEnum(Enum):
    CAR_PARK_CLOSED = "carParkClosed"
    ALL_CAR_PARKS_FULL = "allCarParksFull"
    CAR_PARK_FACILITY_FAULTY = "carParkFacilityFaulty"
    CAR_PARK_FULL = "carParkFull"
    CAR_PARK_STATUS_UNKNOWN = "carParkStatusUnknown"
    ENOUGH_SPACES_AVAILABLE = "enoughSpacesAvailable"
    MULTI_STORY_CAR_PARKS_FULL = "multiStoryCarParksFull"
    NO_MORE_PARKING_SPACES_AVAILABLE = "noMoreParkingSpacesAvailable"
    NO_PARK_AND_RIDE_INFORMATION = "noParkAndRideInformation"
    NO_PARKING_ALLOWED = "noParkingAllowed"
    NO_PARKING_INFORMATION_AVAILABLE = "noParkingInformationAvailable"
    NORMAL_PARKING_RESTRICTIONS_LIFTED = "normalParkingRestrictionsLifted"
    ONLY_AFEW_SPACES_AVAILABLE = "onlyAFewSpacesAvailable"
    PARK_AND_RIDE_SERVICE_NOT_OPERATING = "parkAndRideServiceNotOperating"
    PARK_AND_RIDE_SERVICE_OPERATING = "parkAndRideServiceOperating"
    SPECIAL_PARKING_RESTRICTIONS_IN_FORCE = "specialParkingRestrictionsInForce"


class CarriagewayEnum(Enum):
    CONNECTING_CARRIAGEWAY = "connectingCarriageway"
    ENTRY_SLIP_ROAD = "entrySlipRoad"
    EXIT_SLIP_ROAD = "exitSlipRoad"
    FLYOVER = "flyover"
    LEFT_HAND_FEEDER_ROAD = "leftHandFeederRoad"
    LEFT_HAND_PARALLEL_CARRIAGEWAY = "leftHandParallelCarriageway"
    MAIN_CARRIAGEWAY = "mainCarriageway"
    OPPOSITE_CARRIAGEWAY = "oppositeCarriageway"
    PARALLEL_CARRIAGEWAY = "parallelCarriageway"
    RIGHT_HAND_FEEDER_ROAD = "rightHandFeederRoad"
    RIGHT_HAND_PARALLEL_CARRIAGEWAY = "rightHandParallelCarriageway"
    SERVICE_ROAD = "serviceRoad"
    SLIP_ROADS = "slipRoads"
    UNDERPASS = "underpass"


class CauseTypeEnum(Enum):
    ACCIDENT = "accident"
    CONGESTION = "congestion"
    EARLIER_ACCIDENT = "earlierAccident"
    EARLIER_EVENT = "earlierEvent"
    EARLIER_INCIDENT = "earlierIncident"
    EQUIPMENT_FAILURE = "equipmentFailure"
    EXCESSIVE_HEAT = "excessiveHeat"
    FROST = "frost"
    HOLIDAY_TRAFFIC = "holidayTraffic"
    INFRASTRUCTURE_FAILURE = "infrastructureFailure"
    LARGE_NUMBERS_OF_VISITORS = "largeNumbersOfVisitors"
    OBSTRUCTION = "obstruction"
    POLLUTION_ALERT = "pollutionAlert"
    POOR_WEATHER = "poorWeather"
    PROBLEMS_AT_BORDER_POST = "problemsAtBorderPost"
    PROBLEMS_AT_CUSTOM_POST = "problemsAtCustomPost"
    PROBLEMS_ON_LOCAL_ROADS = "problemsOnLocalRoads"
    RADIOACTIVE_LEAK_ALERT = "radioactiveLeakAlert"
    ROADSIDE_EVENT = "roadsideEvent"
    RUBBER_NECKING = "rubberNecking"
    SECURITY_INCIDENT = "securityIncident"
    SHEAR_WEIGHT_OF_TRAFFIC = "shearWeightOfTraffic"
    TECHNICAL_PROBLEMS = "technicalProblems"
    TERRORISM = "terrorism"
    TOXIC_CLOUD_ALERT = "toxicCloudAlert"
    VANDALISM = "vandalism"
    OTHER = "other"


class ChangedFlagEnum(Enum):
    CATALOGUE = "catalogue"
    FILTER = "filter"


class ComparisonOperatorEnum(Enum):
    EQUAL_TO = "equalTo"
    GREATER_THAN = "greaterThan"
    GREATHER_THAN_OR_EQUAL_TO = "greatherThanOrEqualTo"
    LESS_THAN = "lessThan"
    LESS_THAN_OR_EQUAL_TO = "lessThanOrEqualTo"


class ComplianceOptionEnum(Enum):
    ADVISORY = "advisory"
    MANDATORY = "mandatory"


class ComputationMethodEnum(Enum):
    ARITHMETIC_AVERAGE_OF_SAMPLES_BASED_ON_AFIXED_NUMBER_OF_SAMPLES = "arithmeticAverageOfSamplesBasedOnAFixedNumberOfSamples"
    ARITHMETIC_AVERAGE_OF_SAMPLES_IN_ATIME_PERIOD = "arithmeticAverageOfSamplesInATimePeriod"
    HARMONIC_AVERAGE_OF_SAMPLES_IN_ATIME_PERIOD = "harmonicAverageOfSamplesInATimePeriod"
    MEDIAN_OF_SAMPLES_IN_ATIME_PERIOD = "medianOfSamplesInATimePeriod"
    MOVING_AVERAGE_OF_SAMPLES = "movingAverageOfSamples"


class ConfidentialityValueEnum(Enum):
    INTERNAL_USE = "internalUse"
    NO_RESTRICTION = "noRestriction"
    RESTRICTED_TO_AUTHORITIES = "restrictedToAuthorities"
    RESTRICTED_TO_AUTHORITIES_AND_TRAFFIC_OPERATORS = "restrictedToAuthoritiesAndTrafficOperators"
    RESTRICTED_TO_AUTHORITIES_TRAFFIC_OPERATORS_AND_PUBLISHERS = "restrictedToAuthoritiesTrafficOperatorsAndPublishers"
    RESTRICTED_TO_AUTHORITIES_TRAFFIC_OPERATORS_AND_VMS = "restrictedToAuthoritiesTrafficOperatorsAndVms"


class ConstructionWorkTypeEnum(Enum):
    BLASTING_WORK = "blastingWork"
    CONSTRUCTION_WORK = "constructionWork"
    DEMOLITION_WORK = "demolitionWork"
    ROAD_WIDENING_WORK = "roadWideningWork"


class CountryEnum(Enum):
    AT = "at"
    BE = "be"
    BG = "bg"
    CH = "ch"
    CS = "cs"
    CY = "cy"
    CZ = "cz"
    DE = "de"
    DK = "dk"
    EE = "ee"
    ES = "es"
    FI = "fi"
    FO = "fo"
    FR = "fr"
    GB = "gb"
    GG = "gg"
    GI = "gi"
    GR = "gr"
    HR = "hr"
    HU = "hu"
    IE = "ie"
    IM = "im"
    IS_VALUE = "is"
    IT = "it"
    JE = "je"
    LI = "li"
    LT = "lt"
    LU = "lu"
    LV = "lv"
    MA = "ma"
    MC = "mc"
    MK = "mk"
    MT = "mt"
    NL = "nl"
    NO = "no"
    PL = "pl"
    PT = "pt"
    RO = "ro"
    SE = "se"
    SI = "si"
    SK = "sk"
    SM = "sm"
    TR = "tr"
    VA = "va"
    OTHER = "other"


class DangerousGoodsRegulationsEnum(Enum):
    ADR = "adr"
    IATA_ICAO = "iataIcao"
    IMO_IMDG = "imoImdg"
    RAILROAD_DANGEROUS_GOODS_BOOK = "railroadDangerousGoodsBook"


class DatexPictogramEnum(Enum):
    ADVISORY_SPEED = "advisorySpeed"
    BLANK_VOID = "blankVoid"
    CHAINS_OR_SNOW_TYRES_RECOMMENDED = "chainsOrSnowTyresRecommended"
    CROSS_WIND = "crossWind"
    DRIVING_OF_VEHICLES_LESS_THAN_XMETRES_APART_PROHIBITED = "drivingOfVehiclesLessThanXMetresApartProhibited"
    END_OF_ADVISORY_SPEED = "endOfAdvisorySpeed"
    END_OF_PROHIBITION_OF_OVERTAKING = "endOfProhibitionOfOvertaking"
    END_OF_PROHIBITION_OF_OVERTAKING_FOR_GOODS_VEHICLES = "endOfProhibitionOfOvertakingForGoodsVehicles"
    END_OF_SPEED_LIMIT = "endOfSpeedLimit"
    EXIT_CLOSED = "exitClosed"
    FOG = "fog"
    KEEP_ASAFE_DISTANCE = "keepASafeDistance"
    MAXIMUM_SPEED_LIMIT = "maximumSpeedLimit"
    NO_ENTRY = "noEntry"
    NO_ENTRY_FOR_GOODS_VEHICLES = "noEntryForGoodsVehicles"
    NO_ENTRY_FOR_VEHICLES_EXCEEDING_XTONNES_LADEN_MASS = "noEntryForVehiclesExceedingXTonnesLadenMass"
    NO_ENTRY_FOR_VEHICLES_HAVING_AMASS_EXCEEDING_XTONNES_ON_ONE_AXLE = "noEntryForVehiclesHavingAMassExceedingXTonnesOnOneAxle"
    NO_ENTRY_FOR_VEHICLES_HAVING_AN_OVERALL_HEIGHT_EXCEEDING_XMETRES = "noEntryForVehiclesHavingAnOverallHeightExceedingXMetres"
    NO_ENTRY_FOR_VEHICLES_HAVING_AN_OVERALL_LENGTH_EXCEEDING_XMETRES = "noEntryForVehiclesHavingAnOverallLengthExceedingXMetres"
    NO_ENTRY_FOR_VEHICLES_CARRYING_DANGEROUS_GOODS = "noEntryForVehiclesCarryingDangerousGoods"
    OTHER_DANGER = "otherDanger"
    OVERTAKING_BY_GOODS_VEHICLES_PROHIBITED = "overtakingByGoodsVehiclesProhibited"
    OVERTAKING_PROHIBITED = "overtakingProhibited"
    ROAD_CLOSED_AHEAD = "roadClosedAhead"
    ROADWORKS = "roadworks"
    SLIPPERY_ROAD = "slipperyRoad"
    SNOW = "snow"
    SNOW_TYRES_COMPULSORY = "snowTyresCompulsory"
    TRAFFIC_CONGESTION = "trafficCongestion"


class DayEnum(Enum):
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"
    SUNDAY = "sunday"


class DelayBandEnum(Enum):
    NEGLIGIBLE = "negligible"
    UP_TO_TEN_MINUTES = "upToTenMinutes"
    BETWEEN_TEN_MINUTES_AND_THIRTY_MINUTES = "betweenTenMinutesAndThirtyMinutes"
    BETWEEN_THIRTY_MINUTES_AND_ONE_HOUR = "betweenThirtyMinutesAndOneHour"
    BETWEEN_ONE_HOUR_AND_THREE_HOURS = "betweenOneHourAndThreeHours"
    BETWEEN_THREE_HOURS_AND_SIX_HOURS = "betweenThreeHoursAndSixHours"
    LONGER_THAN_SIX_HOURS = "longerThanSixHours"


class DelaysTypeEnum(Enum):
    DELAYS = "delays"
    DELAYS_OF_UNCERTAIN_DURATION = "delaysOfUncertainDuration"
    LONG_DELAYS = "longDelays"
    VERY_LONG_DELAYS = "veryLongDelays"


class DenyReasonEnum(Enum):
    UNKNOWN_REASON = "unknownReason"
    WRONG_CATALOGUE = "wrongCatalogue"
    WRONG_FILTER = "wrongFilter"
    WRONG_ORDER = "wrongOrder"
    WRONG_PARTNER = "wrongPartner"


class DirectionCompassEnum(Enum):
    EAST = "east"
    EAST_NORTH_EAST = "eastNorthEast"
    EAST_SOUTH_EAST = "eastSouthEast"
    NORTH = "north"
    NORTH_EAST = "northEast"
    NORTH_NORTH_EAST = "northNorthEast"
    NORTH_NORTH_WEST = "northNorthWest"
    NORTH_WEST = "northWest"
    SOUTH = "south"
    SOUTH_EAST = "southEast"
    SOUTH_SOUTH_EAST = "southSouthEast"
    SOUTH_SOUTH_WEST = "southSouthWest"
    SOUTH_WEST = "southWest"
    WEST = "west"
    WEST_NORTH_WEST = "westNorthWest"
    WEST_SOUTH_WEST = "westSouthWest"


class DirectionEnum(Enum):
    ANTICLOCKWISE = "anticlockwise"
    CLOCKWISE = "clockwise"
    NORTH_BOUND = "northBound"
    NORTH_EAST_BOUND = "northEastBound"
    EAST_BOUND = "eastBound"
    SOUTH_EAST_BOUND = "southEastBound"
    SOUTH_BOUND = "southBound"
    SOUTH_WEST_BOUND = "southWestBound"
    WEST_BOUND = "westBound"
    NORTH_WEST_BOUND = "northWestBound"
    INBOUND_TOWARDS_TOWN = "inboundTowardsTown"
    OUTBOUND_FROM_TOWN = "outboundFromTown"


class DisturbanceActivityTypeEnum(Enum):
    AIR_RAID = "airRaid"
    ALTERCATION_OF_VEHICLE_OCCUPANTS = "altercationOfVehicleOccupants"
    ASSAULT = "assault"
    ASSET_DESTRUCTION = "assetDestruction"
    ATTACK = "attack"
    ATTACK_ON_VEHICLE = "attackOnVehicle"
    BLOCKADE_OR_BARRIER = "blockadeOrBarrier"
    BOMB_ALERT = "bombAlert"
    CROWD = "crowd"
    DEMONSTRATION = "demonstration"
    EVACUATION = "evacuation"
    FILTER_BLOCKADE = "filterBlockade"
    GO_SLOW_OPERATION = "goSlowOperation"
    GUNFIRE_ON_ROADWAY = "gunfireOnRoadway"
    ILL_VEHICLE_OCCUPANTS = "illVehicleOccupants"
    MARCH = "march"
    PUBLIC_DISTURBANCE = "publicDisturbance"
    RADIOACTIVE_LEAK_ALERT = "radioactiveLeakAlert"
    RIOT = "riot"
    SABOTAGE = "sabotage"
    SECURITY_ALERT = "securityAlert"
    SECURITY_INCIDENT = "securityIncident"
    SIGHTSEERS_OBSTRUCTING_ACCESS = "sightseersObstructingAccess"
    STRIKE = "strike"
    TERRORIST_INCIDENT = "terroristIncident"
    THEFT = "theft"
    TOXIC_CLOUD_ALERT = "toxicCloudAlert"
    UNSPECIFIED_ALERT = "unspecifiedAlert"
    OTHER = "other"


class DrivingConditionTypeEnum(Enum):
    IMPOSSIBLE = "impossible"
    HAZARDOUS = "hazardous"
    NORMAL = "normal"
    PASSABLE_WITH_CARE = "passableWithCare"
    UNKNOWN = "unknown"
    VERY_HAZARDOUS = "veryHazardous"
    WINTER_CONDITIONS = "winterConditions"
    OTHER = "other"


class EnvironmentalObstructionTypeEnum(Enum):
    AVALANCHES = "avalanches"
    EARTHQUAKE_DAMAGE = "earthquakeDamage"
    FALLEN_TREES = "fallenTrees"
    FALLING_ICE = "fallingIce"
    FALLING_LIGHT_ICE_OR_SNOW = "fallingLightIceOrSnow"
    FLASH_FLOODS = "flashFloods"
    FLOODING = "flooding"
    FOREST_FIRE = "forestFire"
    GRASS_FIRE = "grassFire"
    LANDSLIPS = "landslips"
    MUD_SLIDE = "mudSlide"
    SEWER_OVERFLOW = "sewerOverflow"
    ROCKFALLS = "rockfalls"
    SERIOUS_FIRE = "seriousFire"
    SMOKE_OR_FUMES = "smokeOrFumes"
    STORM_DAMAGE = "stormDamage"
    SUBSIDENCE = "subsidence"
    OTHER = "other"


class EquipmentOrSystemFaultTypeEnum(Enum):
    NOT_WORKING = "notWorking"
    OUT_OF_SERVICE = "outOfService"
    WORKING_INCORRECTLY = "workingIncorrectly"
    WORKING_INTERMITTENTLY = "workingIntermittently"


class EquipmentOrSystemTypeEnum(Enum):
    AUTOMATED_TOLL_SYSTEM = "automatedTollSystem"
    EMERGENCY_ROADSIDE_TELEPHONES = "emergencyRoadsideTelephones"
    GALLERY_LIGHTS = "galleryLights"
    LANE_CONTROL_SIGNS = "laneControlSigns"
    LEVEL_CROSSING = "levelCrossing"
    MATRIX_SIGNS = "matrixSigns"
    RAMP_CONTROLS = "rampControls"
    ROADSIDE_COMMUNICATIONS_SYSTEM = "roadsideCommunicationsSystem"
    ROADSIDE_POWER_SYSTEM = "roadsidePowerSystem"
    SPEED_CONTROL_SIGNS = "speedControlSigns"
    STREET_LIGHTING = "streetLighting"
    TEMPORARY_TRAFFIC_LIGHTS = "temporaryTrafficLights"
    TOLL_GATES = "tollGates"
    TRAFFIC_LIGHT_SETS = "trafficLightSets"
    TRAFFIC_SIGNALS = "trafficSignals"
    TUNNEL_LIGHTS = "tunnelLights"
    TUNNEL_VENTILATION = "tunnelVentilation"
    VARIABLE_MESSAGE_SIGNS = "variableMessageSigns"
    OTHER = "other"


@dataclass
class ExtensionType:
    any_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        }
    )


class FuelTypeEnum(Enum):
    BATTERY = "battery"
    BIODIESEL = "biodiesel"
    DIESEL = "diesel"
    DIESEL_BATTERY_HYBRID = "dieselBatteryHybrid"
    ETHANOL = "ethanol"
    HYDROGEN = "hydrogen"
    LIQUID_GAS = "liquidGas"
    LPG = "lpg"
    METHANE = "methane"
    PETROL = "petrol"
    PETROL_BATTERY_HYBRID = "petrolBatteryHybrid"


class GeneralInstructionToRoadUsersTypeEnum(Enum):
    ALLOW_EMERGENCY_VEHICLES_TO_PASS = "allowEmergencyVehiclesToPass"
    APPROACH_WITH_CARE = "approachWithCare"
    AVOID_THE_AREA = "avoidTheArea"
    CLOSE_ALL_WINDOWS_TURN_OFF_HEATER_AND_VENTS = "closeAllWindowsTurnOffHeaterAndVents"
    CROSS_JUNCTION_WITH_CARE = "crossJunctionWithCare"
    DO_NOT_ALLOW_UNNECESSARY_GAPS = "doNotAllowUnnecessaryGaps"
    DO_NOT_LEAVE_YOUR_VEHICLE = "doNotLeaveYourVehicle"
    DO_NOT_THROW_OUT_ANY_BURNING_OBJECTS = "doNotThrowOutAnyBurningObjects"
    DO_NOT_USE_NAVIGATION_SYSTEMS = "doNotUseNavigationSystems"
    DRIVE_CAREFULLY = "driveCarefully"
    DRIVE_WITH_EXTREME_CAUTION = "driveWithExtremeCaution"
    FLASH_YOUR_LIGHTS = "flashYourLights"
    FOLLOW_THE_VEHICLE_IN_FRONT_SMOOTHLY = "followTheVehicleInFrontSmoothly"
    INCREASE_NORMAL_FOLLOWING_DISTANCE = "increaseNormalFollowingDistance"
    IN_EMERGENCY_WAIT_FOR_PATROL_SERVICE = "inEmergencyWaitForPatrolService"
    KEEP_YOUR_DISTANCE = "keepYourDistance"
    LEAVE_YOUR_VEHICLE_PROCEED_TO_NEXT_SAFE_PLACE = "leaveYourVehicleProceedToNextSafePlace"
    NO_NAKED_FLAMES = "noNakedFlames"
    NO_OVERTAKING = "noOvertaking"
    NO_SMOKING = "noSmoking"
    NO_STOPPING = "noStopping"
    NO_UTURNS = "noUturns"
    OBSERVE_SIGNALS = "observeSignals"
    OBSERVE_SIGNS = "observeSigns"
    ONLY_TRAVEL_IF_ABSOLUTELY_NECESSARY = "onlyTravelIfAbsolutelyNecessary"
    OVERTAKE_WITH_CARE = "overtakeWithCare"
    PULL_OVER_TO_THE_EDGE_OF_THE_ROADWAY = "pullOverToTheEdgeOfTheRoadway"
    STOP_AT_NEXT_SAFE_PLACE = "stopAtNextSafePlace"
    STOP_AT_NEXT_SERVICE_AREA = "stopAtNextServiceArea"
    SWITCH_OFF_ENGINE = "switchOffEngine"
    SWITCH_OFF_MOBILE_PHONES_AND_TWO_WAY_RADIOS = "switchOffMobilePhonesAndTwoWayRadios"
    TEST_YOUR_BRAKES = "testYourBrakes"
    USE_BUS_SERVICE = "useBusService"
    USE_FOG_LIGHTS = "useFogLights"
    USE_HAZARD_WARNING_LIGHTS = "useHazardWarningLights"
    USE_HEADLIGHTS = "useHeadlights"
    USE_RAIL_SERVICE = "useRailService"
    USE_TRAM_SERVICE = "useTramService"
    USE_UNDERGROUND_SERVICE = "useUndergroundService"
    WAIT_FOR_ESCORT_VEHICLE = "waitForEscortVehicle"
    OTHER = "other"


class GeneralNetworkManagementTypeEnum(Enum):
    BRIDGE_SWING_IN_OPERATION = "bridgeSwingInOperation"
    CONVOY_SERVICE = "convoyService"
    OBSTACLE_SIGNALLING = "obstacleSignalling"
    RAMP_METERING_IN_OPERATION = "rampMeteringInOperation"
    TEMPORARY_TRAFFIC_LIGHTS = "temporaryTrafficLights"
    TOLL_GATES_OPEN = "tollGatesOpen"
    TRAFFIC_BEING_MANUALLY_DIRECTED = "trafficBeingManuallyDirected"
    TRAFFIC_HELD = "trafficHeld"
    OTHER = "other"


class InformationStatusEnum(Enum):
    REAL = "real"
    SECURITY_EXERCISE = "securityExercise"
    TECHNICAL_EXERCISE = "technicalExercise"
    TEST = "test"


class InfrastructureDamageTypeEnum(Enum):
    BURST_PIPE = "burstPipe"
    BURST_WATER_MAIN = "burstWaterMain"
    COLLAPSED_SEWER = "collapsedSewer"
    DAMAGED_BRIDGE = "damagedBridge"
    DAMAGED_CRASH_BARRIER = "damagedCrashBarrier"
    DAMAGED_FLYOVER = "damagedFlyover"
    DAMAGED_GALLERY = "damagedGallery"
    DAMAGED_GANTRY = "damagedGantry"
    DAMAGED_ROAD_SURFACE = "damagedRoadSurface"
    DAMAGED_TUNNEL = "damagedTunnel"
    DAMAGED_VIADUCT = "damagedViaduct"
    FALLEN_POWER_CABLES = "fallenPowerCables"
    GAS_LEAK = "gasLeak"
    WEAK_BRIDGE = "weakBridge"
    OTHER = "other"


class InjuryStatusTypeEnum(Enum):
    DEAD = "dead"
    INJURED = "injured"
    SERIOUSLY_INJURED = "seriouslyInjured"
    SLIGHTLY_INJURED = "slightlyInjured"
    UNINJURED = "uninjured"
    UNKNOWN = "unknown"


class InvolvementRolesEnum(Enum):
    CYCLIST = "cyclist"
    PEDESTRIAN = "pedestrian"
    UNKNOWN = "unknown"
    VEHICLE_DRIVER = "vehicleDriver"
    VEHICLE_OCCUPANT = "vehicleOccupant"
    VEHICLE_PASSENGER = "vehiclePassenger"
    WITNESS = "witness"


class LaneEnum(Enum):
    ALL_LANES_COMPLETE_CARRIAGEWAY = "allLanesCompleteCarriageway"
    BUS_LANE = "busLane"
    BUS_STOP = "busStop"
    CAR_POOL_LANE = "carPoolLane"
    CENTRAL_RESERVATION = "centralReservation"
    CRAWLER_LANE = "crawlerLane"
    EMERGENCY_LANE = "emergencyLane"
    ESCAPE_LANE = "escapeLane"
    EXPRESS_LANE = "expressLane"
    HARD_SHOULDER = "hardShoulder"
    HEAVY_VEHICLE_LANE = "heavyVehicleLane"
    LANE1 = "lane1"
    LANE2 = "lane2"
    LANE3 = "lane3"
    LANE4 = "lane4"
    LANE5 = "lane5"
    LANE6 = "lane6"
    LANE7 = "lane7"
    LANE8 = "lane8"
    LANE9 = "lane9"
    LAY_BY = "layBy"
    LEFT_HAND_TURNING_LANE = "leftHandTurningLane"
    LEFT_LANE = "leftLane"
    LOCAL_TRAFFIC_LANE = "localTrafficLane"
    MIDDLE_LANE = "middleLane"
    OPPOSING_LANES = "opposingLanes"
    OVERTAKING_LANE = "overtakingLane"
    RIGHT_HAND_TURNING_LANE = "rightHandTurningLane"
    RIGHT_LANE = "rightLane"
    RUSH_HOUR_LANE = "rushHourLane"
    SET_DOWN_AREA = "setDownArea"
    SLOW_VEHICLE_LANE = "slowVehicleLane"
    THROUGH_TRAFFIC_LANE = "throughTrafficLane"
    TIDAL_FLOW_LANE = "tidalFlowLane"
    TURNING_LANE = "turningLane"
    VERGE = "verge"


class LoadTypeEnum(Enum):
    ABNORMAL_LOAD = "abnormalLoad"
    AMMUNITION = "ammunition"
    CHEMICALS = "chemicals"
    COMBUSTIBLE_MATERIALS = "combustibleMaterials"
    CORROSIVE_MATERIALS = "corrosiveMaterials"
    DEBRIS = "debris"
    EMPTY = "empty"
    EXPLOSIVE_MATERIALS = "explosiveMaterials"
    EXTRA_HIGH_LOAD = "extraHighLoad"
    EXTRA_LONG_LOAD = "extraLongLoad"
    EXTRA_WIDE_LOAD = "extraWideLoad"
    FUEL = "fuel"
    GLASS = "glass"
    GOODS = "goods"
    HAZARDOUS_MATERIALS = "hazardousMaterials"
    LIQUID = "liquid"
    LIVESTOCK = "livestock"
    MATERIALS = "materials"
    MATERIALS_DANGEROUS_FOR_PEOPLE = "materialsDangerousForPeople"
    MATERIALS_DANGEROUS_FOR_THE_ENVIRONMENT = "materialsDangerousForTheEnvironment"
    MATERIALS_DANGEROUS_FOR_WATER = "materialsDangerousForWater"
    OIL = "oil"
    ORDINARY = "ordinary"
    PERISHABLE_PRODUCTS = "perishableProducts"
    PETROL = "petrol"
    PHARMACEUTICAL_MATERIALS = "pharmaceuticalMaterials"
    RADIOACTIVE_MATERIALS = "radioactiveMaterials"
    REFUSE = "refuse"
    TOXIC_MATERIALS = "toxicMaterials"
    VEHICLES = "vehicles"
    OTHER = "other"


class LocationDescriptorEnum(Enum):
    AROUND_ABEND_IN_ROAD = "aroundABendInRoad"
    AT_MOTORWAY_INTERCHANGE = "atMotorwayInterchange"
    AT_REST_AREA = "atRestArea"
    AT_SERVICE_AREA = "atServiceArea"
    AT_TOLL_PLAZA = "atTollPlaza"
    AT_TUNNEL_ENTRY_OR_EXIT = "atTunnelEntryOrExit"
    INBOUND = "inbound"
    IN_GALLERY = "inGallery"
    IN_THE_CENTRE = "inTheCentre"
    IN_THE_OPPOSITE_DIRECTION = "inTheOppositeDirection"
    IN_TUNNEL = "inTunnel"
    ON_BORDER = "onBorder"
    ON_BRIDGE = "onBridge"
    ON_CONNECTOR = "onConnector"
    ON_ELEVATED_SECTION = "onElevatedSection"
    ON_FLYOVER = "onFlyover"
    ON_ICE_ROAD = "onIceRoad"
    ON_LEVEL_CROSSING = "onLevelCrossing"
    ON_LINK_ROAD = "onLinkRoad"
    ON_PASS = "onPass"
    ON_ROUNDABOUT = "onRoundabout"
    ON_THE_LEFT = "onTheLeft"
    ON_THE_RIGHT = "onTheRight"
    ON_THE_ROADWAY = "onTheRoadway"
    ON_UNDERGROUND_SECTION = "onUndergroundSection"
    ON_UNDERPASS = "onUnderpass"
    OUTBOUND = "outbound"
    OVER_CREST_OF_HILL = "overCrestOfHill"
    WITHIN_JUNCTION = "withinJunction"


class MaintenanceVehicleActionsEnum(Enum):
    MAINTENANCE_VEHICLES_MERGING_INTO_TRAFFIC_FLOW = "maintenanceVehiclesMergingIntoTrafficFlow"
    SALT_AND_GRIT_SPREADING = "saltAndGritSpreading"
    SLOW_MOVING = "slowMoving"
    SNOW_CLEARING = "snowClearing"
    STOPPING_TO_SERVICE_EQUIPMENTS = "stoppingToServiceEquipments"


class MatrixFaultEnum(Enum):
    COMMUNICATIONS_FAILURE = "communicationsFailure"
    INCORRECT_ASPECT_DISPLAYED = "incorrectAspectDisplayed"
    OUT_OF_SERVICE = "outOfService"
    POWER_FAILURE = "powerFailure"
    UNABLE_TO_CLEAR_DOWN = "unableToClearDown"
    UNKNOWN = "unknown"
    OTHER = "other"


class MeasuredOrDerivedDataTypeEnum(Enum):
    HUMIDITY_INFORMATION = "humidityInformation"
    INDIVIDUAL_VEHICLE_MEASUREMENTS = "individualVehicleMeasurements"
    POLLUTION_INFORMATION = "pollutionInformation"
    PRECIPITATION_INFORMATION = "precipitationInformation"
    PRESSURE_INFORMATION = "pressureInformation"
    RADIATION_INFORMATION = "radiationInformation"
    ROAD_SURFACE_CONDITION_INFORMATION = "roadSurfaceConditionInformation"
    TEMPERATURE_INFORMATION = "temperatureInformation"
    TRAFFIC_CONCENTRATION = "trafficConcentration"
    TRAFFIC_FLOW = "trafficFlow"
    TRAFFIC_HEADWAY = "trafficHeadway"
    TRAFFIC_SPEED = "trafficSpeed"
    TRAFFIC_STATUS_INFORMATION = "trafficStatusInformation"
    TRAVEL_TIME_INFORMATION = "travelTimeInformation"
    VISIBILITY_INFORMATION = "visibilityInformation"
    WIND_INFORMATION = "windInformation"


class MobilityEnum(Enum):
    MOBILE = "mobile"
    STATIONARY = "stationary"
    UNKNOWN = "unknown"


class MonthOfYearEnum(Enum):
    JANUARY = "january"
    FEBRUARY = "february"
    MARCH = "march"
    APRIL = "april"
    MAY = "may"
    JUNE = "june"
    JULY = "july"
    AUGUST = "august"
    SEPTEMBER = "september"
    OCTOBER = "october"
    NOVEMBER = "november"
    DECEMBER = "december"


@dataclass
class MultilingualStringValue:
    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
            "max_length": 1024,
        }
    )
    lang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )


class NonWeatherRelatedRoadConditionTypeEnum(Enum):
    DIESEL_ON_ROAD = "dieselOnRoad"
    LEAVES_ON_ROAD = "leavesOnRoad"
    LOOSE_CHIPPINGS = "looseChippings"
    LOOSE_SAND_ON_ROAD = "looseSandOnRoad"
    MUD_ON_ROAD = "mudOnRoad"
    OIL_ON_ROAD = "oilOnRoad"
    PETROL_ON_ROAD = "petrolOnRoad"
    ROAD_SURFACE_IN_POOR_CONDITION = "roadSurfaceInPoorCondition"
    SLIPPERY_ROAD = "slipperyRoad"
    OTHER = "other"


class ObstructionTypeEnum(Enum):
    AIR_CRASH = "airCrash"
    CHILDREN_ON_ROADWAY = "childrenOnRoadway"
    CLEARANCE_WORK = "clearanceWork"
    CRANE_OPERATING = "craneOperating"
    CYCLISTS_ON_ROADWAY = "cyclistsOnRoadway"
    DEBRIS = "debris"
    EXPLOSION = "explosion"
    EXPLOSION_HAZARD = "explosionHazard"
    HAZARDS_ON_THE_ROAD = "hazardsOnTheRoad"
    HIGH_SPEED_CHASE = "highSpeedChase"
    HOUSE_FIRE = "houseFire"
    INCIDENT = "incident"
    INDUSTRIAL_ACCIDENT = "industrialAccident"
    OBJECT_ON_THE_ROAD = "objectOnTheRoad"
    OBJECTS_FALLING_FROM_MOVING_VEHICLE = "objectsFallingFromMovingVehicle"
    OBSTRUCTION_ON_THE_ROAD = "obstructionOnTheRoad"
    PEOPLE_ON_ROADWAY = "peopleOnRoadway"
    RAIL_CRASH = "railCrash"
    RECKLESS_DRIVER = "recklessDriver"
    RESCUE_AND_RECOVERY_WORK = "rescueAndRecoveryWork"
    SEVERE_FROST_DAMAGED_ROADWAY = "severeFrostDamagedRoadway"
    SHED_LOAD = "shedLoad"
    SNOW_AND_ICE_DEBRIS = "snowAndIceDebris"
    SPILLAGE_OCCURRING_FROM_MOVING_VEHICLE = "spillageOccurringFromMovingVehicle"
    SPILLAGE_ON_THE_ROAD = "spillageOnTheRoad"
    UNPROTECTED_ACCIDENT_AREA = "unprotectedAccidentArea"
    OTHER = "other"


class OperatingModeEnum(Enum):
    OPERATING_MODE0 = "operatingMode0"
    OPERATING_MODE1 = "operatingMode1"
    OPERATING_MODE2 = "operatingMode2"
    OPERATING_MODE3 = "operatingMode3"


class OperatorActionOriginEnum(Enum):
    EXTERNAL = "external"
    INTERNAL = "internal"


class OperatorActionStatusEnum(Enum):
    REQUESTED = "requested"
    APPROVED = "approved"
    BEING_IMPLEMENTED = "beingImplemented"
    IMPLEMENTED = "implemented"
    REJECTED = "rejected"
    TERMINATION_REQUESTED = "terminationRequested"
    BEING_TERMINATED = "beingTerminated"


class OverallSeverityEnum(Enum):
    HIGHEST = "highest"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    LOWEST = "lowest"
    NONE_VALUE = "none"
    UNKNOWN = "unknown"


class PersonCategoryEnum(Enum):
    ADULT = "adult"
    CHILD = "child"
    EMERGENCY_SERVICES_PERSON = "emergencyServicesPerson"
    FIREMAN = "fireman"
    INFANT = "infant"
    MEDICAL_STAFF = "medicalStaff"
    MEMBER_OF_THE_PUBLIC = "memberOfThePublic"
    POLICEMAN = "policeman"
    POLITICIAN = "politician"
    PUBLIC_TRANSPORT_PASSENGER = "publicTransportPassenger"
    SICK_PERSON = "sickPerson"
    TRAFFIC_OFFICER = "trafficOfficer"
    TRAFFIC_WARDEN = "trafficWarden"
    VERY_IMPORTANT_PERSON = "veryImportantPerson"


class PlacesEnum(Enum):
    AROUND_BENDS_IN_THE_ROAD = "aroundBendsInTheRoad"
    AT_CUSTOMS_POSTS = "atCustomsPosts"
    AT_HIGH_ALTITUDES = "atHighAltitudes"
    AT_TOLL_PLAZAS = "atTollPlazas"
    IN_GALLERIES = "inGalleries"
    IN_LOW_LYING_AREAS = "inLowLyingAreas"
    IN_ROADWORKS_AREAS = "inRoadworksAreas"
    IN_SHADED_AREAS = "inShadedAreas"
    IN_THE_CITY_CENTRE = "inTheCityCentre"
    IN_THE_INNER_CITY_AREAS = "inTheInnerCityAreas"
    IN_TUNNELS = "inTunnels"
    ON_BRIDGES = "onBridges"
    ON_ELEVATED_SECTIONS = "onElevatedSections"
    ON_ENTERING_OR_LEAVING_TUNNELS = "onEnteringOrLeavingTunnels"
    ON_ENTERING_THE_COUNTRY = "onEnteringTheCountry"
    ON_FLYOVERS = "onFlyovers"
    ON_LEAVING_THE_COUNTRY = "onLeavingTheCountry"
    ON_MOTORWAYS = "onMotorways"
    ON_NON_MOTORWAYS = "onNonMotorways"
    ON_ROUNDABOUTS = "onRoundabouts"
    ON_SLIP_ROADS = "onSlipRoads"
    ON_UNDERGROUND_SECTIONS = "onUndergroundSections"
    ON_UNDERPASSES = "onUnderpasses"
    OVER_THE_CREST_OF_HILLS = "overTheCrestOfHills"
    OTHER = "other"


class PollutantTypeEnum(Enum):
    BENZENE_TOLUENE_XYLENE = "benzeneTolueneXylene"
    CARBON_MONOXIDE = "carbonMonoxide"
    LEAD = "lead"
    METHANE = "methane"
    NITRIC_OXIDE = "nitricOxide"
    NITROGEN_DIOXIDE = "nitrogenDioxide"
    NITROGEN_MONOXIDE = "nitrogenMonoxide"
    NITROGEN_OXIDES = "nitrogenOxides"
    NON_METHANE_HYDROCARBONS = "nonMethaneHydrocarbons"
    OZONE = "ozone"
    PARTICULATES10 = "particulates10"
    POLYCYCLIC_AROMATIC_HYDROCARBONS = "polycyclicAromaticHydrocarbons"
    PRIMARY_PARTICULATE = "primaryParticulate"
    SULPHUR_DIOXIDE = "sulphurDioxide"
    TOTAL_HYDROCARBONS = "totalHydrocarbons"


class PoorEnvironmentTypeEnum(Enum):
    BAD_WEATHER = "badWeather"
    BLIZZARD = "blizzard"
    BLOWING_DUST = "blowingDust"
    BLOWING_SNOW = "blowingSnow"
    CROSSWINDS = "crosswinds"
    DAMAGING_HAIL = "damagingHail"
    DENSE_FOG = "denseFog"
    ECLIPSE = "eclipse"
    EXTREME_COLD = "extremeCold"
    EXTREME_HEAT = "extremeHeat"
    FOG = "fog"
    FREEZING_FOG = "freezingFog"
    FROST = "frost"
    GALES = "gales"
    GUSTY_WINDS = "gustyWinds"
    HAIL = "hail"
    HEAVY_FROST = "heavyFrost"
    HEAVY_RAIN = "heavyRain"
    HEAVY_SNOWFALL = "heavySnowfall"
    HURRICANE_FORCE_WINDS = "hurricaneForceWinds"
    LOW_SUN_GLARE = "lowSunGlare"
    MODERATE_FOG = "moderateFog"
    OZONE_POLLUTION = "ozonePollution"
    POLLUTION = "pollution"
    PATCHY_FOG = "patchyFog"
    PRECIPITATION_IN_THE_AREA = "precipitationInTheArea"
    RAIN = "rain"
    RAIN_CHANGING_TO_SNOW = "rainChangingToSnow"
    SAND_STORMS = "sandStorms"
    SEVERE_EXHAUST_POLLUTION = "severeExhaustPollution"
    SEVERE_SMOG = "severeSmog"
    SHOWERS = "showers"
    SLEET = "sleet"
    SMOG_ALERT = "smogAlert"
    SMOKE_HAZARD = "smokeHazard"
    SNOW_CHANGING_TO_RAIN = "snowChangingToRain"
    SNOWFALL = "snowfall"
    SPRAY_HAZARD = "sprayHazard"
    STORM_FORCE_WINDS = "stormForceWinds"
    STRONG_GUSTS_OF_WIND = "strongGustsOfWind"
    STRONG_WINDS = "strongWinds"
    SWARMS_OF_INSECTS = "swarmsOfInsects"
    TEMPERATURE_FALLING = "temperatureFalling"
    THUNDERSTORMS = "thunderstorms"
    TORNADOES = "tornadoes"
    VERY_STRONG_GUSTS_OF_WIND = "veryStrongGustsOfWind"
    VISIBILITY_REDUCED = "visibilityReduced"
    WHITE_OUT = "whiteOut"
    WINTER_STORM = "winterStorm"


class PrecipitationTypeEnum(Enum):
    DRIZZLE = "drizzle"
    FREEZING_RAIN = "freezingRain"
    HAIL = "hail"
    RAIN = "rain"
    SLEET = "sleet"
    SNOW = "snow"


class ProbabilityOfOccurrenceEnum(Enum):
    CERTAIN = "certain"
    PROBABLE = "probable"
    RISK_OF = "riskOf"


class PublicEventTypeEnum(Enum):
    UNKNOWN = "unknown"
    AGRICULTURAL_SHOW = "agriculturalShow"
    AIR_SHOW = "airShow"
    ART_EVENT = "artEvent"
    ATHLETICS_MEETING = "athleticsMeeting"
    BALL_GAME = "ballGame"
    BASEBALL_GAME = "baseballGame"
    BASKETBALL_GAME = "basketballGame"
    BEER_FESTIVAL = "beerFestival"
    BICYCLE_RACE = "bicycleRace"
    BOAT_RACE = "boatRace"
    BOAT_SHOW = "boatShow"
    BOXING_TOURNAMENT = "boxingTournament"
    BULL_FIGHT = "bullFight"
    CEREMONIAL_EVENT = "ceremonialEvent"
    COMMERCIAL_EVENT = "commercialEvent"
    CONCERT = "concert"
    CRICKET_MATCH = "cricketMatch"
    CULTURAL_EVENT = "culturalEvent"
    EXHIBITION = "exhibition"
    FAIR = "fair"
    FESTIVAL = "festival"
    FILM_FESTIVAL = "filmFestival"
    FILM_TVMAKING = "filmTVMaking"
    FIREWORK_DISPLAY = "fireworkDisplay"
    FLOWER_EVENT = "flowerEvent"
    FOOD_FESTIVAL = "foodFestival"
    FOOTBALL_MATCH = "footballMatch"
    FUNFAIR = "funfair"
    GARDENING_OR_FLOWER_SHOW = "gardeningOrFlowerShow"
    GOLF_TOURNAMENT = "golfTournament"
    HOCKEY_GAME = "hockeyGame"
    HORSE_RACE_MEETING = "horseRaceMeeting"
    INTERNATIONAL_SPORTS_MEETING = "internationalSportsMeeting"
    MAJOR_EVENT = "majorEvent"
    MARATHON = "marathon"
    MARKET = "market"
    MATCH = "match"
    MOTOR_SHOW = "motorShow"
    MOTOR_SPORT_RACE_MEETING = "motorSportRaceMeeting"
    OPEN_AIR_CONCERT = "openAirConcert"
    PARADE = "parade"
    PROCESSION = "procession"
    RACE_MEETING = "raceMeeting"
    RUGBY_MATCH = "rugbyMatch"
    SEVERAL_MAJOR_EVENTS = "severalMajorEvents"
    SHOW = "show"
    SHOW_JUMPING = "showJumping"
    SOUND_AND_LIGHT_SHOW = "soundAndLightShow"
    SPORTS_MEETING = "sportsMeeting"
    STATE_OCCASION = "stateOccasion"
    STREET_FESTIVAL = "streetFestival"
    TENNIS_TOURNAMENT = "tennisTournament"
    THEATRICAL_EVENT = "theatricalEvent"
    TOURNAMENT = "tournament"
    TRADE_FAIR = "tradeFair"
    WATER_SPORTS_MEETING = "waterSportsMeeting"
    WINE_FESTIVAL = "wineFestival"
    WINTER_SPORTS_MEETING = "winterSportsMeeting"
    OTHER = "other"


class ReferencePointDirectionEnum(Enum):
    BOTH = "both"
    NEGATIVE = "negative"
    POSITIVE = "positive"
    UNKNOWN = "unknown"


class RelativeTrafficFlowEnum(Enum):
    TRAFFIC_VERY_MUCH_HEAVIER_THAN_NORMAL = "trafficVeryMuchHeavierThanNormal"
    TRAFFIC_HEAVIER_THAN_NORMAL = "trafficHeavierThanNormal"
    TRAFFIC_FLOW_NORMAL = "trafficFlowNormal"
    TRAFFIC_LIGHTER_THAN_NORMAL = "trafficLighterThanNormal"
    TRAFFIC_VERY_MUCH_LIGHTER_THAN_NORMAL = "trafficVeryMuchLighterThanNormal"


class RequestTypeEnum(Enum):
    CATALOGUE = "catalogue"
    FILTER = "filter"
    REQUEST_DATA = "requestData"
    REQUEST_HISTORICAL_DATA = "requestHistoricalData"
    SUBSCRIPTION = "subscription"


class ReroutingManagementTypeEnum(Enum):
    DO_NOT_FOLLOW_DIVERSION_SIGNS = "doNotFollowDiversionSigns"
    DO_NOT_USE_ENTRY = "doNotUseEntry"
    DO_NOT_USE_EXIT = "doNotUseExit"
    DO_NOT_USE_INTERSECTION_OR_JUNCTION = "doNotUseIntersectionOrJunction"
    FOLLOW_DIVERSION_SIGNS = "followDiversionSigns"
    FOLLOW_LOCAL_DIVERSION = "followLocalDiversion"
    FOLLOW_SPECIAL_MARKERS = "followSpecialMarkers"
    USE_ENTRY = "useEntry"
    USE_EXIT = "useExit"
    USE_INTERSECTION_OR_JUNCTION = "useIntersectionOrJunction"


class ResponseEnum(Enum):
    ACKNOWLEDGE = "acknowledge"
    CATALOGUE_REQUEST_DENIED = "catalogueRequestDenied"
    FILTER_REQUEST_DENIED = "filterRequestDenied"
    REQUEST_DENIED = "requestDenied"
    SUBSCRIPTION_REQUEST_DENIED = "subscriptionRequestDenied"


class RoadMaintenanceTypeEnum(Enum):
    CLEARANCE_WORK = "clearanceWork"
    CONTROLLED_AVALANCHE = "controlledAvalanche"
    INSTALLATION_WORK = "installationWork"
    GRASS_CUTTING_WORK = "grassCuttingWork"
    MAINTENANCE_WORK = "maintenanceWork"
    OVERHEAD_WORKS = "overheadWorks"
    REPAIR_WORK = "repairWork"
    RESURFACING_WORK = "resurfacingWork"
    ROAD_MARKING_WORK = "roadMarkingWork"
    ROADSIDE_WORK = "roadsideWork"
    ROADWORKS_CLEARANCE = "roadworksClearance"
    ROADWORKS = "roadworks"
    ROCK_FALL_PREVENTATIVE_MAINTENANCE = "rockFallPreventativeMaintenance"
    SALTING_IN_PROGRESS = "saltingInProgress"
    SNOWPLOUGHS_IN_USE = "snowploughsInUse"
    TREE_AND_VEGETATION_CUTTING_WORK = "treeAndVegetationCuttingWork"
    OTHER = "other"


class RoadOperatorServiceDisruptionTypeEnum(Enum):
    EMERGENCY_TELEPHONE_NUMBER_OUT_OF_SERVICE = "emergencyTelephoneNumberOutOfService"
    INFORMATION_SERVICE_TELEPHONE_NUMBER_OUT_OF_SERVICE = "informationServiceTelephoneNumberOutOfService"
    NO_TRAFFIC_OFFICER_PATROL_SERVICE = "noTrafficOfficerPatrolService"


class RoadOrCarriagewayOrLaneManagementTypeEnum(Enum):
    CAR_POOL_LANE_IN_OPERATION = "carPoolLaneInOperation"
    CARRIAGEWAY_CLOSURES = "carriagewayClosures"
    CLEAR_ALANE_FOR_EMERGENCY_VEHICLES = "clearALaneForEmergencyVehicles"
    CLEAR_ALANE_FOR_SNOWPLOUGHS_AND_GRITTING_VEHICLES = "clearALaneForSnowploughsAndGrittingVehicles"
    CLOSED_PERMANENTLY_FOR_THE_WINTER = "closedPermanentlyForTheWinter"
    CONTRAFLOW = "contraflow"
    DO_NOT_USE_SPECIFIED_LANES_OR_CARRIAGEWAYS = "doNotUseSpecifiedLanesOrCarriageways"
    HARD_SHOULDER_RUNNING_IN_OPERATION = "hardShoulderRunningInOperation"
    INTERMITTENT_SHORT_TERM_CLOSURES = "intermittentShortTermClosures"
    KEEP_TO_THE_LEFT = "keepToTheLeft"
    KEEP_TO_THE_RIGHT = "keepToTheRight"
    LANE_CLOSURES = "laneClosures"
    LANES_DEVIATED = "lanesDeviated"
    NARROW_LANES = "narrowLanes"
    NEW_ROADWORKS_LAYOUT = "newRoadworksLayout"
    OVERNIGHT_CLOSURES = "overnightClosures"
    ROAD_CLEARED = "roadCleared"
    ROAD_CLOSED = "roadClosed"
    ROLLING_ROAD_BLOCK = "rollingRoadBlock"
    RUSH_HOUR_LANE_IN_OPERATION = "rushHourLaneInOperation"
    SINGLE_ALTERNATE_LINE_TRAFFIC = "singleAlternateLineTraffic"
    TIDAL_FLOW_LANE_IN_OPERATION = "tidalFlowLaneInOperation"
    TURN_AROUND_IN_OPERATION = "turnAroundInOperation"
    USE_OF_SPECIFIED_LANES_OR_CARRIAGEWAYS_ALLOWED = "useOfSpecifiedLanesOrCarriagewaysAllowed"
    USE_SPECIFIED_LANES_OR_CARRIAGEWAYS = "useSpecifiedLanesOrCarriageways"
    VEHICLE_STORAGE_IN_OPERATION = "vehicleStorageInOperation"
    OTHER = "other"


class RoadsideAssistanceTypeEnum(Enum):
    AIR_AMBULANCE = "airAmbulance"
    BUS_PASSENGER_ASSISTANCE = "busPassengerAssistance"
    EMERGENCY_SERVICES = "emergencyServices"
    FIRST_AID = "firstAid"
    FOOD_DELIVERY = "foodDelivery"
    HELICOPTER_RESCUE = "helicopterRescue"
    VEHICLE_REPAIR = "vehicleRepair"
    VEHICLE_RECOVERY = "vehicleRecovery"
    OTHER = "other"


class RoadsideServiceDisruptionTypeEnum(Enum):
    BAR_CLOSED = "barClosed"
    DIESEL_SHORTAGE = "dieselShortage"
    FUEL_SHORTAGE = "fuelShortage"
    LPG_SHORTAGE = "lpgShortage"
    METHANE_SHORTAGE = "methaneShortage"
    NO_DIESEL_FOR_HEAVY_VEHICLES = "noDieselForHeavyVehicles"
    NO_DIESEL_FOR_LIGHT_VEHICLES = "noDieselForLightVehicles"
    NO_PUBLIC_TELEPHONES = "noPublicTelephones"
    NO_TOILET_FACILITIES = "noToiletFacilities"
    NO_VEHICLE_REPAIR_FACILITIES = "noVehicleRepairFacilities"
    PETROL_SHORTAGE = "petrolShortage"
    REST_AREA_BUSY = "restAreaBusy"
    REST_AREA_CLOSED = "restAreaClosed"
    REST_AREA_OVERCROWDED_DRIVE_TO_ANOTHER_REST_AREA = "restAreaOvercrowdedDriveToAnotherRestArea"
    SERVICE_AREA_BUSY = "serviceAreaBusy"
    SERVICE_AREA_CLOSED = "serviceAreaClosed"
    SERVICE_AREA_FUEL_STATION_CLOSED = "serviceAreaFuelStationClosed"
    SERVICE_AREA_OVERCROWDED_DRIVE_TO_ANOTHER_SERVICE_AREA = "serviceAreaOvercrowdedDriveToAnotherServiceArea"
    SERVICE_AREA_RESTAURANT_CLOSED = "serviceAreaRestaurantClosed"
    SOME_COMMERCIAL_SERVICES_CLOSED = "someCommercialServicesClosed"
    WATER_SHORTAGE = "waterShortage"


class RoadworksDurationEnum(Enum):
    LONG_TERM = "longTerm"
    MEDIUM_TERM = "mediumTerm"
    SHORT_TERM = "shortTerm"


class RoadworksScaleEnum(Enum):
    MAJOR = "major"
    MEDIUM = "medium"
    MINOR = "minor"


class SourceTypeEnum(Enum):
    AUTOMOBILE_CLUB_PATROL = "automobileClubPatrol"
    CAMERA_OBSERVATION = "cameraObservation"
    FREIGHT_VEHICLE_OPERATOR = "freightVehicleOperator"
    INDUCTION_LOOP_MONITORING_STATION = "inductionLoopMonitoringStation"
    INFRARED_MONITORING_STATION = "infraredMonitoringStation"
    MICROWAVE_MONITORING_STATION = "microwaveMonitoringStation"
    MOBILE_TELEPHONE_CALLER = "mobileTelephoneCaller"
    NON_POLICE_EMERGENCY_SERVICE_PATROL = "nonPoliceEmergencyServicePatrol"
    OTHER_INFORMATION = "otherInformation"
    OTHER_OFFICIAL_VEHICLE = "otherOfficialVehicle"
    POLICE_PATROL = "policePatrol"
    PRIVATE_BREAKDOWN_SERVICE = "privateBreakdownService"
    PUBLIC_AND_PRIVATE_UTILITIES = "publicAndPrivateUtilities"
    REGISTERED_MOTORIST_OBSERVER = "registeredMotoristObserver"
    ROAD_AUTHORITIES = "roadAuthorities"
    ROAD_OPERATOR_PATROL = "roadOperatorPatrol"
    ROADSIDE_TELEPHONE_CALLER = "roadsideTelephoneCaller"
    SPOTTER_AIRCRAFT = "spotterAircraft"
    TRAFFIC_MONITORING_STATION = "trafficMonitoringStation"
    TRANSIT_OPERATOR = "transitOperator"
    VEHICLE_PROBE_MEASUREMENT = "vehicleProbeMeasurement"
    VIDEO_PROCESSING_MONITORING_STATION = "videoProcessingMonitoringStation"


class SpeedManagementTypeEnum(Enum):
    ACTIVE_SPEED_CONTROL_IN_OPERATION = "activeSpeedControlInOperation"
    DO_NOT_SLOWDOWN_UNNECESSARILY = "doNotSlowdownUnnecessarily"
    OBSERVE_SPEED_LIMIT = "observeSpeedLimit"
    POLICE_SPEED_CHECKS_IN_OPERATION = "policeSpeedChecksInOperation"
    REDUCE_YOUR_SPEED = "reduceYourSpeed"
    OTHER = "other"


class SubjectTypeOfWorksEnum(Enum):
    BRIDGE = "bridge"
    BURIED_CABLES = "buriedCables"
    BURIED_SERVICES = "buriedServices"
    CRASH_BARRIER = "crashBarrier"
    GALLERY = "gallery"
    GANTRY = "gantry"
    GAS_MAIN_WORK = "gasMainWork"
    INTERCHANGE = "interchange"
    JUNCTION = "junction"
    LEVEL_CROSSING = "levelCrossing"
    LIGHTING_SYSTEM = "lightingSystem"
    MEASUREMENT_EQUIPMENT = "measurementEquipment"
    NOISE_PROTECTION = "noiseProtection"
    ROAD = "road"
    ROADSIDE_DRAINS = "roadsideDrains"
    ROADSIDE_EMBANKMENT = "roadsideEmbankment"
    ROADSIDE_EQUIPMENT = "roadsideEquipment"
    ROAD_SIGNS = "roadSigns"
    ROUNDABOUT = "roundabout"
    TOLL_GATE = "tollGate"
    TUNNEL = "tunnel"
    WATER_MAIN = "waterMain"
    OTHER = "other"


class SubscriptionStateEnum(Enum):
    ACTIVE = "active"
    SUSPENDED = "suspended"


class TpegLoc01AreaLocationSubtypeEnum(Enum):
    LARGE_AREA = "largeArea"
    OTHER = "other"


class TpegLoc01FramedPointLocationSubtypeEnum(Enum):
    FRAMED_POINT = "framedPoint"


class TpegLoc01LinearLocationSubtypeEnum(Enum):
    SEGMENT = "segment"


class TpegLoc01SimplePointLocationSubtypeEnum(Enum):
    INTERSECTION = "intersection"
    NON_LINKED_POINT = "nonLinkedPoint"


class TpegLoc02DirectionTypeEnum(Enum):
    ALL_DIRECTIONS = "allDirections"
    ANTICLOCKWISE = "anticlockwise"
    BOTH_WAYS = "bothWays"
    CLOCKWISE = "clockwise"
    EAST_BOUND = "eastBound"
    INNER_RING = "innerRing"
    NORTH_BOUND = "northBound"
    NORTH_EAST_BOUND = "northEastBound"
    NORTH_WEST_BOUND = "northWestBound"
    OPPOSITE = "opposite"
    OUTER_RING = "outerRing"
    SOUTH_BOUND = "southBound"
    SOUTH_EAST_BOUND = "southEastBound"
    SOUTH_WEST_BOUND = "southWestBound"
    WEST_BOUND = "westBound"
    UNKNOWN = "unknown"
    OTHER = "other"


class TpegLoc03AreaDescriptorSubtypeEnum(Enum):
    ADMINISTRATIVE_AREA_NAME = "administrativeAreaName"
    ADMINISTRATIVE_REFERENCE_NAME = "administrativeReferenceName"
    AREA_NAME = "areaName"
    COUNTY_NAME = "countyName"
    LAKE_NAME = "lakeName"
    NATION_NAME = "nationName"
    POLICE_FORCE_CONTROL_AREA_NAME = "policeForceControlAreaName"
    REGION_NAME = "regionName"
    SEA_NAME = "seaName"
    TOWN_NAME = "townName"
    OTHER = "other"


class TpegLoc03IlcPointDescriptorSubtypeEnum(Enum):
    TPEG_ILC_NAME1 = "tpegIlcName1"
    TPEG_ILC_NAME2 = "tpegIlcName2"
    TPEG_ILC_NAME3 = "tpegIlcName3"


class TpegLoc03JunctionPointDescriptorSubtypeEnum(Enum):
    JUNCTION_NAME = "junctionName"


class TpegLoc03OtherPointDescriptorSubtypeEnum(Enum):
    ADMINISTRATIVE_AREA_NAME = "administrativeAreaName"
    ADMINISTRATIVE_REFERENCE_NAME = "administrativeReferenceName"
    AIRPORT_NAME = "airportName"
    AREA_NAME = "areaName"
    BUILDING_NAME = "buildingName"
    BUS_STOP_IDENTIFIER = "busStopIdentifier"
    BUS_STOP_NAME = "busStopName"
    CANAL_NAME = "canalName"
    COUNTY_NAME = "countyName"
    FERRY_PORT_NAME = "ferryPortName"
    INTERSECTION_NAME = "intersectionName"
    LAKE_NAME = "lakeName"
    LINK_NAME = "linkName"
    LOCAL_LINK_NAME = "localLinkName"
    METRO_STATION_NAME = "metroStationName"
    NATION_NAME = "nationName"
    NON_LINKED_POINT_NAME = "nonLinkedPointName"
    PARKING_FACILITY_NAME = "parkingFacilityName"
    POINT_NAME = "pointName"
    POINT_OF_INTEREST_NAME = "pointOfInterestName"
    RAILWAY_STATION = "railwayStation"
    REGION_NAME = "regionName"
    RIVER_NAME = "riverName"
    SEA_NAME = "seaName"
    SERVICE_AREA_NAME = "serviceAreaName"
    TIDAL_RIVER_NAME = "tidalRiverName"
    TOWN_NAME = "townName"
    OTHER = "other"


class TpegLoc04HeightTypeEnum(Enum):
    ABOVE = "above"
    ABOVE_SEA_LEVEL = "aboveSeaLevel"
    ABOVE_STREET_LEVEL = "aboveStreetLevel"
    AT = "at"
    AT_SEA_LEVEL = "atSeaLevel"
    AT_STREET_LEVEL = "atStreetLevel"
    BELOW = "below"
    BELOW_SEA_LEVEL = "belowSeaLevel"
    BELOW_STREET_LEVEL = "belowStreetLevel"
    UNDEFINED = "undefined"
    UNKNOWN = "unknown"
    OTHER = "other"


class TrafficConstrictionTypeEnum(Enum):
    CARRIAGEWAY_BLOCKED = "carriagewayBlocked"
    CARRIAGEWAY_PARTIALLY_OBSTRUCTED = "carriagewayPartiallyObstructed"
    LANES_BLOCKED = "lanesBlocked"
    LANES_PARTIALLY_OBSTRUCTED = "lanesPartiallyObstructed"
    ROAD_BLOCKED = "roadBlocked"
    ROAD_PARTIALLY_OBSTRUCTED = "roadPartiallyObstructed"


class TrafficFlowCharacteristicsEnum(Enum):
    ERRATIC_FLOW = "erraticFlow"
    SMOOTH_FLOW = "smoothFlow"
    STOP_AND_GO = "stopAndGo"
    TRAFFIC_BLOCKED = "trafficBlocked"


class TrafficStatusEnum(Enum):
    IMPOSSIBLE = "impossible"
    CONGESTED = "congested"
    HEAVY = "heavy"
    FREE_FLOW = "freeFlow"
    UNKNOWN = "unknown"


class TrafficTrendTypeEnum(Enum):
    TRAFFIC_BUILDING_UP = "trafficBuildingUp"
    TRAFFIC_EASING = "trafficEasing"
    TRAFFIC_STABLE = "trafficStable"
    UNKNOWN = "unknown"


class TrafficTypeEnum(Enum):
    ACCESS_ONLY_TRAFFIC = "accessOnlyTraffic"
    DESTINED_FOR_AIRPORT = "destinedForAirport"
    DESTINED_FOR_AIRPORT_ARRIVALS = "destinedForAirportArrivals"
    DESTINED_FOR_AIRPORT_DEPARTURES = "destinedForAirportDepartures"
    DESTINED_FOR_FERRY_SERVICE = "destinedForFerryService"
    DESTINED_FOR_RAIL_SERVICE = "destinedForRailService"
    HOLIDAY_TRAFFIC = "holidayTraffic"
    LOCAL_TRAFFIC = "localTraffic"
    LONG_DISTANCE_TRAFFIC = "longDistanceTraffic"
    REGIONAL_TRAFFIC = "regionalTraffic"
    RESIDENTS_ONLY_TRAFFIC = "residentsOnlyTraffic"
    THROUGH_TRAFFIC = "throughTraffic"
    VISITOR_TRAFFIC = "visitorTraffic"


class TransitServiceInformationEnum(Enum):
    CANCELLATIONS = "cancellations"
    DELAY_DUE_TO_BAD_WEATHER = "delayDueToBadWeather"
    DELAY_DUE_TO_REPAIRS = "delayDueToRepairs"
    DELAYED_UNTIL_FURTHER_NOTICE = "delayedUntilFurtherNotice"
    DELAYS_DUE_TO_FLOTSAM = "delaysDueToFlotsam"
    DEPARTURE_ON_SCHEDULE = "departureOnSchedule"
    FERRY_REPLACED_BY_ICE_ROAD = "ferryReplacedByIceRoad"
    FREE_SHUTTLE_SERVICE_OPERATING = "freeShuttleServiceOperating"
    INFORMATION_SERVICE_NOT_AVAILABLE = "informationServiceNotAvailable"
    IRREGULAR_SERVICE_DELAYS = "irregularServiceDelays"
    LOAD_CAPACITY_CHANGED = "loadCapacityChanged"
    RESTRICTIONS_FOR_LONGER_VEHICLES = "restrictionsForLongerVehicles"
    SERVICE_DELAYS = "serviceDelays"
    SERVICE_DELAYS_OF_UNCERTAIN_DURATION = "serviceDelaysOfUncertainDuration"
    SERVICE_FULLY_BOOKED = "serviceFullyBooked"
    SERVICE_NOT_OPERATING = "serviceNotOperating"
    SERVICE_NOT_OPERATING_SUBSTITUTE_SERVICE_AVAILABLE = "serviceNotOperatingSubstituteServiceAvailable"
    SERVICE_SUSPENDED = "serviceSuspended"
    SERVICE_WITHDRAWN = "serviceWithdrawn"
    SHUTTLE_SERVICE_OPERATING = "shuttleServiceOperating"
    TEMPORARY_CHANGES_TO_TIMETABLES = "temporaryChangesToTimetables"
    OTHER = "other"


class TransitServiceTypeEnum(Enum):
    AIR = "air"
    BUS = "bus"
    FERRY = "ferry"
    HYDROFOIL = "hydrofoil"
    RAIL = "rail"
    TRAM = "tram"
    UNDERGROUND_METRO = "undergroundMetro"


class TravelTimeTrendTypeEnum(Enum):
    DECREASING = "decreasing"
    INCREASING = "increasing"
    STABLE = "stable"


class TravelTimeTypeEnum(Enum):
    BEST = "best"
    ESTIMATED = "estimated"
    INSTANTANEOUS = "instantaneous"
    RECONSTITUTED = "reconstituted"


class UpdateMethodEnum(Enum):
    ALL_ELEMENT_UPDATE = "allElementUpdate"
    SINGLE_ELEMENT_UPDATE = "singleElementUpdate"
    SNAPSHOT = "snapshot"


class UrgencyEnum(Enum):
    EXTREMELY_URGENT = "extremelyUrgent"
    URGENT = "urgent"
    NORMAL_URGENCY = "normalUrgency"


class UrlLinkTypeEnum(Enum):
    DOCUMENT_PDF = "documentPdf"
    HTML = "html"
    IMAGE = "image"
    RSS = "rss"
    VIDEO_STREAM = "videoStream"
    VOICE_STREAM = "voiceStream"
    OTHER = "other"


class ValidityStatusEnum(Enum):
    ACTIVE = "active"
    SUSPENDED = "suspended"
    DEFINED_BY_VALIDITY_TIME_SPEC = "definedByValidityTimeSpec"


class VehicleEquipmentEnum(Enum):
    NOT_USING_SNOW_CHAINS = "notUsingSnowChains"
    NOT_USING_SNOW_CHAINS_OR_TYRES = "notUsingSnowChainsOrTyres"
    SNOW_CHAINS_IN_USE = "snowChainsInUse"
    SNOW_TYRES_IN_USE = "snowTyresInUse"
    SNOW_CHAINS_OR_TYRES_IN_USE = "snowChainsOrTyresInUse"
    WITHOUT_SNOW_TYRES_OR_CHAINS_ON_BOARD = "withoutSnowTyresOrChainsOnBoard"


class VehicleObstructionTypeEnum(Enum):
    ABANDONED_VEHICLE = "abandonedVehicle"
    ABNORMAL_LOAD = "abnormalLoad"
    BROKEN_DOWN_BUS = "brokenDownBus"
    BROKEN_DOWN_HEAVY_LORRY = "brokenDownHeavyLorry"
    BROKEN_DOWN_VEHICLE = "brokenDownVehicle"
    CONVOY = "convoy"
    DAMAGED_VEHICLE = "damagedVehicle"
    DANGEROUS_SLOW_MOVING_VEHICLE = "dangerousSlowMovingVehicle"
    EMERGENCY_VEHICLE = "emergencyVehicle"
    HIGH_SPEED_EMERGENCY_VEHICLE = "highSpeedEmergencyVehicle"
    LONG_LOAD = "longLoad"
    MILITARY_CONVOY = "militaryConvoy"
    OVERHEIGHT_VEHICLE = "overheightVehicle"
    PROHIBITED_VEHICLE_ON_THE_ROADWAY = "prohibitedVehicleOnTheRoadway"
    SALTING_OR_GRITTING_VEHICLE_IN_USE = "saltingOrGrittingVehicleInUse"
    SLOW_MOVING_MAINTENANCE_VEHICLE = "slowMovingMaintenanceVehicle"
    SLOW_VEHICLE = "slowVehicle"
    SNOWPLOUGH = "snowplough"
    TRACK_LAYING_VEHICLE = "trackLayingVehicle"
    UNLIT_VEHICLE_ON_THE_ROAD = "unlitVehicleOnTheRoad"
    VEHICLE_ON_FIRE = "vehicleOnFire"
    VEHICLE_CARRYING_HAZARDOUS_MATERIALS = "vehicleCarryingHazardousMaterials"
    VEHICLE_IN_DIFFICULTY = "vehicleInDifficulty"
    VEHICLE_ON_WRONG_CARRIAGEWAY = "vehicleOnWrongCarriageway"
    VEHICLE_STUCK = "vehicleStuck"
    VEHICLE_STUCK_UNDER_BRIDGE = "vehicleStuckUnderBridge"
    VEHICLE_WITH_OVERHEIGHT_LOAD = "vehicleWithOverheightLoad"
    VEHICLE_WITH_OVERWIDE_LOAD = "vehicleWithOverwideLoad"
    OTHER = "other"


class VehicleStatusEnum(Enum):
    ABANDONED = "abandoned"
    BROKEN_DOWN = "brokenDown"
    BURNT_OUT = "burntOut"
    DAMAGED = "damaged"
    DAMAGED_AND_IMMOBILIZED = "damagedAndImmobilized"
    ON_FIRE = "onFire"


class VehicleTypeEnum(Enum):
    ANY_VEHICLE = "anyVehicle"
    ARTICULATED_VEHICLE = "articulatedVehicle"
    BICYCLE = "bicycle"
    BUS = "bus"
    CAR = "car"
    CARAVAN = "caravan"
    CAR_OR_LIGHT_VEHICLE = "carOrLightVehicle"
    CAR_WITH_CARAVAN = "carWithCaravan"
    CAR_WITH_TRAILER = "carWithTrailer"
    FOUR_WHEEL_DRIVE = "fourWheelDrive"
    HIGH_SIDED_VEHICLE = "highSidedVehicle"
    LORRY = "lorry"
    MOPED = "moped"
    MOTORCYCLE = "motorcycle"
    MOTORCYCLE_WITH_SIDE_CAR = "motorcycleWithSideCar"
    MOTORSCOOTER = "motorscooter"
    TANKER = "tanker"
    THREE_WHEELED_VEHICLE = "threeWheeledVehicle"
    TRAILER = "trailer"
    TRAM = "tram"
    TWO_WHEELED_VEHICLE = "twoWheeledVehicle"
    VAN = "van"
    VEHICLE_WITH_CATALYTIC_CONVERTER = "vehicleWithCatalyticConverter"
    VEHICLE_WITHOUT_CATALYTIC_CONVERTER = "vehicleWithoutCatalyticConverter"
    VEHICLE_WITH_CARAVAN = "vehicleWithCaravan"
    VEHICLE_WITH_TRAILER = "vehicleWithTrailer"
    WITH_EVEN_NUMBERED_REGISTRATION_PLATES = "withEvenNumberedRegistrationPlates"
    WITH_ODD_NUMBERED_REGISTRATION_PLATES = "withOddNumberedRegistrationPlates"
    OTHER = "other"


class VehicleUsageEnum(Enum):
    AGRICULTURAL = "agricultural"
    COMMERCIAL = "commercial"
    EMERGENCY_SERVICES = "emergencyServices"
    MILITARY = "military"
    NON_COMMERCIAL = "nonCommercial"
    PATROL = "patrol"
    RECOVERY_SERVICES = "recoveryServices"
    ROAD_MAINTENANCE_OR_CONSTRUCTION = "roadMaintenanceOrConstruction"
    ROAD_OPERATOR = "roadOperator"
    TAXI = "taxi"


class VmsFaultEnum(Enum):
    COMMUNICATIONS_FAILURE = "communicationsFailure"
    INCORRECT_MESSAGE_DISPLAYED = "incorrectMessageDisplayed"
    INCORRECT_PICTOGRAM_DISPLAYED = "incorrectPictogramDisplayed"
    OUT_OF_SERVICE = "outOfService"
    POWER_FAILURE = "powerFailure"
    UNABLE_TO_CLEAR_DOWN = "unableToClearDown"
    UNKNOWN = "unknown"
    OTHER = "other"


class VmsTypeEnum(Enum):
    COLOUR_GRAPHIC = "colourGraphic"
    CONTINUOUS_SIGN = "continuousSign"
    MONOCHROME_GRAPHIC = "monochromeGraphic"
    OTHER = "other"


class WeatherRelatedRoadConditionTypeEnum(Enum):
    BLACK_ICE = "blackIce"
    DEEP_SNOW = "deepSnow"
    DRY = "dry"
    FREEZING_OF_WET_ROADS = "freezingOfWetRoads"
    FREEZING_PAVEMENTS = "freezingPavements"
    FREEZING_RAIN = "freezingRain"
    FRESH_SNOW = "freshSnow"
    ICE = "ice"
    ICE_BUILD_UP = "iceBuildUp"
    ICE_WITH_WHEEL_BAR_TRACKS = "iceWithWheelBarTracks"
    ICY_PATCHES = "icyPatches"
    LOOSE_SNOW = "looseSnow"
    NORMAL_WINTER_CONDITIONS_FOR_PEDESTRIANS = "normalWinterConditionsForPedestrians"
    PACKED_SNOW = "packedSnow"
    ROAD_SURFACE_MELTING = "roadSurfaceMelting"
    SLIPPERY_ROAD = "slipperyRoad"
    SLUSH_ON_ROAD = "slushOnRoad"
    SLUSH_STRINGS = "slushStrings"
    SNOW_DRIFTS = "snowDrifts"
    SNOW_ON_PAVEMENT = "snowOnPavement"
    SNOW_ON_THE_ROAD = "snowOnTheRoad"
    SURFACE_WATER = "surfaceWater"
    WET = "wet"
    WET_AND_ICY_ROAD = "wetAndIcyRoad"
    WET_ICY_PAVEMENT = "wetIcyPavement"
    OTHER = "other"


class WeekOfMonthEnum(Enum):
    FIRST_WEEK_OF_MONTH = "firstWeekOfMonth"
    SECOND_WEEK_OF_MONTH = "secondWeekOfMonth"
    THIRD_WEEK_OF_MONTH = "thirdWeekOfMonth"
    FOURTH_WEEK_OF_MONTH = "fourthWeekOfMonth"
    FIFTH_WEEK_OF_MONTH = "fifthWeekOfMonth"


class WinterEquipmentManagementTypeEnum(Enum):
    DO_NO_USE_STUD_TYRES = "doNoUseStudTyres"
    USE_SNOW_CHAINS = "useSnowChains"
    USE_SNOW_CHAINS_OR_TYRES = "useSnowChainsOrTyres"
    USE_SNOW_TYRES = "useSnowTyres"
    WINTER_EQUIPMENT_ON_BOARD_REQUIRED = "winterEquipmentOnBoardRequired"
    OTHER = "other"


class AccessibilityEnumeration(Enum):
    UNKNOWN = "unknown"
    FALSE_VALUE = "false"
    TRUE_VALUE = "true"


class EncumbranceEnumeration(Enum):
    LUGGAGE_ENCUMBERED = "luggageEncumbered"
    PUSHCHAIR = "pushchair"
    BAGGAGE_TROLLEY = "baggageTrolley"
    OVERSIZE_BAGGAGE = "oversizeBaggage"
    GUIDE_DOG = "guideDog"
    OTHER_ANIMAL = "otherAnimal"
    OTHER_ENCUMBRANCE = "otherEncumbrance"


class MedicalNeedEnumeration(Enum):
    ALLERGIC = "allergic"
    HEART_CONDITION = "heartCondition"
    OTHER_MEDICAL_NEED = "otherMedicalNeed"


class MobilityEnumeration(Enum):
    WHEELCHAIR = "wheelchair"
    ASSISTED_WHEELCHAIR = "assistedWheelchair"
    MOTORIZED_WHEELCHAIR = "motorizedWheelchair"
    WALKING_FRAME = "walkingFrame"
    RESTRICTED_MOBILITY = "restrictedMobility"
    OTHER_MOBILITY_NEED = "otherMobilityNeed"


class PyschosensoryNeedEnumeration(Enum):
    VISUAL_IMPAIRMENT = "visualImpairment"
    AUDITORY_IMPAIRMENT = "auditoryImpairment"
    COGNITIVE_INPUT_IMPAIRMENT = "cognitiveInputImpairment"
    AVERSE_TO_LIFTS = "averseToLifts"
    AVERSE_TO_ESCALATORS = "averseToEscalators"
    AVERSE_TO_CONFINED_SPACES = "averseToConfinedSpaces"
    AVERSE_TO_CROWDS = "averseToCrowds"
    OTHER_PSYCHOSENSORY_NEED = "otherPsychosensoryNeed"


class SuitabilityEnumeration(Enum):
    SUITABLE = "suitable"
    NOT_SUITABLE = "notSuitable"


@dataclass
class AccessLinkRef:
    class Meta:
        namespace = "http://www.ifopt.org.uk/ifopt"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class AccessModesEnumeration(Enum):
    FOOT = "foot"
    BICYCLE = "bicycle"
    CAR = "car"
    TAXI = "taxi"
    SHUTTLE = "shuttle"


class AccessSpaceTypeEnumeration(Enum):
    CONCOURS = "concours"
    BOOKING_HALL = "bookingHall"
    FORECOURT = "forecourt"
    UNDERPASS = "underpass"
    OVERPASS = "overpass"
    PASSAGE = "passage"
    PASSAGE_SECTION = "passageSection"
    GALLERY = "gallery"
    GARAGE = "garage"
    SHOP = "shop"
    WAITING_ROOM = "waitingRoom"
    RESTAURANT = "restaurant"
    OTHER = "other"


class AccessibilityFeatureEnumeration1(Enum):
    LIFT = "lift"
    STAIRS = "stairs"
    SERIES_OF_STAIRS = "seriesOfStairs"
    ESCALATOR = "escalator"
    TRAVELATOR = "travelator"
    RAMP = "ramp"
    SHUTTLE = "shuttle"
    BARRIER = "barrier"
    NARROW_ENTRANCE = "narrowEntrance"
    CONFINED_SPACE = "confinedSpace"
    QUEUE_MANAGEMENT = "queueManagement"
    NONE_VALUE = "none"
    UNKNOWN = "unknown"
    OTHER = "other"


class AdministrativeRoleTypeEnumeration(Enum):
    ALL = "all"
    COLLECTS = "collects"
    VALIDATES = "validates"
    AGGREGATES = "aggregates"
    DISTRIBUTES = "distributes"
    REDISTRIBUTES = "redistributes"


@dataclass
class AliasStructure:
    private_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PrivateCode",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "required": True,
        }
    )
    identifier_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "IdentifierType",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )


class BoardingPositionTypeEnumeration(Enum):
    UNKNOWN = "unknown"
    DOOR_FROM_AIRLINE_GATE = "doorFromAirlineGate"
    POSITION_ON_RAIL_PLATFORM = "positionOnRailPlatform"
    POSITION_ON_METRO_PLATFORM = "positionOnMetroPlatform"
    POSITION_AT_COACH_STOP = "positionAtCoachStop"
    POSITION_AT_BUS_STOP = "positionAtBusStop"
    BOAT_GANGWAY = "boatGangway"
    FERRY_GANGWAY = "ferryGangway"
    TELECABINE_PLATFROM = "telecabinePlatfrom"
    SET_DOWN_POINT = "setDownPoint"
    TAXI_BAY = "taxiBay"
    OTHER = "other"


class CheckPointProcessEnumeration(Enum):
    NONE_VALUE = "none"
    UNKNOWN = "unknown"
    TICKET_PURCHASE = "ticketPurchase"
    TICKET_COLLECTION = "ticketCollection"
    TICKET_VALIDATION = "ticketValidation"
    BAGGAGE_CHECK_IN = "baggageCheckIn"
    OVERSIZE_BAGGAGE_CHECK_IN = "oversizeBaggageCheckIn"
    OVERSIZE_BAGGAGE_RECLAIM = "oversizeBaggageReclaim"
    BAGGAGE_RECLAIM = "baggageReclaim"
    LEFT_LUGGAGE_DEPOSIT = "leftLuggageDeposit"
    LEFT_LUGGAGE_RECLAIM = "leftLuggageReclaim"
    FIRSTCLASS_CHECKIN = "firstclassCheckin"
    SPECIAL_NEEDS_CHECKIN = "specialNeedsCheckin"
    BAGGAGE_SECURITY_CHECK = "baggageSecurityCheck"
    SECURITY_CHECK = "securityCheck"
    OUTGOING_PASSPORT_CONTROL = "outgoingPassportControl"
    INCOMING_PASSPORT_CONTROL = "incomingPassportControl"
    FASTTRACK_DEPARTURES = "fasttrackDepartures"
    FASTTRACK_ARRIVALS = "fasttrackArrivals"
    INCOMING_DUTY_FREE = "incomingDutyFree"
    OUTGOING_DUTY_FREE = "outgoingDutyFree"
    TAX_REFUNDS = "taxRefunds"
    OUTGOING_CUSTOMS = "outgoingCustoms"
    INCOMING_CUSTOMS = "incomingCustoms"


class CheckPointServiceEnumeration(Enum):
    SELFSERVICE_MACHINE = "selfserviceMachine"
    COUNTER_SERVICE = "counterService"
    OTHER = "other"


class CompassBearing16Enumeration(Enum):
    VALUE = ""
    SW = "SW"
    SE = "SE"
    NW = "NW"
    NE = "NE"
    W = "W"
    E = "E"
    S = "S"
    N = "N"


class CompassBearing8Enumeration(Enum):
    SW = "SW"
    SE = "SE"
    NW = "NW"
    NE = "NE"
    W = "W"
    E = "E"
    S = "S"
    N = "N"


class CongestionEnumeration(Enum):
    NO_WAITING = "noWaiting"
    QUEUE = "queue"
    CROWDING = "crowding"
    FULL = "full"


class DeltaModificationEnumeration(Enum):
    NEW = "new"
    DELETE = "delete"
    REVISE = "revise"
    DELTA = "delta"


class EquipmentStatusEnumeration(Enum):
    UNKNOWN = "unknown"
    AVAILABLE = "available"
    NOT_AVAILABLE = "notAvailable"


@dataclass
class Extensions2:
    class Meta:
        name = "Extensions"
        namespace = "http://www.ifopt.org.uk/ifopt"

    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "required": True,
        }
    )


@dataclass
class FeatureRefStructure:
    feature_id_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FeatureIdRef",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "required": True,
        }
    )
    feature_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "FeatureType",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )


@dataclass
class HalfOpenTimeRangeStructure1:
    class Meta:
        name = "HalfOpenTimeRangeStructure"

    start_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "required": True,
        }
    )
    end_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "EndTime",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )


class IanaCountryTldEnumeration(Enum):
    AC = "ac"
    AD = "ad"
    AE = "ae"
    AF = "af"
    AG = "ag"
    AI = "ai"
    AL = "al"
    AM = "am"
    AN = "an"
    AO = "ao"
    AQ = "aq"
    AR = "ar"
    AS_VALUE = "as"
    AT = "at"
    AU = "au"
    AW = "aw"
    AZ = "az"
    AX = "ax"
    BA = "ba"
    BB = "bb"
    BD = "bd"
    BE = "be"
    BF = "bf"
    BG = "bg"
    BH = "bh"
    BI = "bi"
    BJ = "bj"
    BM = "bm"
    BN = "bn"
    BO = "bo"
    BR = "br"
    BS = "bs"
    BT = "bt"
    BV = "bv"
    BW = "bw"
    BY = "by"
    BZ = "bz"
    CA = "ca"
    CC = "cc"
    CD = "cd"
    CF = "cf"
    CG = "cg"
    CH = "ch"
    CI = "ci"
    CK = "ck"
    CL = "cl"
    CM = "cm"
    CN = "cn"
    CO = "co"
    CR = "cr"
    CS = "cs"
    CU = "cu"
    CV = "cv"
    CX = "cx"
    CY = "cy"
    CZ = "cz"
    DE = "de"
    DJ = "dj"
    DK = "dk"
    DM = "dm"
    DO = "do"
    DZ = "dz"
    EC = "ec"
    EE = "ee"
    EG = "eg"
    EH = "eh"
    ER = "er"
    ES = "es"
    ET = "et"
    EU = "eu"
    FI = "fi"
    FJ = "fj"
    FK = "fk"
    FM = "fm"
    FO = "fo"
    FR = "fr"
    GA = "ga"
    GB = "gb"
    GD = "gd"
    GE = "ge"
    GF = "gf"
    GG = "gg"
    GH = "gh"
    GI = "gi"
    GL = "gl"
    GM = "gm"
    GN = "gn"
    GP = "gp"
    GQ = "gq"
    GR = "gr"
    GS = "gs"
    GT = "gt"
    GU = "gu"
    GW = "gw"
    GY = "gy"
    HK = "hk"
    HM = "hm"
    HN = "hn"
    HR = "hr"
    HT = "ht"
    HU = "hu"
    ID = "id"
    IE = "ie"
    IL = "il"
    IM = "im"
    IN_VALUE = "in"
    IO = "io"
    IQ = "iq"
    IR = "ir"
    IS_VALUE = "is"
    IT = "it"
    JE = "je"
    JM = "jm"
    JO = "jo"
    JP = "jp"
    KE = "ke"
    KG = "kg"
    KH = "kh"
    KI = "ki"
    KM = "km"
    KN = "kn"
    KP = "kp"
    KR = "kr"
    KW = "kw"
    KY = "ky"
    KZ = "kz"
    LA = "la"
    LB = "lb"
    LC = "lc"
    LI = "li"
    LK = "lk"
    LR = "lr"
    LS = "ls"
    LT = "lt"
    LU = "lu"
    LV = "lv"
    LY = "ly"
    MA = "ma"
    MC = "mc"
    MD = "md"
    MG = "mg"
    MH = "mh"
    MK = "mk"
    ML = "ml"
    MM = "mm"
    MN = "mn"
    MO = "mo"
    MP = "mp"
    MQ = "mq"
    MR = "mr"
    MS = "ms"
    MT = "mt"
    MU = "mu"
    MV = "mv"
    MW = "mw"
    MX = "mx"
    MY = "my"
    MZ = "mz"
    NA = "na"
    NC = "nc"
    NE = "ne"
    NF = "nf"
    NG = "ng"
    NI = "ni"
    NL = "nl"
    NO = "no"
    NP = "np"
    NR = "nr"
    NU = "nu"
    NZ = "nz"
    OM = "om"
    PA = "pa"
    PE = "pe"
    PF = "pf"
    PG = "pg"
    PH = "ph"
    PK = "pk"
    PL = "pl"
    PM = "pm"
    PN = "pn"
    PR = "pr"
    PS = "ps"
    PT = "pt"
    PW = "pw"
    PY = "py"
    QA = "qa"
    RE = "re"
    RO = "ro"
    RU = "ru"
    RW = "rw"
    SA = "sa"
    SB = "sb"
    SC = "sc"
    SD = "sd"
    SE = "se"
    SG = "sg"
    SH = "sh"
    SI = "si"
    SJ = "sj"
    SK = "sk"
    SL = "sl"
    SM = "sm"
    SN = "sn"
    SO = "so"
    SR = "sr"
    ST = "st"
    SV = "sv"
    SY = "sy"
    SZ = "sz"
    TC = "tc"
    TD = "td"
    TF = "tf"
    TG = "tg"
    TH = "th"
    TJ = "tj"
    TK = "tk"
    TL = "tl"
    TM = "tm"
    TN = "tn"
    TO = "to"
    TP = "tp"
    TR = "tr"
    TT = "tt"
    TV = "tv"
    TW = "tw"
    TZ = "tz"
    UA = "ua"
    UG = "ug"
    UK = "uk"
    UM = "um"
    US = "us"
    UY = "uy"
    UZ = "uz"
    VA = "va"
    VC = "vc"
    VE = "ve"
    VG = "vg"
    VI = "vi"
    VN = "vn"
    VU = "vu"
    WF = "wf"
    WS = "ws"
    YE = "ye"
    YT = "yt"
    YU = "yu"
    ZA = "za"
    ZM = "zm"
    ZW = "zw"


@dataclass
class InfoLink:
    class Meta:
        namespace = "http://www.ifopt.org.uk/ifopt"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class InfoLinksStructure:
    info_link: List[str] = field(
        default_factory=list,
        metadata={
            "name": "InfoLink",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "min_occurs": 1,
        }
    )


class InterchangeWeightingEnumeration(Enum):
    NO_INTERCHANGE = "noInterchange"
    INTERCHANGE_ALLOWED = "interchangeAllowed"
    RECOMMENDED_INTERCHANGE = "recommendedInterchange"
    PREFERRED_INTERCHANGE = "preferredInterchange"


class ModificationEnumeration(Enum):
    NEW = "new"
    DELETE = "delete"
    REVISE = "revise"


@dataclass
class NavigationPathRef:
    class Meta:
        namespace = "http://www.ifopt.org.uk/ifopt"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class NavigationTypeEnumeration(Enum):
    HALL_TO_QUAY = "hallToQuay"
    HALL_TO_STREET = "hallToStreet"
    QUAY_TO_HALL = "quayToHall"
    QUAY_TO_QUAY = "quayToQuay"
    QUAY_TO_STREET = "quayToStreet"
    STREET_TO_HALL = "streetToHall"
    STREET_TO_QUAY = "streetToQuay"
    OTHER = "other"


class PassageTypeEnumeration(Enum):
    NONE_VALUE = "none"
    PATHWAY = "pathway"
    CORRIDOR = "corridor"
    OVERPASS = "overpass"
    UNDERPASS = "underpass"
    TUNNEL = "tunnel"
    OTHER = "other"


class PathDirectionEnumeration(Enum):
    ONE_WAY = "oneWay"
    TWO_WAY = "twoWay"


class PathHeadingEnumeration(Enum):
    LEFT = "left"
    RIGHT = "right"
    FORWARD = "forward"
    BACK = "back"


@dataclass
class PathJunctionRef:
    class Meta:
        namespace = "http://www.ifopt.org.uk/ifopt"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class PathUpDownEnumeration(Enum):
    UP = "up"
    DOWN = "down"
    LEVEL = "level"
    UP_AND_DOWN = "upAndDown"
    DOWN_AND_UP = "downAndUp"


class QuayTypeEnumeration(Enum):
    AIRLINE_GATE = "airlineGate"
    RAIL_PLATFORM = "railPlatform"
    METRO_PLATFORM = "metroPlatform"
    COACH_STOP = "coachStop"
    BUS_STOP = "busStop"
    TRAM_STOP = "tramStop"
    BOAT_QUAY = "boatQuay"
    FERRY_LANDING = "ferryLanding"
    TELECABINE_PLATFROM = "telecabinePlatfrom"
    TAXI_STAND = "taxiStand"
    SET_DOWN_PLACE = "setDownPlace"
    OTHER = "other"


class RelationToVehicleEnumeration(Enum):
    FRONT_LEFT = "frontLeft"
    FRONT_RIGHT = "frontRight"
    BACK_RIGHT = "backRight"
    DRIVER_LEFT = "driverLeft"
    DRIVER_RIGHT = "driverRight"


class StatusEnumeration(Enum):
    ACTIVE = "active"
    INACTIVE = "inactive"
    PENDING = "pending"


class StopPlaceComponentTypeEnumeration(Enum):
    QUAY = "quay"
    ACCESS_SPACE = "accessSpace"
    ENTRANCE = "entrance"
    BOARDING_POSITION = "boardingPosition"
    STOPPING_PLACE = "stoppingPlace"


@dataclass
class StopPlaceRef:
    class Meta:
        namespace = "http://www.ifopt.org.uk/ifopt"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class StopPlaceRefsStructure:
    stop_place_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "StopPlaceRef",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "min_occurs": 1,
        }
    )


class StopPlaceTypeEnumeration1(Enum):
    AIRPORT = "airport"
    RAIL_STATION = "railStation"
    METRO_STATION = "metroStation"
    COACH_STATION = "coachStation"
    BUS_STATION = "busStation"
    HARBOUR_PORT = "harbourPort"
    FERRY_PORT = "ferryPort"
    FERRY_STOP = "ferryStop"
    ON_STREET_BUS = "onStreetBus"
    ON_STREET_TRAM = "onStreetTram"
    SKI_LIFT = "skiLift"
    OTHER = "other"


class TypeOfStopPlaceEnumeration(Enum):
    ONSTREET_BUS = "onstreetBus"
    ONSTREET_TRAM = "onstreetTram"
    FERRY_STOP = "ferryStop"
    AIRPORT = "airport"
    RAIL_STATION = "railStation"
    METRO_STATION = "metroStation"
    COACH_STATION = "coachStation"
    FERRY_PORT = "ferryPort"
    HARBOUR_PORT = "harbourPort"
    OTHER = "other"


@dataclass
class AbstractMemberType:
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class AbstractMetadataPropertyType:
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class AbstractObject:
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractRingType:
    pass


class AggregationType(Enum):
    SET = "set"
    BAG = "bag"
    SEQUENCE = "sequence"
    ARRAY = "array"
    RECORD = "record"
    TABLE = "table"


@dataclass
class CodeListType:
    value: List[str] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        }
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        }
    )


@dataclass
class CodeType:
    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        }
    )


@dataclass
class CoordinatesType:
    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )
    decimal_value: str = field(
        default=".",
        metadata={
            "name": "decimal",
            "type": "Attribute",
        }
    )
    cs: str = field(
        default=",",
        metadata={
            "type": "Attribute",
        }
    )
    ts: str = field(
        default=" ",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class DirectPositionListType:
    value: List[float] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        }
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        }
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        }
    )
    count: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class DirectPositionType:
    value: List[float] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        }
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        }
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        }
    )


@dataclass
class InlinePropertyType:
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "required": True,
        }
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class MeasureListType:
    value: List[float] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        }
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        }
    )


@dataclass
class MeasureType:
    value: Optional[float] = field(
        default=None,
        metadata={
            "required": True,
        }
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        }
    )


class NilReasonEnumerationValue(Enum):
    INAPPLICABLE = "inapplicable"
    MISSING = "missing"
    TEMPLATE = "template"
    UNKNOWN = "unknown"
    WITHHELD = "withheld"


class SignType(Enum):
    VALUE = "-"
    VALUE_1 = "+"


@dataclass
class AssociationName:
    class Meta:
        name = "associationName"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class DefaultCodeSpace:
    class Meta:
        name = "defaultCodeSpace"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class GmlProfileSchema:
    class Meta:
        name = "gmlProfileSchema"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class ReversePropertyName:
    class Meta:
        name = "reversePropertyName"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class TargetElement:
    class Meta:
        name = "targetElement"
        namespace = "http://www.opengis.net/gml/3.2"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class AbstractItemStructure:
    recorded_at_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "RecordedAtTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class AbstractRequestStructure:
    request_timestamp: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "RequestTimestamp",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class AbstractSubscriptionStructure:
    subscriber_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriberRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriptionIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    initial_termination_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "InitialTerminationTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    subscription_renewal: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SubscriptionRenewal",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractTopicPermissionStructure:
    allow: bool = field(
        default=True,
        metadata={
            "name": "Allow",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


class AccessFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    LIFT = "lift"
    ESCALATOR = "escalator"
    TRAVELATOR = "travelator"
    RAMP = "ramp"
    STAIRS = "stairs"
    SHUTTLE = "shuttle"
    NARROW_ENTRANCE = "narrowEntrance"
    BARRIER = "barrier"
    PALLET_ACCESS_LOW_FLOOR = "palletAccess_lowFloor"
    VALIDATOR = "validator"


class AccessibilityFeatureEnumeration2(Enum):
    UNKNOWN = "unknown"
    SINGLE_STEP = "singleStep"
    STAIRS = "stairs"
    ESCALATOR = "escalator"
    TRAVELATOR = "travelator"
    LIFT = "lift"
    RAMP = "ramp"
    MIND_THE_GAP = "mindTheGap"
    TACTILE_PAVING = "tactilePaving"
    SERIES_OF_STAIRS = "seriesOfStairs"
    SHUTTLE = "shuttle"
    BARRIER = "barrier"
    NARROW_ENTRANCE = "narrowEntrance"
    CONFINED_SPACE = "confinedSpace"
    QUEUE_MANAGEMENT = "queueManagement"
    NONE_VALUE = "none"
    OTHER = "other"
    UNDEFINED = "undefined"


class AccommodationFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    PTI23_3 = "pti23_3"
    SLEEPER = "sleeper"
    PTI23_4 = "pti23_4"
    COUCHETTE = "couchette"
    PTI23_5 = "pti23_5"
    SPECIAL_SEATING = "specialSeating"
    PTI23_11 = "pti23_11"
    FREE_SEATING = "freeSeating"
    PTI23_12 = "pti23_12"
    RECLINING_SEATS = "recliningSeats"
    PTI23_13 = "pti23_13"
    BABY_COMPARTMENT = "babyCompartment"
    FAMILY_CARRIAGE = "familyCarriage"


class ActionStatusEnumeration(Enum):
    OPEN = "open"
    PUBLISHED = "published"
    CLOSED = "closed"


@dataclass
class ActualArrivalTime:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class ActualDepartureTime:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class ActualHeadwayInterval:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class AdviceTypeEnumeration(Enum):
    UNKNOWN = "unknown"
    USE_REPLACEMENT_BUS = "useReplacementBus"
    USE_REPLACEMENT_TRAIN = "useReplacementTrain"
    USE_ALTERNATIVE_ROUTE = "useAlternativeRoute"
    GO_ON_FOOT = "goOnFoot"
    DANGER_LEAVE_STATION = "dangerLeaveStation"
    NO_MEANS_OF_TRAVEL = "noMeansOfTravel"
    USE_DIFFERENT_STOPS = "useDifferentStops"
    USE_ALTERNATIVE_STOP = "useAlternativeStop"
    DANGER_DO_NOT_LEAVE_VEHICLE = "dangerDoNotLeaveVehicle"
    TAKE_ADVICE_ANNOUNCEMENTS = "takeAdviceAnnouncements"
    TAKE_ADVICE_PERSONNEL = "takeAdvicePersonnel"
    OBEY_ADVICE_POLICE = "obeyAdvicePolice"
    USE_OTHER_PT = "useOtherPT"
    USE_INTERCHANGE = "useInterchange"
    NO_ADVICE = "noAdvice"
    UNDEFINED = "undefined"


@dataclass
class AimedArrivalTime:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class AimedArrivalTimeOfFeeder:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class AimedDepartureTime:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class AimedDepartureTimeOfDistributor:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class AimedFlexibleAreaRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class AimedHeadwayInterval:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class AimedLatestPassengerAccessTime:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class AirSubmodesOfTransportEnumeration(Enum):
    PTI8_0 = "pti8_0"
    LOC15_0 = "loc15_0"
    UNKNOWN = "unknown"
    PTI8_1 = "pti8_1"
    LOC15_2 = "loc15_2"
    INTERNATIONAL_FLIGHT = "internationalFlight"
    PTI8_2 = "pti8_2"
    DOMESTIC_FLIGHT = "domesticFlight"
    PTI8_3 = "pti8_3"
    LOC15_1 = "loc15_1"
    INTERCONTINENTAL_FLIGHT = "intercontinentalFlight"
    PTI8_4 = "pti8_4"
    LOC15_4 = "loc15_4"
    DOMESTIC_SCHEDULED_FLIGHT = "domesticScheduledFlight"
    PTI8_5 = "pti8_5"
    LOC15_9 = "loc15_9"
    SHUTTLE_FLIGHT = "shuttleFlight"
    PTI8_6 = "pti8_6"
    LOC15_5 = "loc15_5"
    INTERCONTINENTAL_CHARTER_FLIGHT = "intercontinentalCharterFlight"
    PTI8_7 = "pti8_7"
    LOC15_6 = "loc15_6"
    INTERNATIONAL_CHARTER_FLIGHT = "internationalCharterFlight"
    PTI8_8 = "pti8_8"
    ROUND_TRIP_CHARTER_FLIGHT = "roundTripCharterFlight"
    PTI8_9 = "pti8_9"
    LOC15_8 = "loc15_8"
    SIGHTSEEING_FLIGHT = "sightseeingFlight"
    PTI8_10 = "pti8_10"
    LOC15_10 = "loc15_10"
    HELICOPTER_SERVICE = "helicopterService"
    PTI8_11 = "pti8_11"
    LOC15_7 = "loc15_7"
    DOMESTIC_CHARTER_FLIGHT = "domesticCharterFlight"
    PTI8_12 = "pti8_12"
    SCHENGEN_AREA_FLIGHT = "SchengenAreaFlight"
    PTI8_13 = "pti8_13"
    AIRSHIP_SERVICE = "airshipService"
    PTI8_14 = "pti8_14"
    ALL_AIR_SERVICES = "allAirServices"
    LOC14_3 = "loc14_3"
    SHORT_HAUL_INTERNATIONAL_FLIGHT = "shortHaulInternationalFlight"
    PTI8_255 = "pti8_255"
    LOC15_255 = "loc15_255"
    UNDEFINED_AIRCRAFT_SERVICE = "undefinedAircraftService"


class AlertCauseEnumeration(Enum):
    UNKNOWN = "unknown"
    SECURITY_ALERT = "securityAlert"
    EMERGENCY_SERVICES_CALL = "emergencyServicesCall"
    POLICE_ACTIVITY = "policeActivity"
    POLICE_ORDER = "policeOrder"
    FIRE = "fire"
    CABLE_FIRE = "cableFire"
    SMOKE_DETECTED_ON_VEHICLE = "smokeDetectedOnVehicle"
    FIRE_AT_STATION = "fireAtStation"
    FIRE_RUN = "fireRun"
    FIRE_BRIGADE_ORDER = "fireBrigadeOrder"
    EXPLOSION = "explosion"
    EXPLOSION_HAZARD = "explosionHazard"
    BOMB_DISPOSAL = "bombDisposal"
    EMERGENCY_MEDICAL_SERVICES = "emergencyMedicalServices"
    EMERGENCY_BRAKE = "emergencyBrake"
    VANDALISM = "vandalism"
    CABLE_THEFT = "cableTheft"
    SIGNAL_PASSED_AT_DANGER = "signalPassedAtDanger"
    STATION_OVERRUN = "stationOverrun"
    PASSENGERS_BLOCKING_DOORS = "passengersBlockingDoors"
    DEFECTIVE_SECURITY_SYSTEM = "defectiveSecuritySystem"
    OVERCROWDED = "overcrowded"
    BORDER_CONTROL = "borderControl"
    UNATTENDED_BAG = "unattendedBag"
    TELEPHONED_THREAT = "telephonedThreat"
    SUSPECT_VEHICLE = "suspectVehicle"
    EVACUATION = "evacuation"
    TERRORIST_INCIDENT = "terroristIncident"
    PUBLIC_DISTURBANCE = "publicDisturbance"
    TECHNICAL_PROBLEM = "technicalProblem"
    VEHICLE_FAILURE = "vehicleFailure"
    SERVICE_DISRUPTION = "serviceDisruption"
    DOOR_FAILURE = "doorFailure"
    LIGHTING_FAILURE = "lightingFailure"
    POINTS_PROBLEM = "pointsProblem"
    POINTS_FAILURE = "pointsFailure"
    SIGNAL_PROBLEM = "signalProblem"
    SIGNAL_FAILURE = "signalFailure"
    OVERHEAD_WIRE_FAILURE = "overheadWireFailure"
    LEVEL_CROSSING_FAILURE = "levelCrossingFailure"
    TRAFFIC_MANAGEMENT_SYSTEM_FAILURE = "trafficManagementSystemFailure"
    ENGINE_FAILURE = "engineFailure"
    BREAK_DOWN = "breakDown"
    REPAIR_WORK = "repairWork"
    CONSTRUCTION_WORK = "constructionWork"
    MAINTENANCE_WORK = "maintenanceWork"
    POWER_PROBLEM = "powerProblem"
    TRACK_CIRCUIT_PROBLEM = "trackCircuitProblem"
    SWING_BRIDGE_FAILURE = "swingBridgeFailure"
    ESCALATOR_FAILURE = "escalatorFailure"
    LIFT_FAILURE = "liftFailure"
    GANGWAY_PROBLEM = "gangwayProblem"
    DEFECTIVE_VEHICLE = "defectiveVehicle"
    BROKEN_RAIL = "brokenRail"
    POOR_RAIL_CONDITIONS = "poorRailConditions"
    DEICING_WORK = "deicingWork"
    WHEEL_PROBLEM = "wheelProblem"
    ROUTE_BLOCKAGE = "routeBlockage"
    CONGESTION = "congestion"
    HEAVY_TRAFFIC = "heavyTraffic"
    ROUTE_DIVERSION = "routeDiversion"
    ROADWORKS = "roadworks"
    UNSCHEDULED_CONSTRUCTION_WORK = "unscheduledConstructionWork"
    LEVEL_CROSSING_INCIDENT = "levelCrossingIncident"
    SEWERAGE_MAINTENANCE = "sewerageMaintenance"
    ROAD_CLOSED = "roadClosed"
    ROADWAY_DAMAGE = "roadwayDamage"
    BRIDGE_DAMAGE = "bridgeDamage"
    PERSON_ON_THE_LINE = "personOnTheLine"
    OBJECT_ON_THE_LINE = "objectOnTheLine"
    VEHICLE_ON_THE_LINE = "vehicleOnTheLine"
    ANIMAL_ON_THE_LINE = "animalOnTheLine"
    FALLEN_TREE_ON_THE_LINE = "fallenTreeOnTheLine"
    VEGETATION = "vegetation"
    SPEED_RESTRICTIONS = "speedRestrictions"
    PRECEDING_VEHICLE = "precedingVehicle"
    ACCIDENT = "accident"
    NEAR_MISS = "nearMiss"
    PERSON_HIT_BY_VEHICLE = "personHitByVehicle"
    VEHICLE_STRUCK_OBJECT = "vehicleStruckObject"
    VEHICLE_STRUCK_ANIMAL = "vehicleStruckAnimal"
    DERAILMENT = "derailment"
    COLLISION = "collision"
    LEVEL_CROSSING_ACCIDENT = "levelCrossingAccident"
    POOR_WEATHER = "poorWeather"
    FOG = "fog"
    HEAVY_SNOW_FALL = "heavySnowFall"
    HEAVY_RAIN = "heavyRain"
    STRONG_WINDS = "strongWinds"
    ICE = "ice"
    HAIL = "hail"
    HIGH_TEMPERATURES = "highTemperatures"
    FLOODING = "flooding"
    LOW_WATER_LEVEL = "lowWaterLevel"
    RISK_OF_FLOODING = "riskOfFlooding"
    HIGH_WATER_LEVEL = "highWaterLevel"
    FALLEN_LEAVES = "fallenLeaves"
    FALLEN_TREE = "fallenTree"
    LANDSLIDE = "landslide"
    RISK_OF_LANDSLIDE = "riskOfLandslide"
    DRIFTING_SNOW = "driftingSnow"
    BLIZZARD_CONDITIONS = "blizzardConditions"
    STORM_DAMAGE = "stormDamage"
    LIGHTNING_STRIKE = "lightningStrike"
    ROUGH_SEA = "roughSea"
    HIGH_TIDE = "highTide"
    LOW_TIDE = "lowTide"
    ICE_DRIFT = "iceDrift"
    AVALANCHES = "avalanches"
    RISK_OF_AVALANCHES = "riskOfAvalanches"
    FLASH_FLOODS = "flashFloods"
    MUDSLIDE = "mudslide"
    ROCKFALLS = "rockfalls"
    SUBSIDENCE = "subsidence"
    EARTHQUAKE_DAMAGE = "earthquakeDamage"
    GRASS_FIRE = "grassFire"
    WILDLAND_FIRE = "wildlandFire"
    ICE_ON_RAILWAY = "iceOnRailway"
    ICE_ON_CARRIAGES = "iceOnCarriages"
    SPECIAL_EVENT = "specialEvent"
    PROCESSION = "procession"
    DEMONSTRATION = "demonstration"
    INDUSTRIAL_ACTION = "industrialAction"
    STAFF_SICKNESS = "staffSickness"
    STAFF_ABSENCE = "staffAbsence"
    OPERATOR_CEASED_TRADING = "operatorCeasedTrading"
    PREVIOUS_DISTURBANCES = "previousDisturbances"
    VEHICLE_BLOCKING_TRACK = "vehicleBlockingTrack"
    FOREIGN_DISTURBANCES = "foreignDisturbances"
    AWAITING_SHUTTLE = "awaitingShuttle"
    CHANGE_IN_CARRIAGES = "changeInCarriages"
    TRAIN_COUPLING = "trainCoupling"
    BOARDING_DELAY = "boardingDelay"
    AWAITING_APPROACH = "awaitingApproach"
    OVERTAKING = "overtaking"
    PROVISION_DELAY = "provisionDelay"
    MISCELLANEOUS = "miscellaneous"
    UNDEFINED_ALERT_CAUSE = "undefinedAlertCause"
    INCIDENT = "incident"
    SAFETY_VIOLATION = "safetyViolation"
    TRAIN_DOOR = "trainDoor"
    ALTERCATION = "altercation"
    ILL_VEHICLE_OCCUPANTS = "illVehicleOccupants"
    SERVICE_FAILURE = "serviceFailure"
    BOMB_EXPLOSION = "bombExplosion"
    FIRE_BRIGADE_SAFETY_CHECKS = "fireBrigadeSafetyChecks"
    CIVIL_EMERGENCY = "civilEmergency"
    AIR_RAID = "airRaid"
    SABOTAGE = "sabotage"
    BOMB_ALERT = "bombAlert"
    ATTACK = "attack"
    GUNFIRE_ON_ROADWAY = "gunfireOnRoadway"
    SECURITY_INCIDENT = "securityIncident"
    LINESIDE_FIRE = "linesideFire"
    PASSENGER_ACTION = "passengerAction"
    STAFF_ASSAULT = "staffAssault"
    RAILWAY_CRIME = "railwayCrime"
    ASSAULT = "assault"
    THEFT = "theft"
    FATALITY = "fatality"
    PERSON_UNDER_TRAIN = "personUnderTrain"
    PERSON_HIT_BY_TRAIN = "personHitByTrain"
    PERSON_ILL_ON_VEHICLE = "personIllOnVehicle"
    EMERGENCY_SERVICES = "emergencyServices"
    INSUFFICIENT_DEMAND = "insufficientDemand"
    LEADER_BOARD_FAILURE = "leaderBoardFailure"
    SERVICE_INDICATOR_FAILURE = "serviceIndicatorFailure"
    OPERATOR_SUSPENDED = "operatorSuspended"
    PROBLEMS_AT_BORDER_POST = "problemsAtBorderPost"
    PROBLEMS_AT_CUSTOMS_POST = "problemsAtCustomsPost"
    TRAIN_STRUCK_ANIMAL = "trainStruckAnimal"
    TRAIN_STRUCK_OBJECT = "trainStruckObject"
    ROAD_MAINTENANCE = "roadMaintenance"
    ASPHALTING = "asphalting"
    PAVING = "paving"
    MARCH = "march"
    FILTER_BLOCKADE = "filterBlockade"
    SIGHTSEERS_OBSTRUCTING_ACCESS = "sightseersObstructingAccess"
    HOLIDAY = "holiday"
    BRIDGE_STRIKE = "bridgeStrike"
    VIADUCT_FAILURE = "viaductFailure"
    OVERHEAD_OBSTRUCTION = "overheadObstruction"
    UNDEFINED_PROBLEM = "undefinedProblem"
    LOGISTIC_PROBLEMS = "logisticProblems"
    PROBLEMS_ON_LOCAL_ROAD = "problemsOnLocalRoad"
    STAFF_INJURY = "staffInjury"
    CONTRACTOR_STAFF_INJURY = "contractorStaffInjury"
    STAFF_IN_WRONG_PLACE = "staffInWrongPlace"
    STAFF_SHORTAGE = "staffShortage"
    UNOFFICIAL_INDUSTRIAL_ACTION = "unofficialIndustrialAction"
    WORK_TO_RULE = "workToRule"
    UNDEFINED_PERSONNEL_PROBLEM = "undefinedPersonnelProblem"
    TRAIN_WARNING_SYSTEM_PROBLEM = "trainWarningSystemProblem"
    SIGNAL_AND_SWITCH_FAILURE = "signalAndSwitchFailure"
    TRACTION_FAILURE = "tractionFailure"
    DEFECTIVE_TRAIN = "defectiveTrain"
    WHEEL_IMPACT_LOAD = "wheelImpactLoad"
    LACK_OF_OPERATIONAL_STOCK = "lackOfOperationalStock"
    DEFECTIVE_FIRE_ALARM_EQUIPMENT = "defectiveFireAlarmEquipment"
    DEFECTIVE_PLATFORM_EDGE_DOORS = "defectivePlatformEdgeDoors"
    DEFECTIVE_CCTV = "defectiveCctv"
    DEFECTIVE_PUBLIC_ANNOUNCEMENT_SYSTEM = "defectivePublicAnnouncementSystem"
    TICKETING_SYSTEM_NOT_AVAILABLE = "ticketingSystemNotAvailable"
    EMERGENCY_ENGINEERING_WORK = "emergencyEngineeringWork"
    LATE_FINISH_TO_ENGINEERING_WORK = "lateFinishToEngineeringWork"
    FUEL_PROBLEM = "fuelProblem"
    CLOSED_FOR_MAINTENANCE = "closedForMaintenance"
    FUEL_SHORTAGE = "fuelShortage"
    SLIPPERY_TRACK = "slipperyTrack"
    LUGGAGE_CAROUSEL_PROBLEM = "luggageCarouselProblem"
    UNDEFINED_EQUIPMENT_PROBLEM = "undefinedEquipmentProblem"
    STORM_CONDITIONS = "stormConditions"
    TIDAL_RESTRICTIONS = "tidalRestrictions"
    SLIPPERINESS = "slipperiness"
    GLAZED_FROST = "glazedFrost"
    FROZEN = "frozen"
    SLEET = "sleet"
    WATERLOGGED = "waterlogged"
    SEWER_OVERFLOW = "sewerOverflow"
    UNDEFINED_ENVIRONMENTAL_PROBLEM = "undefinedEnvironmentalProblem"
    FIRE_AT_THE_STATION = "fireAtTheStation"
    BREAKDOWN_1 = "breakdown"
    LEVEL_CROSSING_BLOCKED = "levelCrossingBlocked"
    HEAVY_SNOWFALL_1 = "heavySnowfall"
    WAITING_FOR_TRANSFER_PASSENGERS = "waitingForTransferPassengers"
    AWAITING_ONCOMING_VEHICLE = "awaitingOncomingVehicle"


class AllModesEnumeration(Enum):
    WALK = "walk"
    CAR = "car"
    TAXI = "taxi"
    CYCLE = "cycle"
    DRT = "drt"
    MOVING_WALKWAY = "movingWalkway"
    THROUGH = "through"


@dataclass
class AllowAll:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[bool] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class ArrivalBoardingActivityEnumeration(Enum):
    ALIGHTING = "alighting"
    NO_ALIGHTING = "noAlighting"
    PASS_THRU = "passThru"


@dataclass
class ArrivalOperatorRefs:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class AssistanceFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    POLICE = "police"
    FIRST_AID = "firstAid"
    SOS_POINT = "sosPoint"
    SPECIFIC_ASSISTANCE = "specificAssistance"
    UNACCOMPANIED_MINOR_ASSISTANCE = "unaccompaniedMinorAssistance"
    BOARDING_ASSISTANCE = "boardingAssistance"


class AudienceEnumeration(Enum):
    PUBLIC = "public"
    EMERGENCY_SERVICES = "emergencyServices"
    STAFF = "staff"
    STATION_STAFF = "stationStaff"
    MANAGEMENT = "management"
    AUTHORITIES = "authorities"
    INFO_SERVICES = "infoServices"
    TRANSPORT_OPERATORS = "transportOperators"


@dataclass
class BlockingStructure:
    journey_planner: Optional[bool] = field(
        default=None,
        metadata={
            "name": "JourneyPlanner",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    real_time: Optional[bool] = field(
        default=None,
        metadata={
            "name": "RealTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


class BoardingActivityEnumeration(Enum):
    BOARDING_AND_ALIGHTING = "boardingAndAlighting"
    NO_BOARDING = "noBoarding"
    NO_ALIGHTING = "noAlighting"
    PASS_THRU = "passThru"


class BookingStatusEnumeration(Enum):
    UNKNOWN = "unknown"
    AVAILABLE = "available"
    LIMITED = "limited"
    VERY_LIMITED = "veryLimited"
    FULL = "full"
    WAITING_LIST = "waitingList"
    NO_BOOKING_REQUIRED = "noBookingRequired"
    BOOKING_REQUIRED = "bookingRequired"
    BOOKING_OPTIONAL = "bookingOptional"
    UNDEFINED_BOOKING_INFORMATION = "undefinedBookingInformation"


class BusSubmodesOfTransportEnumeration(Enum):
    PTI5_0 = "pti5_0"
    LOC10_0 = "loc10_0"
    UNKNOWN = "unknown"
    PTI5_1 = "pti5_1"
    LOC10_6 = "loc10_6"
    REGIONAL_BUS = "regionalBus"
    PTI5_2 = "pti5_2"
    LOC10_1 = "loc10_1"
    EXPRESS_BUS = "expressBus"
    PTI5_3 = "pti5_3"
    BUS = "bus"
    PTI5_4 = "pti5_4"
    LOC10_5 = "loc10_5"
    LOCAL_BUS_SERVICE = "localBusService"
    PTI5_5 = "pti5_5"
    LOC10_2 = "loc10_2"
    NIGHT_BUS = "nightBus"
    PTI5_6 = "pti5_6"
    LOC10_4 = "loc10_4"
    POST_BUS = "postBus"
    PTI5_7 = "pti5_7"
    LOC10_8 = "loc10_8"
    SPECIAL_NEEDS_BUS = "specialNeedsBus"
    PTI5_8 = "pti5_8"
    MOBILITY_BUS = "mobilityBus"
    PTI5_9 = "pti5_9"
    MOBILITY_BUS_FOR_REGISTERED_DISABLED = "mobilityBusForRegisteredDisabled"
    PTI5_10 = "pti5_10"
    LOC10_9 = "loc10_9"
    SIGHTSEEING_BUS = "sightseeingBus"
    PTI5_11 = "pti5_11"
    SHUTTLE_BUS = "shuttleBus"
    PTI5_12 = "pti5_12"
    LOC10_7 = "loc10_7"
    SCHOOL_BUS = "schoolBus"
    PTI5_13 = "pti5_13"
    LOC10_13 = "loc10_13"
    SCHOOL_AND_PUBLIC_SERVICE_BUS = "schoolAndPublicServiceBus"
    PTI5_14 = "pti5_14"
    RAIL_REPLACEMENT_BUS = "railReplacementBus"
    PTI5_15 = "pti5_15"
    DEMAND_AND_RESPONSE_BUS = "demandAndResponseBus"
    PTI5_16 = "pti5_16"
    ALL_BUS_SERVICES = "allBusServices"
    LOC_10 = "loc_10"
    AIRPORT_LINK_BUS = "airportLinkBus"
    PTI5_255 = "pti5_255"
    LOC10_255 = "loc10_255"
    UNDEFINED = "undefined"


class CallStatusEnumeration(Enum):
    ON_TIME = "onTime"
    EARLY = "early"
    DELAYED = "delayed"
    CANCELLED = "cancelled"
    ARRIVED = "arrived"
    DEPARTED = "departed"
    MISSED = "missed"
    NO_REPORT = "noReport"
    NOT_EXPECTED = "notExpected"


@dataclass
class CapabilityAccessControlStructure:
    request_checking: bool = field(
        default=False,
        metadata={
            "name": "RequestChecking",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class CapabilityGeneralInteractionStructure:
    interaction: Optional["CapabilityGeneralInteractionStructure.Interaction"] = field(
        default=None,
        metadata={
            "name": "Interaction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    delivery: Optional["CapabilityGeneralInteractionStructure.Delivery"] = field(
        default=None,
        metadata={
            "name": "Delivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    multipart_despatch: bool = field(
        default=True,
        metadata={
            "name": "MultipartDespatch",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    multiple_subscriber_filter: bool = field(
        default=False,
        metadata={
            "name": "MultipleSubscriberFilter",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    has_confirm_delivery: bool = field(
        default=False,
        metadata={
            "name": "HasConfirmDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    has_heartbeat: bool = field(
        default=False,
        metadata={
            "name": "HasHeartbeat",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    visit_numberis_order: Optional[bool] = field(
        default=None,
        metadata={
            "name": "VisitNumberisOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Interaction:
        request_response: bool = field(
            default=True,
            metadata={
                "name": "RequestResponse",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        publish_subscribe: bool = field(
            default=True,
            metadata={
                "name": "PublishSubscribe",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class Delivery:
        direct_delivery: Optional[bool] = field(
            default=None,
            metadata={
                "name": "DirectDelivery",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        fetched_delivery: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FetchedDelivery",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )


@dataclass
class CapabilitySubscriptionPolicyStructure:
    has_incremental_updates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HasIncrementalUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    has_change_sensitivity: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HasChangeSensitivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class CasualtiesStructure:
    number_of_deaths: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfDeaths",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    number_of_injured: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfInjured",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class CheckConnectionLinkRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class CheckLineRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class CheckMonitoringRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class CheckOperatorRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class ClosedTimestampRangeStructure:
    start_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    end_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "EndTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


class CoachSubmodesOfTransportEnumeration(Enum):
    PTI3_0 = "pti3_0"
    UNKNOWN = "unknown"
    PTI3_1 = "pti3_1"
    INTERNATIONAL_COACH_SERVICE = "internationalCoachService"
    PTI3_2 = "pti3_2"
    NATIONAL_COACH_SERVICE = "nationalCoachService"
    PTI3_3 = "pti3_3"
    SHUTTLE_COACH_SERVICE = "shuttleCoachService"
    PTI3_4 = "pti3_4"
    REGIONAL_COACH_SERVICE = "regionalCoachService"
    PTI3_5 = "pti3_5"
    SPECIAL_COACH_SERVICE = "specialCoachService"
    PTI3_6 = "pti3_6"
    SIGHTSEEING_COACH_SERVICE = "sightseeingCoachService"
    PTI3_7 = "pti3_7"
    TOURIST_COACH_SERVICE = "touristCoachService"
    PTI3_8 = "pti3_8"
    COMMUTER_COACH_SERVICE = "commuterCoachService"
    PTI3_9 = "pti3_9"
    ALL_COACH_SERVICES = "allCoachServices"
    PTI3_255 = "pti3_255"
    UNDEFINED = "undefined"


class CommunicationsTransportMethodEnumeration(Enum):
    HTTP_POST = "httpPost"
    OTHER = "other"
    WSDL_SOAP = "wsdlSoap"
    WSDL_SOAP_DOCUMENT_LITERAL = "wsdlSoapDocumentLiteral"
    HTTP_URL_JSON = "httpUrlJSON"
    HTTP_URL_PROTO_BUFFERS = "httpUrlProtoBuffers"


@dataclass
class CompoundTrainRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class CompressionMethodEnumeration(Enum):
    GZIP = "gzip"
    NONE_VALUE = "none"
    OTHER = "other"


@dataclass
class ConnectingJourneyFilterStructure:
    dated_vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DatedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "VisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timetabled_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "TimetabledArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class ConnectingTimeFilterStructure:
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    earliest_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "EarliestArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    latest_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "LatestArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


class ConnectionDirectionEnumeration(Enum):
    TO = "to"
    FROM_VALUE = "from"
    BOTH = "both"


@dataclass
class ConnectionLinkRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class ConnectionLinksDetailEnumeration(Enum):
    MINIMUM = "minimum"
    NORMAL = "normal"
    FULL = "full"


class ConnectionMonitoringDetailEnumeration(Enum):
    MINIMUM = "minimum"
    BASIC = "basic"
    NORMAL = "normal"
    FULL = "full"


class ContinuousModesEnumeration(Enum):
    WALK = "walk"
    CAR = "car"
    TAXI = "taxi"
    CYCLE = "cycle"
    DRT = "drt"
    MOVING_WALKWAY = "movingWalkway"
    THROUGH = "through"


class CountedFeatureUnitEnumeration(Enum):
    BAYS = "bays"
    SEATS = "seats"
    OTHER_SPACES = "otherSpaces"
    DEVICES = "devices"
    VEHICLES = "vehicles"
    PERSONS = "persons"
    LITRES = "litres"
    SQUARE_METERS = "squareMeters"
    CUBIC_METERS = "cubicMeters"
    METERS = "meters"
    K_WH = "kWh"
    M_AH = "mAh"
    K_W = "kW"
    KG = "kg"
    A = "A"
    C = "C"
    OTHER = "other"


class CountingTrendEnumeration(Enum):
    DECREASING = "decreasing"
    INCREASING = "increasing"
    STABLE = "stable"
    UNSTABLE = "unstable"
    INCREASING_QUICKLY = "increasingQuickly"
    INCREASING_SLOWLY = "increasingSlowly"
    DECREASING_QUICKLY = "decreasingQuickly"
    DECREASING_SLOWLY = "decreasingSlowly"
    UNKNOWN = "unknown"


class CountingTypeEnumeration(Enum):
    AVAILABILITY_COUNT = "availabilityCount"
    RESERVED_COUNT = "reservedCount"
    IN_USE_COUNT = "inUseCount"
    OUT_OF_ORDER_COUNT = "outOfOrderCount"
    PRESENT_COUNT = "presentCount"
    CHARGING_LEVEL = "chargingLevel"
    AVAILABLE_RUNNING_DISTANCE = "availableRunningDistance"
    CURRENT_STATE_COUNT = "currentStateCount"


@dataclass
class DataNameSpacesStructure:
    stop_point_name_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointNameSpace",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_name_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineNameSpace",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_name_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProductCategoryNameSpace",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_feature_name_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "ServiceFeatureNameSpace",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_feature_name_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleFeatureNameSpace",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DataSupplyRequestBodyStructure:
    notification_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "NotificationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    all_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AllData",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DatedJourneyPartInfoStructure:
    journey_part_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPartRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_number_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainNumberRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    compound_train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CompoundTrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    from_stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FromStopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    to_stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ToStopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    start_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    end_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "EndTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DatedVehicleJourneyIndirectRefStructure:
    origin_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    destination_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class DatedVehicleJourneyRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class DayTypeEnumeration(Enum):
    UNKNOWN = "unknown"
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"
    SUNDAY = "sunday"
    WEEKDAYS = "weekdays"
    WEEKENDS = "weekends"
    HOLIDAY = "holiday"
    PUBLIC_HOLIDAY = "publicHoliday"
    RELIGIOUS_HOLIDAY = "religiousHoliday"
    FEDERAL_HOLIDAY = "federalHoliday"
    REGIONAL_HOLIDAY = "regionalHoliday"
    NATIONAL_HOLIDAY = "nationalHoliday"
    MONDAY_TO_FRIDAY = "mondayToFriday"
    MONDAY_TO_SATURDAY = "mondayToSaturday"
    SUNDAYS_AND_PUBLIC_HOLIDAYS = "sundaysAndPublicHolidays"
    SCHOOL_DAYS = "schoolDays"
    EVERY_DAY = "everyDay"
    UNDEFINED_DAY_TYPE = "undefinedDayType"


class DaysOfWeekEnumerationx(Enum):
    UNKNOWN = "unknown"
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"
    SUNDAY = "sunday"
    MONDAY_TO_FRIDAY = "mondayToFriday"
    MONDAY_TO_SATURDAY = "mondayToSaturday"
    WEEKDAYS = "weekdays"
    WEEKENDS = "weekends"


class DelayBandEnumeration(Enum):
    DELAY_TWO_MINUTES = "delayTwoMinutes"
    UP_TO_THREE_MINUTES = "upToThreeMinutes"
    UP_TO_FOUR_MINUTES = "upToFourMinutes"
    UP_TO_FIVE_MINUTES = "upToFiveMinutes"
    UP_TO_EIGHT_MINUTES = "upToEightMinutes"
    NEGLIGIBLE = "negligible"
    UP_TO_TEN_MINUTES = "upToTenMinutes"
    BETWEEN_TEN_MINUTES_AND_THIRTY_MINUTES = "betweenTenMinutesAndThirtyMinutes"
    BETWEEN_THIRTY_MINUTES_AND_ONE_HOUR = "betweenThirtyMinutesAndOneHour"
    BETWEEN_ONE_HOUR_AND_THREE_HOURS = "betweenOneHourAndThreeHours"
    BETWEEN_THREE_HOURS_AND_SIX_HOURS = "betweenThreeHoursAndSixHours"
    LONGER_THAN_SIX_HOURS = "longerThanSixHours"


class DeliveryMethodEnumeration(Enum):
    DIRECT = "direct"
    FETCHED = "fetched"


class DepartureBoardingActivityEnumeration(Enum):
    BOARDING = "boarding"
    NO_BOARDING = "noBoarding"
    PASS_THRU = "passThru"


@dataclass
class DepartureOperatorRefs:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class DestinationRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class DistributorDepartureStopRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class DistributorStopOrder:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class DistributorVisitNumber:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class EmptyType(Enum):
    VALUE = ""


class EndTimePrecisionEnumeration(Enum):
    DAY = "day"
    HOUR = "hour"
    SECOND = "second"
    MILLI_SECOND = "milliSecond"


class EndTimeStatusEnumeration(Enum):
    UNDEFINED = "undefined"
    LONG_TERM = "longTerm"
    SHORT_TERM = "shortTerm"


@dataclass
class EntranceToVehicleRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class EnvironmentReason:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class EnvironmentSubReason:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class EquipmentReason:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class EquipmentSubReason:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class ErrorCodeStructure:
    error_text: Optional[str] = field(
        default=None,
        metadata={
            "name": "ErrorText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    number: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )


class EstimatedTimetableDetailEnumeration(Enum):
    MINIMUM = "minimum"
    BASIC = "basic"
    NORMAL = "normal"
    CALLS = "calls"
    FULL = "full"


@dataclass
class ExpectedArrivalTime:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class ExpectedDepartureTime:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class ExpectedHeadwayInterval:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class ExpectedLatestPassengerAccessTime:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class ExtensionsStructure:
    any_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        }
    )


@dataclass
class ExtraCall:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=False,
    )


@dataclass
class ExtraInterchange:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=False,
    )


class FacilityCategoryEnumeration(Enum):
    UNKNOWN = "unknown"
    FIXED_EQUIPMENT = "fixedEquipment"
    MOBILE_EQUIPMENT = "mobileEquipment"
    SERVICE_PROVIDED_BY_INDIVIDUAL = "serviceProvidedByIndividual"
    SERVICE_FOR_PERSONAL_DEVICE = "serviceForPersonalDevice"
    RESERVED_AREA = "reservedArea"
    SITE = "site"
    SITE_COMPONENT = "siteComponent"
    PARKING_BAY = "parkingBay"
    VEHICLE = "vehicle"


class FacilityDetailEnumeration(Enum):
    MINIMUM = "minimum"
    NORMAL = "normal"
    FULL = "full"


@dataclass
class FacilityLocationStructure:
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    compound_train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CompoundTrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_component_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainComponentRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    entrance_to_vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "EntranceToVehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    dated_vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DatedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_place_component_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPlaceComponentId",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProductCategoryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ServiceFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VehicleFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class FacilityRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class FacilityStatusChangeEnumeration(Enum):
    UNKNOWN = "unknown"
    ADDED = "added"
    REMOVED = "removed"


class FacilityStatusEnumeration(Enum):
    UNKNOWN = "unknown"
    AVAILABLE = "available"
    NOT_AVAILABLE = "notAvailable"
    PARTIALLY_AVAILABLE = "partiallyAvailable"
    ADDED = "added"
    REMOVED = "removed"


class FareClassEnumeration(Enum):
    UNKNOWN = "unknown"
    FIRST_CLASS = "firstClass"
    SECOND_CLASS = "secondClass "
    THIRD_CLASS = "thirdClass"
    PREFERENTE = "preferente"
    PREMIUM_CLASS = "premiumClass"
    BUSINESS_CLASS = "businessClass"
    STANDARD_CLASS = "standardClass"
    TURISTA = "turista"
    ECONOMY_CLASS = "economyClass"
    ANY = "any"


class FareClassFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    PTI23_0 = "pti23_0"
    PTI23_6 = "pti23_6"
    FIRST_CLASS = "firstClass"
    PTI23_7 = "pti23_7"
    SECOND_CLASS = "secondClass"
    PTI23_8 = "pti23_8"
    THIRD_CLASS = "thirdClass"
    PTI23_9 = "pti23_9"
    ECONOMY_CLASS = "economyClass"
    PTI23_10 = "pti23_10"
    BUSINESS_CLASS = "businessClass"


@dataclass
class FeatureRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class FeederArrivalStopRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class FeederStopOrder:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class FeederVisitNumber:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class FilterByConnectionLinkRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class FilterByDestination:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=False,
    )


@dataclass
class FilterByDirectionRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class FilterByFacilityRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class FilterByInterchangeRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=False,
    )


@dataclass
class FilterByLineRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class FilterByMonitoringRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        init=False,
        default=True,
    )


@dataclass
class FilterByOperatorRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class FilterByProductCategoryRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class FilterByStopPointRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class FilterByValidityPeriod:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class FilterByVehicleJourneyRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=False,
    )


@dataclass
class FilterByVehicleMode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class FilterByVehicleRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=False,
    )


class FirstOrLastJourneyEnumeration(Enum):
    FIRST_SERVICE_OF_DAY = "firstServiceOfDay"
    OTHER_SERVICE = "otherService"
    LAST_SERVICE_OF_DAY = "lastServiceOfDay"
    UNSPECIFIED = "unspecified"


class FormationChangeEnumeration(Enum):
    CHANGED_FORMATION = "changedFormation"
    REVERSED_FORMATION = "reversedFormation"
    MISSING_VEHICLES = "missingVehicles"
    EXTRA_VEHICLES = "extraVehicles"
    MISSING_TRAIN_IN_COMPOUND_TRAIN = "missingTrainInCompoundTrain"
    EXTRA_TRAIN_IN_COMPOUND_TRAIN = "extraTrainInCompoundTrain"
    MISSING_FAMILY_COACH = "missingFamilyCoach"
    MISSING_THROUGH_COACH = "missingThroughCoach"
    MISSING_LOW_FLOOR_COACH = "missingLowFloorCoach"
    MISSING_RESTAURANT_COACH = "missingRestaurantCoach"
    MISSING_WHEELCHAIR_SPACES = "missingWheelchairSpaces"


@dataclass
class FramedVehicleJourneyRefStructure:
    data_frame_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DataFrameRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    dated_vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DatedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


class FunicularSubmodesOfTransportEnumeration(Enum):
    PTI10_0 = "pti10_0"
    UNKNOWN = "unknown"
    PTI10_1 = "pti10_1"
    LOC14_2 = "loc14_2"
    FUNICULAR = "funicular"
    PTI10_2 = "pti10_2"
    ALL_FUNICULAR_SERVICES = "allFunicularServices"
    PTI10_255 = "pti10_255"
    UNDEFINED_FUNICULAR = "undefinedFunicular"


@dataclass
class HalfOpenTimeRangeStructure2:
    class Meta:
        name = "HalfOpenTimeRangeStructure"

    start_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    end_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "EndTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


class HireFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    CAR_HIRE = "carHire"
    MOTOR_CYCLE_HIRE = "motorCycleHire"
    CYCLE_HIRE = "cycleHire"
    TAXI = "taxi"
    RECREATION_DEVICE_HIRE = "recreationDeviceHire"


class HolidayTypeEnumerationx(Enum):
    HOLIDAY = "holiday"
    PUBLIC_HOLIDAY = "publicHoliday"
    RELIGIOUS_HOLIDAY = "religiousHoliday"
    FEDERAL_HOLIDAY = "federalHoliday"
    REGIONAL_HOLIDAY = "regionalHoliday"
    NATIONAL_HOLIDAY = "nationalHoliday"
    SUNDAYS_AND_PUBLIC_HOLIDAYS = "sundaysAndPublicHolidays"
    SCHOOL_DAYS = "schoolDays"
    EVERY_DAY = "everyDay"
    UNDEFINED_DAY_TYPE = "undefinedDayType"


class ImageContentEnumeration(Enum):
    MAP = "map"
    GRAPHIC = "graphic"
    LOGO = "logo"


@dataclass
class IncludeInterchanges:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class IncludeJourneyRelations:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class IncludeTrainFormations:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class IncludeTranslations:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=False,
    )


@dataclass
class InterchangeCode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class InterchangeManagementEnumeration(Enum):
    PLANNED = "Planned"
    ADVERTISED = "Advertised"
    CONTROLLED = "Controlled"
    GUARANTEED = "Guaranteed"


@dataclass
class InterchangeRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class InterchangeStatusEnumeration(Enum):
    UNKNOWN = "unknown"
    CONNECTION = "connection"
    REPLACEMENT = "replacement"
    ALTERNATIVE = "alternative"
    CONNECTION_NOT_HELD = "connectionNotHeld"
    CONNECTION_HELD = "connectionHeld"
    STATUS_OF_CONNECTION_UNDECIDED = "statusOfConnectionUndecided"
    UNDEFINED_CROSS_REFERENCE_INFORMATION = "undefinedCrossReferenceInformation"
    CONNECTION_CHANGED = "connectionChanged"
    DISTRIBUTOR_WAIT_PROLONGED = "distributorWaitProlonged"
    DEPARTURE_PLATFORM_CHANGED = "departurePlatformChanged"
    EXTRA_INTERCHANGE = "extraInterchange"
    CANCELLED = "cancelled"
    FEEDER_ARRIVAL_CANCELLATION = "feederArrivalCancellation"
    DISTRIBUTOR_DEPARTURE_CANCELLATION = "distributorDepartureCancellation"
    STATUS_OF_CONENCTION_UNDECIDED = "statusOfConenctionUndecided"


@dataclass
class JourneyPartInfoStructure:
    journey_part_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPartRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_number_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainNumberRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    compound_train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CompoundTrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    from_stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FromStopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    to_stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ToStopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    start_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    end_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "EndTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class JourneyPatternRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class JourneyRelationTypeEnumeration(Enum):
    CONTINUATION_OF_JOURNEY = "ContinuationOfJourney"
    CONTINUED_BY_JOURNEY = "ContinuedByJourney"
    SPLITS_INTO_JOURNEYS = "SplitsIntoJourneys"
    CONTINUATION_OF_SPLIT_JOURNEY = "ContinuationOfSplitJourney"
    JOINING_OF_JOURNEYS = "JoiningOfJourneys"
    CONTINUED_BY_JOINED_JOURNEY = "ContinuedByJoinedJourney"
    REPLACEMENT_OF_JOURNEY = "ReplacementOfJourney"
    REPLACED_BY_JOURNEY = "ReplacedByJourney"
    SUPPORT_OF_JOURNEY = "SupportOfJourney"
    SUPPORTED_BY_JOURNEY = "SupportedByJourney"


@dataclass
class KeyValueStructure:
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    type_of_key: Optional[str] = field(
        default=None,
        metadata={
            "name": "TypeOfKey",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class LineDirectionStructure:
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class LineRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class LinesDetailEnumeration(Enum):
    MINIMUM = "minimum"
    NORMAL = "normal"
    STOPS = "stops"
    FULL = "full"


class LinkContentEnumeration(Enum):
    TIMETABLE = "timetable"
    RELATED_SITE = "relatedSite"
    DETAILS = "details"
    ADVICE = "advice"
    OTHER = "other"


@dataclass
class LocationStructure:
    longitude: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Longitude",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_inclusive": Decimal("-180"),
            "max_inclusive": Decimal("180"),
        }
    )
    latitude: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Latitude",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_inclusive": Decimal("-90"),
            "max_inclusive": Decimal("90"),
        }
    )
    altitude: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Altitude",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_inclusive": Decimal("-1000"),
            "max_inclusive": Decimal("5000"),
        }
    )
    coordinates: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Coordinates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "tokens": True,
        }
    )
    precision: Optional[int] = field(
        default=None,
        metadata={
            "name": "Precision",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        }
    )


class LuggageFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    PTI23_17 = "pti23_17"
    BIKE_CARRIAGE = "bikeCarriage"
    BAGGAGE_STORAGE = "baggageStorage"
    LEFT_LUGGAGE = "leftLuggage"
    PORTERAGE = "porterage"
    BAGGAGE_TROLLEYS = "baggageTrolleys"


class MetroSubmodesOfTransportEnumeration(Enum):
    PTI4_0 = "pti4_0"
    UNKNOWN = "unknown"
    PTI4_1 = "pti4_1"
    METRO = "metro"
    PTI4_2 = "pti4_2"
    TUBE = "tube"
    PTI4_3 = "pti4_3"
    URBAN_RAILWAY = "urbanRailway"
    PTI4_4 = "pti4_4"
    ALL_RAIL_SERVICES = "allRailServices"
    PTI4_255 = "pti4_255"
    UNDEFINED = "undefined"


@dataclass
class MiscellaneousReason:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class MiscellaneousSubReason:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class MobilityFacilityEnumeration(Enum):
    PTI23_255_4 = "pti23_255_4"
    UNKNOWN = "unknown"
    PTI23_16 = "pti23_16"
    SUITABLE_FOR_WHEEL_CHAIRS = "suitableForWheelChairs"
    PTI23_16_1 = "pti23_16_1"
    LOW_FLOOR = "lowFloor"
    PTI23_16_2 = "pti23_16_2"
    BOARDING_ASSISTANCE = "boardingAssistance"
    PTI23_16_3 = "pti23_16_3"
    STEP_FREE_ACCESS = "stepFreeAccess"
    TACTILE_PATFORM_EDGES = "tactilePatformEdges"
    ONBOARD_ASSISTANCE = "onboardAssistance"
    UNACCOMPANIED_MINOR_ASSISTANCE = "unaccompaniedMinorAssistance"
    AUDIO_INFORMATION = "audioInformation"
    VISUAL_INFORMATION = "visualInformation"
    DISPLAYS_FOR_VISUALLY_IMPAIRED = "displaysForVisuallyImpaired"
    AUDIO_FOR_HEARING_IMPAIRED = "audioForHearingImpaired"


class MonitoringTypeEnumeration(Enum):
    UNKNOWN = "unknown"
    MANUAL = "manual"
    AUTOMATIC = "automatic"


class NatureEnumeration(Enum):
    PLANNED_ONLY = "plannedOnly"
    UNPLANNED_ONLY = "unplannedOnly"
    BOTH = "both"


class NuisanceFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    SMOKING = "smoking"
    NO_SMOKING = "noSmoking"
    MOBILE_PHONE_USE_ZONE = "mobilePhoneUseZone"
    MOBILE_PHONE_FREE_ZONE = "mobilePhoneFreeZone"


class OccupancyEnumeration(Enum):
    UNKNOWN = "unknown"
    EMPTY = "empty"
    MANY_SEATS_AVAILABLE = "manySeatsAvailable"
    FEW_SEATS_AVAILABLE = "fewSeatsAvailable"
    STANDING_ROOM_ONLY = "standingRoomOnly"
    CRUSHED_STANDING_ROOM_ONLY = "crushedStandingRoomOnly"
    FULL = "full"
    NOT_ACCEPTING_PASSENGERS = "notAcceptingPassengers"
    UNDEFINED = "undefined"
    SEATS_AVAILABLE = "seatsAvailable"
    STANDING_AVAILABLE = "standingAvailable"


@dataclass
class OffsetStructure:
    distance_from_start: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistanceFromStart",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distance_from_end: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistanceFromEnd",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class Order:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class OriginRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class ParkingFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    CAR_PARK = "carPark"
    PARK_AND_RIDE_PARK = "parkAndRidePark"
    MOTORCYCLE_PARK = "motorcyclePark"
    CYCLE_PARK = "cyclePark"
    RENTAL_CAR_PARK = "rentalCarPark"
    COACH_PARK = "coachPark"


@dataclass
class PassageBetweenTrainsStructure:
    train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    train_component_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainComponentRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    passage_is_possible: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PassageIsPossible",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


class PassengerCommsFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    FACCOMMS_1 = "faccomms_1"
    PASSENGER_WIFI = "passengerWifi"
    PTI23_21 = "pti23_21"
    TELEPHONE = "telephone"
    PTI23_14 = "pti23_14"
    AUDIO_SERVICES = "audioServices"
    PTI23_15 = "pti23_15"
    VIDEO_SERVICES = "videoServices"
    PTI23_25 = "pti23_25"
    BUSINESS_SERVICES = "businessServices"
    INTERNET = "internet"
    POSTOFFICE = "postoffice"
    LETTERBOX = "letterbox"


class PassengerInformationFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    NEXT_STOP_INDICATOR = "nextStopIndicator"
    STOP_ANNOUNCEMENTS = "stopAnnouncements"
    PASSENGER_INFORMATION_DISPLAY = "passengerInformationDisplay"
    AUDIO_INFORMATION = "audioInformation"
    VISUAL_INFORMATION = "visualInformation"
    TACTILE_PLATFORM_EDGES = "tactilePlatformEdges"
    TACTILE_INFORMATION = "tactileInformation"
    WALKING_GUIDANCE = "walkingGuidance"
    JOURNEY_PLANNING = "journeyPlanning"
    LOST_FOUND = "lostFound"
    INFORMATION_DESK = "informationDesk"
    INTERACTIVE_KIOSK_DISPLAY = "interactiveKiosk-Display"
    PRINTED_PUBLIC_NOTICE = "printedPublicNotice"


@dataclass
class PermissionsStructure:
    permission_version_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PermissionVersionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PersonnelReason:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class PersonnelSubReason:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class PerspectiveEnumeration(Enum):
    GENERAL = "general"
    STOP_POINT = "stopPoint"
    VEHICLE_JOURNEY = "vehicleJourney"


class PredictabilityEnumeration(Enum):
    PLANNED = "planned"
    UNPLANNED = "unplanned"
    ALL = "all"


@dataclass
class PredictionInaccurate:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=False,
    )


class PredictionInaccurateReasonEnumeration(Enum):
    VEHICLE_IN_TRAFFIC_JAM = "vehicleInTrafficJam"
    TECHNICAL_PROBLEM = "technicalProblem"
    DISPATCH_ACTION = "dispatchAction"
    MISSING_UPDATE = "missingUpdate"
    UNKNOWN = "unknown"


class PredictorsEnumeration(Enum):
    AVMS_ONLY = "avmsOnly"
    ANYONE = "anyone"


@dataclass
class ProgressBetweenStopsStructure:
    link_distance: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "LinkDistance",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


class ProgressRateEnumeration(Enum):
    NO_PROGRESS = "noProgress"
    SLOW_PROGRESS = "slowProgress"
    NORMAL_PROGRESS = "normalProgress"
    FAST_PROGRESS = "fastProgress"
    UNKNOWN = "unknown"


class QualityIndexEnumeration(Enum):
    CERTAIN = "certain"
    VERY_RELIABLE = "veryReliable"
    RELIABLE = "reliable"
    PROBABLY_RELIABLE = "probablyReliable"
    UNCONFIRMED = "unconfirmed"


class RailSubmodesOfTransportEnumeration(Enum):
    PTI2_0 = "pti2_0"
    LOC13_0 = "loc13_0"
    UNKNOWN = "unknown"
    PTI2_1 = "pti2_1"
    HIGH_SPEED_RAIL_SERVICE = "highSpeedRailService"
    PTI2_2 = "pti2_2"
    LOC13_3 = "loc13_3"
    LONG_DISTANCE_TRAIN = "longDistanceTrain"
    PTI2_3 = "pti2_3"
    LOC13_2 = "loc13_2"
    INTER_REGIONAL_RAIL_SERVICE = "interRegionalRailService"
    PTI2_4 = "pti2_4"
    CAR_TRANSPORT_RAIL_SERVICE = "carTransportRailService"
    PTI2_5 = "pti2_5"
    SLEEPER_RAIL_SERVICE = "sleeperRailService"
    PTI2_6 = "pti2_6"
    LOC13_4 = "loc13_4"
    REGIONAL_RAIL = "regionalRail"
    PTI2_7 = "pti2_7"
    LOC13_7 = "loc13_7"
    TOURIST_RAILWAY = "touristRailway"
    PTI2_8 = "pti2_8"
    RAIL_SHUTTLE = "railShuttle"
    PTI2_9 = "pti2_9"
    LOC13_5 = "loc13_5"
    SUBURBAN_RAILWAY = "suburbanRailway"
    PTI2_10 = "pti2_10"
    REPLACEMENT_RAIL_SERVICE = "replacementRailService"
    PTI2_11 = "pti2_11"
    SPECIAL_TRAIN_SERVICE = "specialTrainService"
    PTI2_12 = "pti2_12"
    LORRY_TRANSPORT_RAIL_SERVICE = "lorryTransportRailService"
    PTI2_13 = "pti2_13"
    ALL_RAIL_SERVICES = "allRailServices"
    PTI2_14 = "pti2_14"
    CROSS_COUNTRY_RAIL_SERVICE = "crossCountryRailService"
    PTI2_15 = "pti2_15"
    VEHICLE_RAIL_TRANSPORT_SERVICE = "vehicleRailTransportService"
    PTI2_16 = "pti2_16"
    LOC13_8 = "loc13_8"
    RACK_AND_PINION_RAILWAY = "rackAndPinionRailway"
    PTI2_17 = "pti2_17"
    ADDITIONAL_TRAIN_SERVICE = "additionalTrainService"
    PTI2_255 = "pti2_255"
    UNDEFINED = "undefined"
    LOC13_6 = "loc13_6"
    LOCAL = "local"
    LOC13_1 = "loc13_1"
    INTERNATIONAL = "international"
    INTERBATIONAL = "interbational"


class RefreshmentFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    PTI23_1 = "pti23_1"
    RESTAURANT_SERVICE = "restaurantService"
    PTI23_2 = "pti23_2"
    SNACKS_SERVICE = "snacksService"
    PTI23 = "pti23"
    TROLLEY = "trolley"
    PTI23_18 = "pti23_18"
    BAR = "bar"
    PTI23_19 = "pti23_19"
    FOOD_NOT_AVAILABLE = "foodNotAvailable"
    PTI23_20 = "pti23_20"
    BEVERAGES_NOT_AVAILABLE = "beveragesNotAvailable"
    PTI23_26 = "pti23_26"
    BISTRO = "bistro"
    FOOD_VENDING_MACHINE = "foodVendingMachine"
    BEVERAGE_VENDING_MACHINE = "beverageVendingMachine"


class RelatedToEnumeration(Enum):
    CAUSE = "cause"
    EFFECT = "effect"
    CORRECTION_TO = "correctionTo"
    UPDATE = "update"
    SUPERCEDES = "supercedes"
    SUPERCEDED_BY = "supercededBy"
    ASSOCIATED = "associated"


class RemedyTypeEnumeration(Enum):
    UNKNOWN = "unknown"
    REPLACE = "replace"
    REPAIR = "repair"
    REMOVE = "remove"
    OTHER_ROUTE = "otherRoute"
    OTHER_LOCATION = "otherLocation"


class ReportTypeEnumeration(Enum):
    UNKNOWN = "unknown"
    INCIDENT = "incident"
    GENERAL = "general"
    OPERATOR = "operator"
    NETWORK = "network"
    STATION_TERMINAL = "stationTerminal"
    STOP_POINT = "stopPoint"
    CONNECTION_LINK = "connectionLink"
    POINT = "point"
    ROUTE = "route"
    INDIVIDUAL_SERVICE = "individualService"
    UNDEFINED = "undefined"


@dataclass
class RequestTimestamp:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class RequestorRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class ReservedSpaceFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    LOUNGE = "lounge"
    HALL = "hall"
    MEETINGPOINT = "meetingpoint"
    GROUP_POINT = "groupPoint"
    RECEPTION = "reception"
    SHELTER = "shelter"
    SEATS = "seats"


@dataclass
class ResponseStructure:
    response_timestamp: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ResponseTimestamp",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class ResponseTimestamp:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class RetailFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    FOOD = "food"
    NEWSPAPER_TOBACCO = "newspaperTobacco"
    RECREATION_TRAVEL = "recreationTravel"
    HYGIENE_HEALTH_BEAUTY = "hygieneHealthBeauty"
    FASHION_ACCESSORIES = "fashionAccessories"
    BANK_FINANCE_INSURANCE = "bankFinanceInsurance"
    CASH_MACHINE = "cashMachine"
    CURRENCY_EXCHANGE = "currencyExchange"
    TOURISM_SERVICE = "tourismService"
    PHOTO_BOOTH = "photoBooth"


class RoutePointTypeEnumeration(Enum):
    UNKNOWN = "unknown"
    ORIGIN = "origin"
    DESTINATION = "destination"
    INTERMEDIATE = "intermediate"
    LEG_BOARD = "legBoard"
    LEG_INTERMEDIATE = "legIntermediate"
    LEG_ALIGHT = "legAlight"
    FIRST_ROUTE_POINT = "firstRoutePoint"
    LAST_ROUTE_POINT = "lastRoutePoint"
    AFFECTED_STOPPLACE = "affectedStopplace"
    PRESENTED_STOPPLACE = "presentedStopplace"
    UNDEFINED_STOPPLACE_USAGE = "undefinedStopplaceUsage"
    START_POINT = "startPoint"
    STOP = "stop"
    VIA = "via"
    NOT_STOPPING = "notStopping"
    TEMPORARY_STOP = "temporaryStop"
    TEMPORARILY_NOT_STOPPING = "temporarilyNotStopping"
    EXCEPTIONAL_STOP = "exceptionalStop"
    ADDITIONAL_STOP = "additionalStop"
    REQUEST_STOP = "requestStop"
    FRONT_TRAIN_DESTINATION = "frontTrainDestination"
    REAR_TRAIN_DESTINATION = "rearTrainDestination"
    THROUGH_SERVICE_DESTINATION = "throughServiceDestination"
    NOT_VIA = "notVia"
    ALTERED_START_POINT = "alteredStartPoint"
    ALTERED_DESTINATION = "alteredDestination"
    UNDEFINED_ROUTE_POINT = "undefinedRoutePoint"


class SanitaryFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    PTI23_22 = "pti23_22"
    TOILET = "toilet"
    PTI23_23 = "pti23_23"
    NO_TOILET = "noToilet"
    SHOWER = "shower"
    WHEELCHAIR_ACCCESS_TOILET = "wheelchairAcccessToilet"
    BABY_CHANGE = "babyChange"


class ScopeTypeEnumeration(Enum):
    UNKNOWN = "unknown"
    STOP_PLACE = "stopPlace"
    LINE = "line"
    ROUTE = "route"
    PUBLIC_TRANSPORT_SERVICE = "publicTransportService"
    OPERATOR = "operator"
    CITY = "city"
    AREA = "area"
    STOP_POINT = "stopPoint"
    STOP_PLACE_COMPONENT = "stopPlaceComponent"
    PLACE = "place"
    NETWORK = "network"
    VEHICLE_JOURNEY = "vehicleJourney"
    DATED_VEHICLE_JOURNEY = "datedVehicleJourney"
    CONNECTION_LINK = "connectionLink"
    INTERCHANGE = "interchange"
    ALL_PT = "allPT"
    GENERAL = "general"
    ROAD = "road"
    UNDEFINED = "undefined"


class SelfDriveSubmodesOfTransportEnumeration(Enum):
    PTI12_0 = "pti12_0"
    UNKNOWN = "unknown"
    PTI12_1 = "pti12_1"
    HIRE_CAR = "hireCar"
    PTI12_2 = "pti12_2"
    HIRE_VAN = "hireVan"
    PTI12_3 = "pti12_3"
    HIRE_MOTORBIKE = "hireMotorbike"
    PTI12_4 = "pti12_4"
    HIRE_CYCLE = "hireCycle"
    PTI12_5 = "pti12_5"
    ALL_HIRE_VEHICLES = "allHireVehicles"
    PTI12_255 = "pti12_255"
    UNDEFINED_HIRE_VEHICLE = "undefinedHireVehicle"


class SensitivityEnumeration(Enum):
    VERY_HIGH = "veryHigh"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    VERY_LOW = "veryLow"


class ServiceConditionEnumeration(Enum):
    UNKNOWN = "unknown"
    DELAY = "delay"
    MINOR_DELAYS = "minorDelays"
    MAJOR_DELAYS = "majorDelays"
    OPERATION_TIME_EXTENSION = "operationTimeExtension"
    ON_TIME = "onTime"
    DISTURBANCE_RECTIFIED = "disturbanceRectified"
    CHANGE_OF_PLATFORM = "changeOfPlatform"
    LINE_CANCELLATION = "lineCancellation"
    TRIP_CANCELLATION = "tripCancellation"
    BOARDING = "boarding"
    GO_TO_GATE = "goToGate"
    STOP_CANCELLED = "stopCancelled"
    STOP_MOVED = "stopMoved"
    STOP_ON_DEMAND = "stopOnDemand"
    ADDITIONAL_STOP = "additionalStop"
    SUBSTITUTED_STOP = "substitutedStop"
    DIVERTED = "diverted"
    DISRUPTION = "disruption"
    LIMITED_OPERATION = "limitedOperation"
    DISCONTINUED_OPERATION = "discontinuedOperation"
    IRREGULAR_TRAFFIC = "irregularTraffic"
    WAGON_ORDER_CHANGED = "wagonOrderChanged"
    TRAIN_SHORTENED = "trainShortened"
    ADDITIONAL_RIDE = "additionalRide"
    REPLACEMENT_RIDE = "replacementRide"
    TEMPORARILY_NON_STOPPING = "temporarilyNonStopping"
    TEMPORARY_STOPPLACE = "temporaryStopplace"
    UNDEFINED_STATUS = "undefinedStatus"
    ALTERED = "altered"
    CANCELLED = "cancelled"
    DELAYED = "delayed"
    NO_SERVICE = "noService"
    DISRUPTED = "disrupted"
    ADDITIONAL_SERVICE = "additionalService"
    SPECIAL_SERVICE = "specialService"
    NORMAL_SERVICE = "normalService"
    INTERMITTENT_SERVICE = "intermittentService"
    SHORT_FORMED_SERVICE = "shortFormedService"
    FULL_LENGTH_SERVICE = "fullLengthService"
    EXTENDED_SERVICE = "extendedService"
    SPLITTING_TRAIN = "splittingTrain"
    REPLACEMENT_TRANSPORT = "replacementTransport"
    ARRIVES_EARLY = "arrivesEarly"
    SHUTTLE_SERVICE = "shuttleService"
    REPLACEMENT_SERVICE = "replacementService"
    UNDEFINED_SERVICE_INFORMATION = "undefinedServiceInformation"


class ServiceExceptionEnumeration(Enum):
    BEFORE_FIRST_JOURNEY = "beforeFirstJourney"
    AFTER_LAST_JOURNEY = "afterLastJourney"
    NO_SERVICE_TODAY = "noServiceToday"
    TRANSPORT_TEMPORARILY_SUSPENDED = "transportTemporarilySuspended"
    TRANSPORT_LONGTERM_SUSPENDED = "transportLongtermSuspended"
    TRANSPORT_SEVERLY_DISRUPTED = "transportSeverlyDisrupted"
    REALTIME_DATA_NOT_AVAILABLE = "realtimeDataNotAvailable"
    REALTIME_DATA_AVAILABLE = "realtimeDataAvailable"


@dataclass
class ServiceFeatureRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class SeverityEnumeration(Enum):
    UNKNOWN = "unknown"
    VERY_SLIGHT = "verySlight"
    SLIGHT = "slight"
    NORMAL = "normal"
    SEVERE = "severe"
    VERY_SEVERE = "verySevere"
    NO_IMPACT = "noImpact"
    UNDEFINED = "undefined"


@dataclass
class SimpleContactStructure:
    phone_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "PhoneNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    url: Optional[str] = field(
        default=None,
        metadata={
            "name": "Url",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class SiteRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class SituationNumber:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class SituationSimpleRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class SituationSourceTypeEnumeration(Enum):
    DIRECT_REPORT = "directReport"
    EMAIL = "email"
    PHONE = "phone"
    FAX = "fax"
    POST = "post"
    FEED = "feed"
    RADIO = "radio"
    TV = "tv"
    WEB = "web"
    PAGER = "pager"
    TEXT = "text"
    OTHER = "other"


@dataclass
class SrsName:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class Status:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


class StopMonitoringDetailEnumeration(Enum):
    MINIMUM = "minimum"
    BASIC = "basic"
    NORMAL = "normal"
    CALLS = "calls"
    FULL = "full"


class StopPlaceTypeEnumeration2(Enum):
    UNKNOWN = "unknown"
    RAILWAY_STATION = "railwayStation"
    UNDERGROUND_STATION = "undergroundStation"
    TRAM_STATION = "tramStation"
    BUS_STATION = "busStation"
    AIRPORT = "airport"
    PIER = "pier"
    HARBOUR_PORT = "harbourPort"
    FERRY_STOP = "ferryStop"
    LIGHT_RAILWAY_STATION = "lightRailwayStation"
    COGWHEEL_STATION = "cogwheelStation"
    FUNICULAR_STATION = "funicularStation"
    ROPEWAY_STATION = "ropewayStation"
    COACH_STATION = "coachStation"
    FERRY_PORT = "ferryPort"
    ON_STREET_BUS = "onStreetBus"
    ON_STREET_TRAM = "onStreetTram"
    SKI_LIFT = "skiLift"
    OTHER = "other"
    UNDEFINED_STOP_PLACE_TYPE = "undefinedStopPlaceType"
    RAIL_STATION = "railStation"
    METRO_STATION = "metroStation"


@dataclass
class StopPointRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class StopPointTypeEnumeration(Enum):
    UNKNOWN = "unknown"
    PLATFORM_NUMBER = "platformNumber"
    TERMINAL_GATE = "terminalGate"
    FERRY_BERTH = "ferryBerth"
    HARBOUR_PIER = "harbourPier"
    LANDING_STAGE = "landingStage"
    BUS_STOP = "busStop"
    UNDEFINED_STOP_POINT_TYPE = "undefinedStopPointType"
    UNDEFINED_BOOKING_INFORMATION = "undefinedBookingInformation"


class StopPointsDetailEnumeration(Enum):
    MINIMUM = "minimum"
    NORMAL = "normal"
    FULL = "full"


class StopVisitTypeEnumeration(Enum):
    ALL = "all"
    ARRIVALS = "arrivals"
    DEPARTURES = "departures"


@dataclass
class SubscriptionContextStructure:
    heartbeat_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "HeartbeatInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


class TaxiSubmodesOfTransportEnumeration(Enum):
    PTI11_0 = "pti11_0"
    UNKNOWN = "unknown"
    PTI11_1 = "pti11_1"
    COMMUNAL_TAXI = "communalTaxi"
    PTI11_2 = "pti11_2"
    WATER_TAXI = "waterTaxi"
    PTI11_3 = "pti11_3"
    RAIL_TAXI = "railTaxi"
    PTI11_4 = "pti11_4"
    BIKE_TAXI = "bikeTaxi"
    PTI11_5 = "pti11_5"
    BLACK_CAB = "blackCab"
    PTI11_6 = "pti11_6"
    MINI_CAB = "miniCab"
    PTI11_7 = "pti11_7"
    ALL_TAXI_SERVICES = "allTaxiServices"
    PTI11_255 = "pti11_255"
    UNDEFINED_TAXI_SERVICE = "undefinedTaxiService"


class TelecabinSubmodesOfTransportEnumeration(Enum):
    PTI9_0 = "pti9_0"
    LOC14_0 = "loc14_0"
    UNKNOWN = "unknown"
    PTI9_1 = "pti9_1"
    LOC14_1 = "loc14_1"
    TELECABIN = "telecabin"
    PTI9_2 = "pti9_2"
    LOC14_3 = "loc14_3"
    CABLE_CAR = "cableCar"
    PTI9_3 = "pti9_3"
    LOC14_4 = "loc14_4"
    LIFT = "lift"
    PTI9_4 = "pti9_4"
    LOC14_52 = "loc14_52"
    CHAIR_LIFT = "chairLift"
    PTI9_5 = "pti9_5"
    LOC14_6 = "loc14_6"
    DRAG_LIFT = "dragLift"
    PTI9_6 = "pti9_6"
    SMALL_TELECABIN = "smallTelecabin"
    PTI9_7 = "pti9_7"
    ALL_TELECABIN_SERVICES = "allTelecabinServices"
    PTI9_255 = "pti9_255"
    UNDEFINED = "undefined"
    LOC14_7 = "loc14_7"
    EGG_LIFT = "eggLift"
    LOC14_8 = "loc14_8"
    MINERAL_BUCKETS = "mineralBuckets"
    LOC14_255 = "loc14_255"
    TELECABIN_LINK = "telecabinLink"


class TicketRestrictionEnumeration(Enum):
    UNKNOWN = "unknown"
    ALL_TICKET_CLASSES_VALID = "allTicketClassesValid"
    FULL_FARE_ONLY = "fullFareOnly"
    CERTAIN_TICKETS_ONLY = "certainTicketsOnly"
    TICKET_WITH_RESERVATION = "ticketWithReservation"
    SPECIAL_FARE = "specialFare"
    ONLY_TICKETS_OF_SPECIFIED_OPERATOR = "onlyTicketsOfSpecifiedOperator"
    NO_RESTRICTIONS = "noRestrictions"
    NO_OFF_PEAK_TICKETS = "noOffPeakTickets"
    NO_WEEKEND_RETURN_TICKETS = "noWeekendReturnTickets"
    NO_REDUCED_FARE_TICKETS = "noReducedFareTickets"
    UNKNOWN_TICKET_RESTRICTION = "unknownTicketRestriction"


class TicketingFacilityEnumeration(Enum):
    UNKNOWN = "unknown"
    TICKET_MACHINES = "ticketMachines"
    TICKET_OFFICE = "ticketOffice"
    TICKET_ON_DEMAND_MACHINES = "ticketOnDemandMachines"
    TICKET_SALES = "ticketSales"
    MOBILE_TICKETING = "mobileTicketing"
    TICKET_COLLECTION = "ticketCollection"
    CENTRAL_RESERVATIONS = "centralReservations"
    LOCAL_TICKETS = "localTickets"
    NATIONAL_TICKETS = "nationalTickets"
    INTERNATIONAL_TICKETS = "internationalTickets"


class TimetableTypeEnumeration(Enum):
    UNKNOWN = "unknown"
    WINTER = "winter"
    SPRING = "spring"
    SUMMER = "summer"
    AUTUMN = "autumn"
    SPECIAL = "special"
    EMERGENCY = "emergency"
    UNDEFINED_TIMETABLE_TYPE = "undefinedTimetableType"


@dataclass
class TimingPoint:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=True,
    )


@dataclass
class TrainComponentRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class TrainElementRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class TrainElementTypeEnumeration(Enum):
    BUFFET_CAR = "buffetCar"
    CARRIAGE = "carriage"
    ENGINE = "engine"
    CAR_TRANSPORTER = "carTransporter"
    SLEEPER_CARRIAGE = "sleeperCarriage"
    LUGGAGE_VAN = "luggageVan"
    RESTAURANT_CARRIAGE = "restaurantCarriage"
    OTHER = "other"


@dataclass
class TrainInCompoundTrainRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class TrainRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class TrainSizeEnumeration(Enum):
    NORMAL = "normal"
    SHORT = "short"
    LONG = "long"


class TramSubmodesOfTransportEnumeration(Enum):
    PTI6_0 = "pti6_0"
    LOC12_0 = "loc12_0"
    UNKNOWN = "unknown"
    PTI6_1 = "pti6_1"
    LOC12_1 = "loc12_1"
    CITY_TRAM = "cityTram"
    PTI6_2 = "pti6_2"
    LOCAL_TRAM_SERVICE = "localTramService"
    PTI6_3 = "pti6_3"
    REGIONAL_TRAM = "regionalTram"
    PTI6_4 = "pti6_4"
    LOC12_2 = "loc12_2"
    SIGHTSEEING_TRAM = "sightseeingTram"
    PTI6_5 = "pti6_5"
    SHUTTLE_TRAM = "shuttleTram"
    PTI6_6 = "pti6_6"
    ALL_TRAM_SERVICES = "allTramServices"
    PTI6_255 = "pti6_255"
    LOC12_255 = "loc12_255"
    UNDEFINED_TRAM_SERVICE = "undefinedTramService"


class TypeOfFuelEnumeration(Enum):
    PETROL = "petrol"
    DIESEL = "diesel"
    NATURAL_GAS = "naturalGas"
    BIODIESEL = "biodiesel"
    ELECTRICITY = "electricity"
    HYDROGEN = "hydrogen"
    OTHER = "other"
    UNKNOWN = "unknown"


class TypeOfNestedQuayEnumeration(Enum):
    PLATFORM_GROUP = "platformGroup"
    PLATFORM = "platform"
    PLATFORM_EDGE = "platformEdge"
    PLATFORM_SECTOR = "platformSector"


@dataclass
class UndefinedReason:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class UnknownReason:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class VehicleAtStop:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: bool = field(
        default=False,
    )


class VehicleInFormationStatusEnumeration(Enum):
    UNKNOWN = "unknown"
    AVAILABLE = "available"
    NOT_AVAILABLE = "notAvailable"
    PARTIALLY_AVAILABLE = "partiallyAvailable"
    ADDED = "added"
    REMOVED = "removed"
    DEFECTIVE = "defective"
    CLOSED = "closed"
    BOOKED = "booked"
    NO_RESTAURANT_SERVICE = "noRestaurantService"
    OPEN = "open"


@dataclass
class VehicleJourneyRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class VehicleModesEnumeration(Enum):
    AIR = "air"
    BUS = "bus"
    COACH = "coach"
    FERRY = "ferry"
    METRO = "metro"
    RAIL = "rail"
    TRAM = "tram"
    UNDERGROUND = "underground"


class VehicleModesOfTransportEnumeration(Enum):
    PTI1_0 = "pti1_0"
    UNKNOWN = "unknown"
    PTI1_1 = "pti1_1"
    RAILWAY_SERVICE = "railwayService"
    RAIL = "rail"
    PTI1_2 = "pti1_2"
    COACH_SERVICE = "coachService"
    COACH = "coach"
    PTI1_3 = "pti1_3"
    SUBURBAN_RAILWAY_SERVICE = "suburbanRailwayService"
    SUBURBAN_RAIL = "suburbanRail"
    PTI1_4 = "pti1_4"
    URBAN_RAILWAY_SERVICE = "urbanRailwayService"
    URBAN_RAIL = "urbanRail"
    PTI1_5 = "pti1_5"
    METRO_SERVICE = "metroService"
    METRO = "metro"
    PTI1_6 = "pti1_6"
    UNDERGROUND_SERVICE = "undergroundService"
    UNDERGROUND = "underground"
    PTI1_7 = "pti1_7"
    BUS_SERVICE = "busService"
    BUS = "bus"
    PTI1_8 = "pti1_8"
    TROLLEY_BUS_SERVICE = "trolleyBusService"
    TROLLEY_BUS = "trolleyBus"
    PTI1_9 = "pti1_9"
    TRAM_SERVICE = "tramService"
    TRAM = "tram"
    PTI1_10 = "pti1_10"
    WATER_TRANSPORT_SERVICE = "waterTransportService"
    WATER_TRANSPORT = "waterTransport"
    PTI1_11 = "pti1_11"
    AIR_SERVICE = "airService"
    AIR = "air"
    PTI1_12 = "pti1_12"
    FERRY_SERVICE = "ferryService"
    WATER = "water"
    PTI1_13 = "pti1_13"
    TELECABIN_SERVICE = "telecabinService"
    TELECABIN = "telecabin"
    PTI1_14 = "pti1_14"
    FUNICULAR_SERVICE = "funicularService"
    FUNICULAR = "funicular"
    PTI1_15 = "pti1_15"
    TAXI_SERVICE = "taxiService"
    TAXI = "taxi"
    PTI1_16 = "pti1_16"
    SELF_DRIVE = "selfDrive"
    PTI1_17 = "pti1_17"
    ALL_SERVICES = "allServices"
    ALL = "all"
    PTI1_18 = "pti1_18"
    ALL_SERVICES_EXCEPT = "allServicesExcept"


class VehicleMonitoringDetailEnumeration(Enum):
    MINIMUM = "minimum"
    BASIC = "basic"
    NORMAL = "normal"
    CALLS = "calls"


@dataclass
class VehicleRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class VehicleStatusEnumeration(Enum):
    EXPECTED = "expected"
    NOT_EXPECTED = "notExpected"
    CANCELLED = "cancelled"
    ASSIGNED = "assigned"
    SIGNED_ON = "signedOn"
    AT_ORIGIN = "atOrigin"
    IN_PROGRESS = "inProgress"
    ABORTED = "aborted"
    OFF_ROUTE = "offRoute"
    COMPLETED = "completed"
    ASSUMED_COMPLETED = "assumedCompleted"
    NOT_RUN = "notRun"


class VerificationStatusEnumeration(Enum):
    UNKNOWN = "unknown"
    UNVERIFIED = "unverified"
    VERIFIED = "verified"
    VERIFIED_AS_DUPLICATE = "verifiedAsDuplicate"
    UNDEFINED = "undefined"


@dataclass
class VersionRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class ViaRef:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class VisitNumber:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[int] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


class WaterSubmodesOfTransportEnumeration(Enum):
    PTI7_0 = "pti7_0"
    UNKNOWN = "unknown"
    PTI7_1 = "pti7_1"
    INTERNATIONAL_CAR_FERRY_SERVICE = "internationalCarFerryService"
    PTI7_2 = "pti7_2"
    NATIONAL_CAR_FERRY_SERVICE = "nationalCarFerryService"
    PTI7_3 = "pti7_3"
    REGIONAL_CAR_FERRY_SERVICE = "regionalCarFerryService"
    PTI7_4 = "pti7_4"
    LOCAL_CAR_FERRY_SERVICE = "localCarFerryService"
    PTI7_5 = "pti7_5"
    INTERNATIONAL_PASSENGER_FERRY = "internationalPassengerFerry"
    PTI7_6 = "pti7_6"
    NATIONAL_PASSENGER_FERRY = "nationalPassengerFerry"
    PTI7_7 = "pti7_7"
    REGIONAL_PASSENGER_FERRY = "regionalPassengerFerry"
    PTI7_8 = "pti7_8"
    LOCAL_PASSENGER_FERRY = "localPassengerFerry"
    PTI7_9 = "pti7_9"
    POST_BOAT = "postBoat"
    PTI7_10 = "pti7_10"
    TRAIN_FERRY = "trainFerry"
    PTI7_11 = "pti7_11"
    ROAD_FERRY_LINK = "roadFerryLink"
    PTI7_12 = "pti7_12"
    AIRPORT_BOAT_LINK = "airportBoatLink"
    PTI7_13 = "pti7_13"
    HIGH_SPEED_VEHICLE_SERVICE = "highSpeedVehicleService"
    PTI7_14 = "pti7_14"
    HIGH_SPEED_PASSENGER_SERVICE = "highSpeedPassengerService"
    PTI7_15 = "pti7_15"
    SIGHTSEEING_SERVICE = "sightseeingService"
    PTI7_16 = "pti7_16"
    SCHOOL_BOAT = "schoolBoat"
    PTI7_17 = "pti7_17"
    CABLE_FERRY = "cableFerry"
    PTI7_18 = "pti7_18"
    RIVER_BUS = "riverBus"
    PTI7_19 = "pti7_19"
    SCHEDULED_FERRY = "scheduledFerry"
    PTI7_20 = "pti7_20"
    SHUTTLE_FERRY_SERVICE = "shuttleFerryService"
    PTI7_21 = "pti7_21"
    ALL_WATER_TRANSPORT_SERVICES = "allWaterTransportServices"
    PTI7_255 = "pti7_255"
    UNDEFINED_WATER_TRANSPORT = "undefinedWaterTransport"


@dataclass
class WillWaitStructure:
    wait_until_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "WaitUntilTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    driver_has_acknowledge_will_wait: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DriverHasAcknowledgeWIllWait",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    driver_has_acknowledged_will_wait: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DriverHasAcknowledgedWillWait",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


class WorkflowStatusEnumeration(Enum):
    DRAFT = "draft"
    PENDING_APPROVAL = "pendingApproval"
    APPROVED_DRAFT = "approvedDraft"
    OPEN = "open"
    PUBLISHED = "published"
    CLOSING = "closing"
    CLOSED = "closed"


class LangValue(Enum):
    VALUE = ""


class SpaceValue(Enum):
    DEFAULT = "default"
    PRESERVE = "preserve"


@dataclass
class AlertClinear:
    class Meta:
        name = "AlertCLinear"

    alert_clocation_country_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "alertCLocationCountryCode",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    alert_clocation_table_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "alertCLocationTableNumber",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    alert_clocation_table_version: Optional[str] = field(
        default=None,
        metadata={
            "name": "alertCLocationTableVersion",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    alert_clinear_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCLinearExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AlertCpoint:
    class Meta:
        name = "AlertCPoint"

    alert_clocation_country_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "alertCLocationCountryCode",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    alert_clocation_table_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "alertCLocationTableNumber",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    alert_clocation_table_version: Optional[str] = field(
        default=None,
        metadata={
            "name": "alertCLocationTableVersion",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    alert_cpoint_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCPointExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AxleSpacing:
    axle_spacing: Optional[float] = field(
        default=None,
        metadata={
            "name": "axleSpacing",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    axle_spacing_sequence_identifier: Optional[int] = field(
        default=None,
        metadata={
            "name": "axleSpacingSequenceIdentifier",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    axle_spacing_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "axleSpacingExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AxleWeight:
    axle_position_identifier: Optional[int] = field(
        default=None,
        metadata={
            "name": "axlePositionIdentifier",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    axle_weight: Optional[float] = field(
        default=None,
        metadata={
            "name": "axleWeight",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    maximum_permitted_axle_weight: Optional[float] = field(
        default=None,
        metadata={
            "name": "maximumPermittedAxleWeight",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    axle_weight_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "axleWeightExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class CatalogueReference:
    key_catalogue_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "keyCatalogueReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    catalogue_reference_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "catalogueReferenceExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Cause:
    cause_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "causeExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class DayWeekMonth:
    applicable_day: List[DayEnum] = field(
        default_factory=list,
        metadata={
            "name": "applicableDay",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_occurs": 7,
        }
    )
    applicable_week: List[WeekOfMonthEnum] = field(
        default_factory=list,
        metadata={
            "name": "applicableWeek",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_occurs": 5,
        }
    )
    applicable_month: List[MonthOfYearEnum] = field(
        default_factory=list,
        metadata={
            "name": "applicableMonth",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_occurs": 12,
        }
    )
    day_week_month_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "dayWeekMonthExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Delays:
    delay_band: Optional[DelayBandEnum] = field(
        default=None,
        metadata={
            "name": "delayBand",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    delays_type: Optional[DelaysTypeEnum] = field(
        default=None,
        metadata={
            "name": "delaysType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    delay_time_value: Optional[float] = field(
        default=None,
        metadata={
            "name": "delayTimeValue",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    delays_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "delaysExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Destination1:
    class Meta:
        name = "Destination"

    destination_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "destinationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class ExternalReferencing:
    external_location_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "externalLocationCode",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    external_referencing_system: Optional[str] = field(
        default=None,
        metadata={
            "name": "externalReferencingSystem",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    external_referencing_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "externalReferencingExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class FilterExitManagement:
    filter_end: Optional[bool] = field(
        default=None,
        metadata={
            "name": "filterEnd",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    filter_out_of_range: Optional[bool] = field(
        default=None,
        metadata={
            "name": "filterOutOfRange",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    filter_exit_management_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "filterExitManagementExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class FilterReference:
    delete_filter: Optional[bool] = field(
        default=None,
        metadata={
            "name": "deleteFilter",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    filter_operation_approved: Optional[bool] = field(
        default=None,
        metadata={
            "name": "filterOperationApproved",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    key_filter_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "keyFilterReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    filter_reference_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "filterReferenceExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class GrossWeightCharacteristic:
    comparison_operator: Optional[ComparisonOperatorEnum] = field(
        default=None,
        metadata={
            "name": "comparisonOperator",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    gross_vehicle_weight: Optional[float] = field(
        default=None,
        metadata={
            "name": "grossVehicleWeight",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    gross_weight_characteristic_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "grossWeightCharacteristicExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class GroupOfLocations:
    group_of_locations_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "groupOfLocationsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class GroupOfPeopleInvolved:
    number_of_people: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfPeople",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    injury_status: Optional[InjuryStatusTypeEnum] = field(
        default=None,
        metadata={
            "name": "injuryStatus",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    involvement_role: Optional[InvolvementRolesEnum] = field(
        default=None,
        metadata={
            "name": "involvementRole",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    category_of_people_involved: Optional[PersonCategoryEnum] = field(
        default=None,
        metadata={
            "name": "categoryOfPeopleInvolved",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    group_of_people_involved_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "groupOfPeopleInvolvedExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class HeaderInformation:
    area_of_interest: Optional[AreaOfInterestEnum] = field(
        default=None,
        metadata={
            "name": "areaOfInterest",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    confidentiality: Optional[ConfidentialityValueEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    information_status: Optional[InformationStatusEnum] = field(
        default=None,
        metadata={
            "name": "informationStatus",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    urgency: Optional[UrgencyEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    header_information_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "headerInformationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class HeaviestAxleWeightCharacteristic:
    comparison_operator: Optional[ComparisonOperatorEnum] = field(
        default=None,
        metadata={
            "name": "comparisonOperator",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    heaviest_axle_weight: Optional[float] = field(
        default=None,
        metadata={
            "name": "heaviestAxleWeight",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    heaviest_axle_weight_characteristic_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "heaviestAxleWeightCharacteristicExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class HeightCharacteristic:
    comparison_operator: Optional[ComparisonOperatorEnum] = field(
        default=None,
        metadata={
            "name": "comparisonOperator",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    vehicle_height: Optional[float] = field(
        default=None,
        metadata={
            "name": "vehicleHeight",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    height_characteristic_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "heightCharacteristicExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Humidity:
    relative_humidity: Optional[float] = field(
        default=None,
        metadata={
            "name": "relativeHumidity",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    humidity_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "humidityExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class InternationalIdentifier:
    country: Optional[CountryEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    national_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "nationalIdentifier",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    international_identifier_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "internationalIdentifierExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class LengthCharacteristic:
    comparison_operator: Optional[ComparisonOperatorEnum] = field(
        default=None,
        metadata={
            "name": "comparisonOperator",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    vehicle_length: Optional[float] = field(
        default=None,
        metadata={
            "name": "vehicleLength",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    length_characteristic_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "lengthCharacteristicExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class LifeCycleManagement:
    cancel: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    end: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    life_cycle_management_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "lifeCycleManagementExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class LocationCharacteristicsOverride:
    measurement_lanes_override: Optional[LaneEnum] = field(
        default=None,
        metadata={
            "name": "measurementLanesOverride",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    reversed_flow: Optional[bool] = field(
        default=None,
        metadata={
            "name": "reversedFlow",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    location_characteristics_override_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "locationCharacteristicsOverrideExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class MaintenanceVehicles:
    number_of_maintenance_vehicles: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfMaintenanceVehicles",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    maintenance_vehicle_actions: List[MaintenanceVehicleActionsEnum] = field(
        default_factory=list,
        metadata={
            "name": "maintenanceVehicleActions",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    maintenance_vehicles_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "maintenanceVehiclesExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Mobility:
    mobility_type: Optional[MobilityEnum] = field(
        default=None,
        metadata={
            "name": "mobilityType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    mobility_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "mobilityExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class MultilingualString:
    values: Optional["MultilingualString.Values"] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )

    @dataclass
    class Values:
        value: List[MultilingualStringValue] = field(
            default_factory=list,
            metadata={
                "type": "Element",
                "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
                "min_occurs": 1,
            }
        )


@dataclass
class NumberOfAxlesCharacteristic:
    comparison_operator: Optional[ComparisonOperatorEnum] = field(
        default=None,
        metadata={
            "name": "comparisonOperator",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    number_of_axles: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfAxles",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    number_of_axles_characteristic_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "numberOfAxlesCharacteristicExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class OffsetDistance:
    offset_distance: Optional[int] = field(
        default=None,
        metadata={
            "name": "offsetDistance",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    offset_distance_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "offsetDistanceExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PointCoordinates:
    latitude: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    longitude: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    point_coordinates_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "pointCoordinatesExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PollutionMeasurement:
    pollutant_concentration: Optional[float] = field(
        default=None,
        metadata={
            "name": "pollutantConcentration",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    pollutant_type: Optional[PollutantTypeEnum] = field(
        default=None,
        metadata={
            "name": "pollutantType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    pollution_measurement_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "pollutionMeasurementExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PrecipitationDetail:
    deposition_depth: Optional[float] = field(
        default=None,
        metadata={
            "name": "depositionDepth",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    precipitation_intensity: Optional[float] = field(
        default=None,
        metadata={
            "name": "precipitationIntensity",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    precipitation_type: Optional[PrecipitationTypeEnum] = field(
        default=None,
        metadata={
            "name": "precipitationType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    precipitation_detail_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "precipitationDetailExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class ReferenceSettings:
    predefined_location_set_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "predefinedLocationSetReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    traffic_status_default: Optional[TrafficStatusEnum] = field(
        default=None,
        metadata={
            "name": "trafficStatusDefault",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    reference_settings_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "referenceSettingsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class RoadSurfaceConditionMeasurements:
    de_icing_application_rate: Optional[float] = field(
        default=None,
        metadata={
            "name": "deIcingApplicationRate",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    de_icing_concentration: Optional[float] = field(
        default=None,
        metadata={
            "name": "deIcingConcentration",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    depth_of_snow: Optional[float] = field(
        default=None,
        metadata={
            "name": "depthOfSnow",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    protection_temperature: Optional[float] = field(
        default=None,
        metadata={
            "name": "protectionTemperature",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    road_surface_temperature: Optional[float] = field(
        default=None,
        metadata={
            "name": "roadSurfaceTemperature",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    water_film_thickness: Optional[float] = field(
        default=None,
        metadata={
            "name": "waterFilmThickness",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    road_surface_condition_measurements_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadSurfaceConditionMeasurementsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class SpeedPercentile:
    vehicle_percentage: Optional[float] = field(
        default=None,
        metadata={
            "name": "vehiclePercentage",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    speed_percentile: Optional[float] = field(
        default=None,
        metadata={
            "name": "speedPercentile",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    speed_percentile_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "speedPercentileExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Subjects:
    subject_type_of_works: Optional[SubjectTypeOfWorksEnum] = field(
        default=None,
        metadata={
            "name": "subjectTypeOfWorks",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    number_of_subjects: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfSubjects",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    subjects_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "subjectsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class SupplementaryPositionalDescription:
    carriageway: List[CarriagewayEnum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    footpath: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    lane: List[LaneEnum] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    length_affected: Optional[float] = field(
        default=None,
        metadata={
            "name": "lengthAffected",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    location_descriptor: List[LocationDescriptorEnum] = field(
        default_factory=list,
        metadata={
            "name": "locationDescriptor",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    location_precision: Optional[int] = field(
        default=None,
        metadata={
            "name": "locationPrecision",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    sequential_ramp_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "sequentialRampNumber",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    supplementary_positional_description_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "supplementaryPositionalDescriptionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Target:
    address: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    protocol: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    target_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "targetExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Temperature:
    air_temperature: Optional[float] = field(
        default=None,
        metadata={
            "name": "airTemperature",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    dew_point_temperature: Optional[float] = field(
        default=None,
        metadata={
            "name": "dewPointTemperature",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    maximum_temperature: Optional[float] = field(
        default=None,
        metadata={
            "name": "maximumTemperature",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    minimum_temperature: Optional[float] = field(
        default=None,
        metadata={
            "name": "minimumTemperature",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    temperature_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "temperatureExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TimePeriodOfDay:
    time_period_of_day_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "timePeriodOfDayExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegHeight:
    height: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    height_type: Optional[TpegLoc04HeightTypeEnum] = field(
        default=None,
        metadata={
            "name": "heightType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_height_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegHeightExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegPoint:
    tpeg_point_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegPointExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegPointLocation:
    tpeg_direction: Optional[TpegLoc02DirectionTypeEnum] = field(
        default=None,
        metadata={
            "name": "tpegDirection",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_point_location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegPointLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class VehicleDetectionTime:
    arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "arrivalTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    exit_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "exitTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    passage_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "passageTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    presence_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "presenceTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    time_gap: Optional[float] = field(
        default=None,
        metadata={
            "name": "timeGap",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    time_headway: Optional[float] = field(
        default=None,
        metadata={
            "name": "timeHeadway",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_detection_time_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "vehicleDetectionTimeExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class VehicleHeadway:
    distance_gap: Optional[float] = field(
        default=None,
        metadata={
            "name": "distanceGap",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    distance_headway: Optional[float] = field(
        default=None,
        metadata={
            "name": "distanceHeadway",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_headway_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "vehicleHeadwayExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class VehicleSpeed:
    individual_vehicle_speed: Optional[float] = field(
        default=None,
        metadata={
            "name": "individualVehicleSpeed",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    vehicle_speed_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "vehicleSpeedExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Visibility:
    minimum_visibility_distance: Optional[int] = field(
        default=None,
        metadata={
            "name": "minimumVisibilityDistance",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    visibility_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "visibilityExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class WidthCharacteristic:
    comparison_operator: Optional[ComparisonOperatorEnum] = field(
        default=None,
        metadata={
            "name": "comparisonOperator",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    vehicle_width: Optional[float] = field(
        default=None,
        metadata={
            "name": "vehicleWidth",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    width_characteristic_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "widthCharacteristicExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Wind:
    maximum_wind_speed: Optional[float] = field(
        default=None,
        metadata={
            "name": "maximumWindSpeed",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    wind_direction_bearing: Optional[int] = field(
        default=None,
        metadata={
            "name": "windDirectionBearing",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    wind_direction_compass: Optional[DirectionCompassEnum] = field(
        default=None,
        metadata={
            "name": "windDirectionCompass",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    wind_measurement_height: Optional[int] = field(
        default=None,
        metadata={
            "name": "windMeasurementHeight",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    wind_speed: Optional[float] = field(
        default=None,
        metadata={
            "name": "windSpeed",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    wind_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "windExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AudibleSignalsAvailable:
    class Meta:
        namespace = "http://www.ifopt.org.uk/acsb"

    value: AccessibilityEnumeration = field(
        default=AccessibilityEnumeration.FALSE_VALUE,
    )


@dataclass
class EscalatorFreeAccess:
    class Meta:
        namespace = "http://www.ifopt.org.uk/acsb"

    value: AccessibilityEnumeration = field(
        default=AccessibilityEnumeration.UNKNOWN,
    )


@dataclass
class GuideDogAccess:
    class Meta:
        namespace = "http://www.ifopt.org.uk/acsb"

    value: AccessibilityEnumeration = field(
        default=AccessibilityEnumeration.UNKNOWN,
    )


@dataclass
class LiftFreeAccess:
    class Meta:
        namespace = "http://www.ifopt.org.uk/acsb"

    value: AccessibilityEnumeration = field(
        default=AccessibilityEnumeration.UNKNOWN,
    )


@dataclass
class StepFreeAccess:
    class Meta:
        namespace = "http://www.ifopt.org.uk/acsb"

    value: AccessibilityEnumeration = field(
        default=AccessibilityEnumeration.UNKNOWN,
    )


@dataclass
class UserNeedStructure:
    mobility_need: Optional[MobilityEnumeration] = field(
        default=None,
        metadata={
            "name": "MobilityNeed",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    psychosensory_need: Optional[PyschosensoryNeedEnumeration] = field(
        default=None,
        metadata={
            "name": "PsychosensoryNeed",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    medical_need: Optional[MedicalNeedEnumeration] = field(
        default=None,
        metadata={
            "name": "MedicalNeed",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    encumbrance_need: Optional[EncumbranceEnumeration] = field(
        default=None,
        metadata={
            "name": "EncumbranceNeed",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    excluded: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Excluded",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    need_ranking: Optional[int] = field(
        default=None,
        metadata={
            "name": "NeedRanking",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    extensions: Optional[object] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )


@dataclass
class VisualSignsAvailable:
    class Meta:
        namespace = "http://www.ifopt.org.uk/acsb"

    value: AccessibilityEnumeration = field(
        default=AccessibilityEnumeration.UNKNOWN,
    )


@dataclass
class WheelchairAccess:
    class Meta:
        namespace = "http://www.ifopt.org.uk/acsb"

    value: AccessibilityEnumeration = field(
        default=AccessibilityEnumeration.FALSE_VALUE,
    )


@dataclass
class AbstractProjection:
    features: Optional["AbstractProjection.Features"] = field(
        default=None,
        metadata={
            "name": "Features",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )

    @dataclass
    class Features:
        gis_feature_ref: List[FeatureRefStructure] = field(
            default_factory=list,
            metadata={
                "name": "GisFeatureRef",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/ifopt",
                "min_occurs": 1,
            }
        )


@dataclass
class AdministrativeAreaVersionedRefStructure:
    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
            "pattern": r"[0-9]{3}",
        }
    )
    created: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )
    last_updated: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "lastUpdated",
            "type": "Attribute",
        }
    )
    modification: ModificationEnumeration = field(
        default=ModificationEnumeration.NEW,
        metadata={
            "type": "Attribute",
        }
    )
    version: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )
    status: StatusEnumeration = field(
        default=StatusEnumeration.ACTIVE,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class AdministratorVersionedRefStructure:
    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
        }
    )
    created: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )
    last_updated: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "lastUpdated",
            "type": "Attribute",
        }
    )
    modification: ModificationEnumeration = field(
        default=ModificationEnumeration.NEW,
        metadata={
            "type": "Attribute",
        }
    )
    version: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )
    status: StatusEnumeration = field(
        default=StatusEnumeration.ACTIVE,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class TimebandStructure(HalfOpenTimeRangeStructure1):
    pass


@dataclass
class VersionedObjectStructure:
    created: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )
    last_updated: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "lastUpdated",
            "type": "Attribute",
            "required": True,
        }
    )
    modification: ModificationEnumeration = field(
        default=ModificationEnumeration.NEW,
        metadata={
            "type": "Attribute",
        }
    )
    version: Optional[int] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )
    status: StatusEnumeration = field(
        default=StatusEnumeration.ACTIVE,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class AbstractRing(AbstractRingType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AssociationRoleType:
    any_element: Optional[object] = field(
        default=None,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
        }
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        }
    )


@dataclass
class CodeOrNilReasonListType:
    value: List[Union[str, NilReasonEnumerationValue]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        }
    )
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
        }
    )


@dataclass
class CodeWithAuthorityType(CodeType):
    code_space: Optional[str] = field(
        default=None,
        metadata={
            "name": "codeSpace",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class MeasureOrNilReasonListType:
    value: List[Union[str, NilReasonEnumerationValue]] = field(
        default_factory=list,
        metadata={
            "pattern": r"other:\w{2,}",
            "tokens": True,
        }
    )
    uom: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
            "pattern": r"[^: \n\r\t]+",
        }
    )


@dataclass
class ReferenceType:
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        }
    )


@dataclass
class VectorType(DirectPositionType):
    pass


@dataclass
class AbstractInlineProperty(InlinePropertyType):
    class Meta:
        name = "abstractInlineProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Name(CodeType):
    class Meta:
        name = "name"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Pos(DirectPositionType):
    class Meta:
        name = "pos"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class PosList(DirectPositionListType):
    class Meta:
        name = "posList"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractFunctionalServiceSubscriptionRequest(AbstractSubscriptionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AbstractIdentifiedItemStructure(AbstractItemStructure):
    item_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "ItemIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractPermissionStructure:
    all_participants: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "AllParticipants",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_capabilities: Optional["AbstractPermissionStructure.GeneralCapabilities"] = field(
        default=None,
        metadata={
            "name": "GeneralCapabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class GeneralCapabilities:
        request_response: bool = field(
            default=True,
            metadata={
                "name": "RequestResponse",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        publish_subscribe: bool = field(
            default=True,
            metadata={
                "name": "PublishSubscribe",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class AbstractReferencingItemStructure(AbstractItemStructure):
    item_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ItemRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractRequest(AbstractRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AbstractRequiredIdentifiedItemStructure(AbstractItemStructure):
    item_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "ItemIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class AbstractRequiredReferencingItemStructure(AbstractItemStructure):
    item_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ItemRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class AbstractResponse(ResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AbstractServiceRequestStructure(AbstractRequestStructure):
    message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "MessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractSituationElementStructure:
    creation_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "CreationTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    country_ref: Optional[IanaCountryTldEnumeration] = field(
        default=None,
        metadata={
            "name": "CountryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "SituationNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    update_country_ref: Optional[IanaCountryTldEnumeration] = field(
        default=None,
        metadata={
            "name": "UpdateCountryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    update_participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "UpdateParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: Optional[int] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AccessFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: AccessFacilityEnumeration = field(
        default=AccessFacilityEnumeration.UNKNOWN,
    )


@dataclass
class AccessNotAllowedErrorStructure(ErrorCodeStructure):
    pass


@dataclass
class AccommodationFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: AccommodationFacilityEnumeration = field(
        default=AccommodationFacilityEnumeration.UNKNOWN,
    )


@dataclass
class AffectedModesStructure:
    all_modes: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "AllModes",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    mode: List["AffectedModesStructure.Mode"] = field(
        default_factory=list,
        metadata={
            "name": "Mode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Mode:
        vehicle_mode: Optional[VehicleModesOfTransportEnumeration] = field(
            default=None,
            metadata={
                "name": "VehicleMode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        air_submode: Optional[AirSubmodesOfTransportEnumeration] = field(
            default=None,
            metadata={
                "name": "AirSubmode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        bus_submode: Optional[BusSubmodesOfTransportEnumeration] = field(
            default=None,
            metadata={
                "name": "BusSubmode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        coach_submode: Optional[CoachSubmodesOfTransportEnumeration] = field(
            default=None,
            metadata={
                "name": "CoachSubmode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        metro_submode: Optional[MetroSubmodesOfTransportEnumeration] = field(
            default=None,
            metadata={
                "name": "MetroSubmode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        rail_submode: Optional[RailSubmodesOfTransportEnumeration] = field(
            default=None,
            metadata={
                "name": "RailSubmode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        tram_submode: Optional[TramSubmodesOfTransportEnumeration] = field(
            default=None,
            metadata={
                "name": "TramSubmode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        water_submode: Optional[WaterSubmodesOfTransportEnumeration] = field(
            default=None,
            metadata={
                "name": "WaterSubmode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        telecabin_submode: Optional[TelecabinSubmodesOfTransportEnumeration] = field(
            default=None,
            metadata={
                "name": "TelecabinSubmode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        access_mode: Optional[AccessModesEnumeration] = field(
            default=None,
            metadata={
                "name": "AccessMode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class AirSubmode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: AirSubmodesOfTransportEnumeration = field(
        default=AirSubmodesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class AlertCause:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[AlertCauseEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class AllFacilitiesFeatureStructure:
    access_facility: Optional[AccessFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "AccessFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accommodation_facility: Optional[AccommodationFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "AccommodationFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    assistance_facility: Optional[AssistanceFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "AssistanceFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    fare_class_facility: Optional[FareClassFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "FareClassFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    hire_facility: Optional[HireFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "HireFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    luggage_facility: Optional[LuggageFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "LuggageFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    mobility_facility: Optional[MobilityFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "MobilityFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    nuisance_facility: Optional[NuisanceFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "NuisanceFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    parking_facility: Optional[ParkingFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "ParkingFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    passenger_comms_facility: Optional[PassengerCommsFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "PassengerCommsFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    passenger_information_facility: Optional[PassengerInformationFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "PassengerInformationFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    refreshment_facility: Optional[RefreshmentFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "RefreshmentFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reserved_space_facility: Optional[ReservedSpaceFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "ReservedSpaceFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    retail_facility: Optional[RetailFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "RetailFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    sanitary_facility: Optional[SanitaryFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "SanitaryFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    ticketing_facility: Optional[TicketingFacilityEnumeration] = field(
        default=None,
        metadata={
            "name": "TicketingFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AllowedResourceUsageExceededErrorStructure(ErrorCodeStructure):
    pass


@dataclass
class ArrivalBoardingActivity:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: ArrivalBoardingActivityEnumeration = field(
        default=ArrivalBoardingActivityEnumeration.ALIGHTING,
    )


@dataclass
class ArrivalStatus:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class AssistanceFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: AssistanceFacilityEnumeration = field(
        default=AssistanceFacilityEnumeration.UNKNOWN,
    )


@dataclass
class AuthenticatedRequestStructure(AbstractRequestStructure):
    account_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "AccountId",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    account_key: Optional[str] = field(
        default=None,
        metadata={
            "name": "AccountKey",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class BeyondDataHorizonErrorStructure(ErrorCodeStructure):
    pass


@dataclass
class BoardingStructure:
    arrival_boarding_activity: Optional[ArrivalBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_boarding_activity: Optional[DepartureBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class BookingStatusType:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: BookingStatusEnumeration = field(
        default=BookingStatusEnumeration.UNKNOWN,
    )


@dataclass
class BoundingBoxStructure:
    upper_left: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "UpperLeft",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    lower_right: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "LowerRight",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class BusSubmode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: BusSubmodesOfTransportEnumeration = field(
        default=BusSubmodesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class CapabilityNotSupportedErrorStructure(ErrorCodeStructure):
    capability_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CapabilityRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class CapabilityRequestPolicyStructure:
    national_language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "NationalLanguage",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    translations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Translations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    gml_coordinate_format: Optional[str] = field(
        default=None,
        metadata={
            "name": "GmlCoordinateFormat",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    wgs_decimal_degrees: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "WgsDecimalDegrees",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class CircularAreaStructure(LocationStructure):
    radius: Optional[int] = field(
        default=None,
        metadata={
            "name": "Radius",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ClosedTimeRangeStructure:
    start_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    end_time: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "EndTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    end_time_precision: Optional[EndTimePrecisionEnumeration] = field(
        default=None,
        metadata={
            "name": "EndTimePrecision",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class CoachSubmode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: CoachSubmodesOfTransportEnumeration = field(
        default=CoachSubmodesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class Condition:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[ServiceConditionEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class ConnectingJourneyRefStructure:
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    dated_vehicle_journey_indirect_ref: Optional[DatedVehicleJourneyIndirectRefStructure] = field(
        default=None,
        metadata={
            "name": "DatedVehicleJourneyIndirectRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_number_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainNumberRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ConnectionCapabilityAccessControlStructure(CapabilityAccessControlStructure):
    check_operator_ref: Optional[bool] = field(
        default=None,
        metadata={
            "name": "CheckOperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    check_line_ref: Optional[bool] = field(
        default=None,
        metadata={
            "name": "CheckLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    check_connection_link_ref: Optional[bool] = field(
        default=None,
        metadata={
            "name": "CheckConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ConnectionLinkPermissionStructure(AbstractTopicPermissionStructure):
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class ConsumerResponseEndpointStructure(ResponseStructure):
    consumer_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConsumerRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_message_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestMessageRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DayType:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: DayTypeEnumeration = field(
        default=DayTypeEnumeration.EVERY_DAY,
    )


@dataclass
class DelaysStructure:
    delay_band: Optional[DelayBandEnumeration] = field(
        default=None,
        metadata={
            "name": "DelayBand",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delay_type: Optional[DelaysTypeEnum] = field(
        default=None,
        metadata={
            "name": "DelayType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delay: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "Delay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DepartureBoardingActivity:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: DepartureBoardingActivityEnumeration = field(
        default=DepartureBoardingActivityEnumeration.BOARDING,
    )


@dataclass
class DepartureStatus:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class EndpointDeniedAccessStructure(ErrorCodeStructure):
    endpoint: Optional[str] = field(
        default=None,
        metadata={
            "name": "Endpoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class EndpointNotAvailableAccessStructure(ErrorCodeStructure):
    endpoint: Optional[str] = field(
        default=None,
        metadata={
            "name": "Endpoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ErrorCode(ErrorCodeStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class Extensions1(ExtensionsStructure):
    class Meta:
        name = "Extensions"
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FareClass:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: FareClassEnumeration = field(
        default=FareClassEnumeration.UNKNOWN,
    )


@dataclass
class FareClassFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: FareClassFacilityEnumeration = field(
        default=FareClassFacilityEnumeration.UNKNOWN,
    )


@dataclass
class FareClasses:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: List[FareClassEnumeration] = field(
        default_factory=list,
        metadata={
            "tokens": True,
        }
    )


@dataclass
class FirstOrLastJourney:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: FirstOrLastJourneyEnumeration = field(
        default=FirstOrLastJourneyEnumeration.UNSPECIFIED,
    )


@dataclass
class FunicularSubmode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: FunicularSubmodesOfTransportEnumeration = field(
        default=FunicularSubmodesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class GeneralMessageCapabilityAccessControlStructure(CapabilityAccessControlStructure):
    check_info_channel_ref: bool = field(
        default=True,
        metadata={
            "name": "CheckInfoChannelRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class HalfOpenTimestampInputRangeStructure:
    start_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    end_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "EndTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    end_time_precision: Optional[EndTimePrecisionEnumeration] = field(
        default=None,
        metadata={
            "name": "EndTimePrecision",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class HalfOpenTimestampOutputRangeStructure:
    start_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    end_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "EndTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    end_time_status: Optional[EndTimeStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "EndTimeStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class HireFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: HireFacilityEnumeration = field(
        default=HireFacilityEnumeration.UNKNOWN,
    )


@dataclass
class ImageStructure:
    image_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ImageRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    image_binary: Optional[bytes] = field(
        default=None,
        metadata={
            "name": "ImageBinary",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "format": "base64",
        }
    )
    image_content: Optional[ImageContentEnumeration] = field(
        default=None,
        metadata={
            "name": "ImageContent",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class InfoChannelPermissionStructure(AbstractTopicPermissionStructure):
    info_channel_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InfoChannelRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class InterchangeStatusType:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: InterchangeStatusEnumeration = field(
        default=InterchangeStatusEnumeration.UNKNOWN,
    )


@dataclass
class InvalidDataReferencesErrorStructure(ErrorCodeStructure):
    invalid_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "InvalidRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class KeyListStructure:
    key_value: List[KeyValueStructure] = field(
        default_factory=list,
        metadata={
            "name": "KeyValue",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class LinePermissionStructure(AbstractTopicPermissionStructure):
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class LineShapeStructure:
    point: List[LocationStructure] = field(
        default_factory=list,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 2,
        }
    )


@dataclass
class LuggageFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: LuggageFacilityEnumeration = field(
        default=LuggageFacilityEnumeration.UNKNOWN,
    )


@dataclass
class MetroSubmode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: MetroSubmodesOfTransportEnumeration = field(
        default=MetroSubmodesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class MobilityDisruptionStructure:
    mobility_impaired_access: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MobilityImpairedAccess",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    access_facility: List[AccessFacilityEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "AccessFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class MobilityFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: MobilityFacilityEnumeration = field(
        default=MobilityFacilityEnumeration.UNKNOWN,
    )


@dataclass
class ModesStructure:
    mode: List[AllModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "Mode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    exclude: bool = field(
        default=False,
        metadata={
            "name": "Exclude",
            "type": "Attribute",
        }
    )


@dataclass
class MonitoringCapabilityAccessControlStructure(CapabilityAccessControlStructure):
    check_operator_ref: Optional[bool] = field(
        default=None,
        metadata={
            "name": "CheckOperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    check_line_ref: Optional[bool] = field(
        default=None,
        metadata={
            "name": "CheckLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    check_monitoring_ref: Optional[bool] = field(
        default=None,
        metadata={
            "name": "CheckMonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class NaturalLanguagePlaceNameStructure:
    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
            "min_length": 1,
            "pattern": r"[^,\[\]\{\}\?$%\^=@#;:]+",
        }
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        }
    )


@dataclass
class NaturalLanguageStringStructure:
    value: Optional[str] = field(
        default=None,
        metadata={
            "required": True,
            "min_length": 1,
        }
    )
    lang: Optional[Union[str, LangValue]] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.w3.org/XML/1998/namespace",
        }
    )


@dataclass
class NoInfoForTopicErrorStructure(ErrorCodeStructure):
    pass


@dataclass
class NuisanceFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: NuisanceFacilityEnumeration = field(
        default=NuisanceFacilityEnumeration.UNKNOWN,
    )


@dataclass
class Occupancy:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[OccupancyEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class OperatorPermissionStructure(AbstractTopicPermissionStructure):
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class OtherErrorStructure(ErrorCodeStructure):
    pass


@dataclass
class ParametersIgnoredErrorStructure(ErrorCodeStructure):
    parameter_name: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ParameterName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ParkingFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[ParkingFacilityEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class PassengerCommsFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: PassengerCommsFacilityEnumeration = field(
        default=PassengerCommsFacilityEnumeration.UNKNOWN,
    )


@dataclass
class PassengerInformationFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: PassengerInformationFacilityEnumeration = field(
        default=PassengerInformationFacilityEnumeration.UNKNOWN,
    )


@dataclass
class Predictability:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[PredictabilityEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class PredictionInaccurateReason:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[PredictionInaccurateReasonEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class PredictionQualityStructure:
    prediction_level: Optional[QualityIndexEnumeration] = field(
        default=None,
        metadata={
            "name": "PredictionLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    percentile: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentile",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    lower_time_limit: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "LowerTimeLimit",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    higher_time_limit: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "HigherTimeLimit",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ProducerResponseEndpointStructure(ResponseStructure):
    producer_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProducerRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    response_message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "ResponseMessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_message_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestMessageRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ProducerResponseStructure(ResponseStructure):
    producer_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProducerRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    response_message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "ResponseMessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_message_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestMessageRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class QuayType:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[TypeOfNestedQuayEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class RailSubmode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: RailSubmodesOfTransportEnumeration = field(
        default=RailSubmodesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class RefreshmentFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: RefreshmentFacilityEnumeration = field(
        default=RefreshmentFacilityEnumeration.UNKNOWN,
    )


@dataclass
class RelatedJourneyPartStructure(JourneyPartInfoStructure):
    pass


@dataclass
class ReportType:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: ReportTypeEnumeration = field(
        default=ReportTypeEnumeration.UNKNOWN,
    )


@dataclass
class ReservedSpaceFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: ReservedSpaceFacilityEnumeration = field(
        default=ReservedSpaceFacilityEnumeration.UNKNOWN,
    )


@dataclass
class ResponseEndpointStructure(ResponseStructure):
    address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    responder_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ResponderRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_message_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestMessageRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class RetailFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: RetailFacilityEnumeration = field(
        default=RetailFacilityEnumeration.UNKNOWN,
    )


@dataclass
class RoadFilterStructure:
    road_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "roadNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "max_length": 1024,
        }
    )
    direction_bound: Optional[DirectionEnum] = field(
        default=None,
        metadata={
            "name": "directionBound",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reference_point_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "referencePointIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "max_length": 1024,
        }
    )


@dataclass
class RoutePointType:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: RoutePointTypeEnumeration = field(
        default=RoutePointTypeEnumeration.UNKNOWN,
    )


@dataclass
class SanitaryFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: SanitaryFacilityEnumeration = field(
        default=SanitaryFacilityEnumeration.UNKNOWN,
    )


@dataclass
class SelfDriveSubmode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: SelfDriveSubmodesOfTransportEnumeration = field(
        default=SelfDriveSubmodesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class ServiceNotAvailableErrorStructure(ErrorCodeStructure):
    expected_restart_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedRestartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ServiceRequestContextStructure:
    check_status_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "CheckStatusAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscribe_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscribeAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    manage_subscription_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "ManageSubscriptionAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    get_data_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "GetDataAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    status_response_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "StatusResponseAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscriber_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriberAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    notify_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "NotifyAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    consumer_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConsumerAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    data_name_spaces: Optional[DataNameSpacesStructure] = field(
        default=None,
        metadata={
            "name": "DataNameSpaces",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    wgs_decimal_degrees: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "WgsDecimalDegrees",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    gml_coordinate_format: Optional[str] = field(
        default=None,
        metadata={
            "name": "GmlCoordinateFormat",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distance_units: Optional[str] = field(
        default=None,
        metadata={
            "name": "DistanceUnits",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    velocity_units: Optional[str] = field(
        default=None,
        metadata={
            "name": "VelocityUnits",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    data_horizon: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "DataHorizon",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_timeout: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "RequestTimeout",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delivery_method: Optional[DeliveryMethodEnumeration] = field(
        default=None,
        metadata={
            "name": "DeliveryMethod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    multipart_despatch: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MultipartDespatch",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    confirm_delivery: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ConfirmDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximimum_number_of_subscriptions: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaximimumNumberOfSubscriptions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    allowed_predictors: Optional[PredictorsEnumeration] = field(
        default=None,
        metadata={
            "name": "AllowedPredictors",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    prediction_function: Optional[str] = field(
        default=None,
        metadata={
            "name": "PredictionFunction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class Severity:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: SeverityEnumeration = field(
        default=SeverityEnumeration.NORMAL,
    )


@dataclass
class SimpleActionStructure:
    action_status: Optional[ActionStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "ActionStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class SituationFullRefStructure:
    version_country_ref: Optional[IanaCountryTldEnumeration] = field(
        default=None,
        metadata={
            "name": "VersionCountryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    situation_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "SituationNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    update_country_ref: Optional[IanaCountryTldEnumeration] = field(
        default=None,
        metadata={
            "name": "UpdateCountryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    update_participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "UpdateParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: Optional[int] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class SituationSharedRefStructure:
    country_ref: Optional[IanaCountryTldEnumeration] = field(
        default=None,
        metadata={
            "name": "CountryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "SituationNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    update_country_ref: Optional[IanaCountryTldEnumeration] = field(
        default=None,
        metadata={
            "name": "UpdateCountryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    update_participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "UpdateParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: Optional[int] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopMonitorPermissionStructure(AbstractTopicPermissionStructure):
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class StopPointType:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: StopPointTypeEnumeration = field(
        default=StopPointTypeEnumeration.UNKNOWN,
    )


@dataclass
class TaxiSubmode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: TaxiSubmodesOfTransportEnumeration = field(
        default=TaxiSubmodesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class TelecabinSubmode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: TelecabinSubmodesOfTransportEnumeration = field(
        default=TelecabinSubmodesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class TerminateSubscriptionRequestBodyStructure:
    subscriber_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriberRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    all: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "All",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "SubscriptionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TicketRestrictionType:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: TicketRestrictionEnumeration = field(
        default=TicketRestrictionEnumeration.UNKNOWN,
    )


@dataclass
class TicketingFacility:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: TicketingFacilityEnumeration = field(
        default=TicketingFacilityEnumeration.UNKNOWN,
    )


@dataclass
class TimetableType:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: TimetableTypeEnumeration = field(
        default=TimetableTypeEnumeration.UNKNOWN,
    )


@dataclass
class TimetableValidityPeriod(ClosedTimestampRangeStructure):
    pass


@dataclass
class TramSubmode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: TramSubmodesOfTransportEnumeration = field(
        default=TramSubmodesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class TransportDescriptionStructure:
    communications_transport_method: CommunicationsTransportMethodEnumeration = field(
        default=CommunicationsTransportMethodEnumeration.HTTP_POST,
        metadata={
            "name": "CommunicationsTransportMethod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    compression_method: CompressionMethodEnumeration = field(
        default=CompressionMethodEnumeration.NONE_VALUE,
        metadata={
            "name": "CompressionMethod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class UnapprovedKeyAccessStructure(ErrorCodeStructure):
    key: Optional[str] = field(
        default=None,
        metadata={
            "name": "Key",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class UnknownEndpointErrorStructure(ErrorCodeStructure):
    endpoint: Optional[str] = field(
        default=None,
        metadata={
            "name": "Endpoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class UnknownExtensionsErrorStructure(ErrorCodeStructure):
    extension_name: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ExtensionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class UnknownParticipantErrorStructure(ErrorCodeStructure):
    participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class UnknownSubscriberErrorStructure(ErrorCodeStructure):
    subscriber_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriberRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class UnknownSubscriptionErrorStructure(ErrorCodeStructure):
    subscription_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriptionCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class VehicleMode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: VehicleModesOfTransportEnumeration = field(
        default=VehicleModesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class VehicleMonitorPermissionStructure(AbstractTopicPermissionStructure):
    vehicle_monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleMonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class VerificationStatus:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: Optional[VerificationStatusEnumeration] = field(
        default=None,
        metadata={
            "required": True,
        }
    )


@dataclass
class WaterSubmode:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    value: WaterSubmodesOfTransportEnumeration = field(
        default=WaterSubmodesOfTransportEnumeration.UNKNOWN,
    )


@dataclass
class AlertCdirection:
    class Meta:
        name = "AlertCDirection"

    alert_cdirection_coded: Optional[AlertCdirectionEnum] = field(
        default=None,
        metadata={
            "name": "alertCDirectionCoded",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cdirection_named: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "alertCDirectionNamed",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    alert_cdirection_sense: Optional[bool] = field(
        default=None,
        metadata={
            "name": "alertCDirectionSense",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    alert_cdirection_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCDirectionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AlertClocation:
    class Meta:
        name = "AlertCLocation"

    alert_clocation_name: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "alertCLocationName",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    specific_location: Optional[int] = field(
        default=None,
        metadata={
            "name": "specificLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_clocation_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class BasicDataValue:
    accuracy: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    computational_method: Optional[ComputationMethodEnum] = field(
        default=None,
        metadata={
            "name": "computationalMethod",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    fault: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    fault_reason: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "faultReason",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    number_of_incomplete_inputs: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfIncompleteInputs",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    number_of_input_values_used: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfInputValuesUsed",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    period: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    smoothing_factor: Optional[float] = field(
        default=None,
        metadata={
            "name": "smoothingFactor",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    standard_deviation: Optional[float] = field(
        default=None,
        metadata={
            "name": "standardDeviation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    supplier_calculated_data_quality: Optional[float] = field(
        default=None,
        metadata={
            "name": "supplierCalculatedDataQuality",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    pertinent_location: Optional[GroupOfLocations] = field(
        default=None,
        metadata={
            "name": "pertinentLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    basic_data_value_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "basicDataValueExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Comment:
    comment: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    comment_date_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "commentDateTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    comment_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "commentExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class GroupOfLocationsByReference(GroupOfLocations):
    predefined_location_set_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "predefinedLocationSetReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    group_of_locations_by_reference_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "groupOfLocationsByReferenceExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class HazardousMaterials:
    chemical_name: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "chemicalName",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    dangerous_goods_flash_point: Optional[float] = field(
        default=None,
        metadata={
            "name": "dangerousGoodsFlashPoint",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    dangerous_goods_regulations: Optional[DangerousGoodsRegulationsEnum] = field(
        default=None,
        metadata={
            "name": "dangerousGoodsRegulations",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    hazard_code_identification: Optional[str] = field(
        default=None,
        metadata={
            "name": "hazardCodeIdentification",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    hazard_code_version_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "hazardCodeVersionNumber",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    hazard_substance_item_page_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "hazardSubstanceItemPageNumber",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    trem_card_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "tremCardNumber",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    undg_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "undgNumber",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    volume_of_dangerous_goods: Optional[float] = field(
        default=None,
        metadata={
            "name": "volumeOfDangerousGoods",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    weight_of_dangerous_goods: Optional[float] = field(
        default=None,
        metadata={
            "name": "weightOfDangerousGoods",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    hazardous_materials_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "hazardousMaterialsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Impact:
    capacity_remaining: Optional[float] = field(
        default=None,
        metadata={
            "name": "capacityRemaining",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    number_of_lanes_restricted: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfLanesRestricted",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    number_of_operational_lanes: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfOperationalLanes",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    original_number_of_lanes: Optional[int] = field(
        default=None,
        metadata={
            "name": "originalNumberOfLanes",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    residual_road_width: Optional[float] = field(
        default=None,
        metadata={
            "name": "residualRoadWidth",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    traffic_constriction_type: Optional[TrafficConstrictionTypeEnum] = field(
        default=None,
        metadata={
            "name": "trafficConstrictionType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    delays: Optional[Delays] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    impact_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "impactExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Location:
    external_referencing: List[ExternalReferencing] = field(
        default_factory=list,
        metadata={
            "name": "externalReferencing",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    location_for_display: Optional[PointCoordinates] = field(
        default=None,
        metadata={
            "name": "locationForDisplay",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "locationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class ManagedCause(Cause):
    managed_cause: Optional[str] = field(
        default=None,
        metadata={
            "name": "managedCause",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    managed_cause_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "managedCauseExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Management:
    life_cycle_management: Optional[LifeCycleManagement] = field(
        default=None,
        metadata={
            "name": "lifeCycleManagement",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    filter_exit_management: Optional[FilterExitManagement] = field(
        default=None,
        metadata={
            "name": "filterExitManagement",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    management_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "managementExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class NonManagedCause(Cause):
    cause_description: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "causeDescription",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    cause_type: Optional[CauseTypeEnum] = field(
        default=None,
        metadata={
            "name": "causeType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    non_managed_cause_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "nonManagedCauseExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PayloadPublication:
    feed_description: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "feedDescription",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    feed_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "feedType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    publication_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "publicationTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    publication_creator: Optional[InternationalIdentifier] = field(
        default=None,
        metadata={
            "name": "publicationCreator",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    payload_publication_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "payloadPublicationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    lang: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class Period:
    start_of_period: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "startOfPeriod",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    end_of_period: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "endOfPeriod",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    period_name: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "periodName",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    recurring_time_period_of_day: List[TimePeriodOfDay] = field(
        default_factory=list,
        metadata={
            "name": "recurringTimePeriodOfDay",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    recurring_day_week_month_period: List[DayWeekMonth] = field(
        default_factory=list,
        metadata={
            "name": "recurringDayWeekMonthPeriod",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    period_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "periodExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PointByCoordinates:
    bearing: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    point_coordinates: Optional[PointCoordinates] = field(
        default=None,
        metadata={
            "name": "pointCoordinates",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    point_by_coordinates_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "pointByCoordinatesExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class RoadsideReferencePoint:
    roadside_reference_point_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePointIdentifier",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    administrative_area: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "administrativeArea",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    road_name: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "roadName",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    road_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "roadNumber",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    direction_bound: Optional[DirectionEnum] = field(
        default=None,
        metadata={
            "name": "directionBound",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    direction_relative: Optional[ReferencePointDirectionEnum] = field(
        default=None,
        metadata={
            "name": "directionRelative",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    distance_from_previous: Optional[float] = field(
        default=None,
        metadata={
            "name": "distanceFromPrevious",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    distance_to_next: Optional[float] = field(
        default=None,
        metadata={
            "name": "distanceToNext",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    elevated_road_section: Optional[bool] = field(
        default=None,
        metadata={
            "name": "elevatedRoadSection",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    roadside_reference_point_description: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePointDescription",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    roadside_reference_point_distance: Optional[float] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePointDistance",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    roadside_reference_point_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePointExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Source:
    source_country: Optional[CountryEnum] = field(
        default=None,
        metadata={
            "name": "sourceCountry",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    source_identification: Optional[str] = field(
        default=None,
        metadata={
            "name": "sourceIdentification",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    source_name: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "sourceName",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    source_type: Optional[SourceTypeEnum] = field(
        default=None,
        metadata={
            "name": "sourceType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    reliable: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    source_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "sourceExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Subscription:
    delete_subscription: Optional[bool] = field(
        default=None,
        metadata={
            "name": "deleteSubscription",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    delivery_interval: Optional[float] = field(
        default=None,
        metadata={
            "name": "deliveryInterval",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    operating_mode: Optional[OperatingModeEnum] = field(
        default=None,
        metadata={
            "name": "operatingMode",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    subscription_start_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "subscriptionStartTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    subscription_state: Optional[SubscriptionStateEnum] = field(
        default=None,
        metadata={
            "name": "subscriptionState",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    subscription_stop_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "subscriptionStopTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    update_method: Optional[UpdateMethodEnum] = field(
        default=None,
        metadata={
            "name": "updateMethod",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    target: List[Target] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    filter_reference: Optional[FilterReference] = field(
        default=None,
        metadata={
            "name": "filterReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    catalogue_reference: Optional[CatalogueReference] = field(
        default=None,
        metadata={
            "name": "catalogueReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    subscription_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "subscriptionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TimePeriodByHour(TimePeriodOfDay):
    start_time_of_period: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "startTimeOfPeriod",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    end_time_of_period: Optional[XmlTime] = field(
        default=None,
        metadata={
            "name": "endTimeOfPeriod",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    time_period_by_hour_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "timePeriodByHourExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegAreaLocation:
    tpeg_area_location_type: Optional[TpegLoc01AreaLocationSubtypeEnum] = field(
        default=None,
        metadata={
            "name": "tpegAreaLocationType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_height: Optional[TpegHeight] = field(
        default=None,
        metadata={
            "name": "tpegHeight",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    tpeg_area_location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegAreaLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegDescriptor:
    descriptor: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_descriptor_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegDescriptorExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegLinearLocation:
    tpeg_direction: Optional[TpegLoc02DirectionTypeEnum] = field(
        default=None,
        metadata={
            "name": "tpegDirection",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_linear_location_type: Optional[TpegLoc01LinearLocationSubtypeEnum] = field(
        default=None,
        metadata={
            "name": "tpegLinearLocationType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    to: Optional[TpegPoint] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    from_value: Optional[TpegPoint] = field(
        default=None,
        metadata={
            "name": "from",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_linear_location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegLinearLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegSimplePoint(TpegPointLocation):
    tpeg_simple_point_location_type: Optional[TpegLoc01SimplePointLocationSubtypeEnum] = field(
        default=None,
        metadata={
            "name": "tpegSimplePointLocationType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    point: Optional[TpegPoint] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_simple_point_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegSimplePointExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class UrlLink:
    url_link_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "urlLinkAddress",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    url_link_description: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "urlLinkDescription",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    url_link_type: Optional[UrlLinkTypeEnum] = field(
        default=None,
        metadata={
            "name": "urlLinkType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    url_link_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "urlLinkExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class VehicleCharacteristics:
    fuel_type: Optional[FuelTypeEnum] = field(
        default=None,
        metadata={
            "name": "fuelType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    load_type: Optional[LoadTypeEnum] = field(
        default=None,
        metadata={
            "name": "loadType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_equipment: Optional[VehicleEquipmentEnum] = field(
        default=None,
        metadata={
            "name": "vehicleEquipment",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_type: List[VehicleTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "vehicleType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_usage: Optional[VehicleUsageEnum] = field(
        default=None,
        metadata={
            "name": "vehicleUsage",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    gross_weight_characteristic: List[GrossWeightCharacteristic] = field(
        default_factory=list,
        metadata={
            "name": "grossWeightCharacteristic",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_occurs": 2,
        }
    )
    height_characteristic: List[HeightCharacteristic] = field(
        default_factory=list,
        metadata={
            "name": "heightCharacteristic",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_occurs": 2,
        }
    )
    length_characteristic: List[LengthCharacteristic] = field(
        default_factory=list,
        metadata={
            "name": "lengthCharacteristic",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_occurs": 2,
        }
    )
    width_characteristic: List[WidthCharacteristic] = field(
        default_factory=list,
        metadata={
            "name": "widthCharacteristic",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_occurs": 2,
        }
    )
    heaviest_axle_weight_characteristic: List[HeaviestAxleWeightCharacteristic] = field(
        default_factory=list,
        metadata={
            "name": "heaviestAxleWeightCharacteristic",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_occurs": 2,
        }
    )
    number_of_axles_characteristic: List[NumberOfAxlesCharacteristic] = field(
        default_factory=list,
        metadata={
            "name": "numberOfAxlesCharacteristic",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_occurs": 2,
        }
    )
    vehicle_characteristics_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "vehicleCharacteristicsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PassengerAccessibilityNeedsStructure:
    user_need: List[UserNeedStructure] = field(
        default_factory=list,
        metadata={
            "name": "UserNeed",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    accompanied_by_carer: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AccompaniedByCarer",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )


@dataclass
class SuitabilityStructure:
    suitable: Optional[SuitabilityEnumeration] = field(
        default=None,
        metadata={
            "name": "Suitable",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
            "required": True,
        }
    )
    user_need: Optional[UserNeedStructure] = field(
        default=None,
        metadata={
            "name": "UserNeed",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
            "required": True,
        }
    )


@dataclass
class AdministrativeAreaRefsStructure:
    administrative_area_ref: List[AdministrativeAreaVersionedRefStructure] = field(
        default_factory=list,
        metadata={
            "name": "AdministrativeAreaRef",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "min_occurs": 1,
        }
    )


@dataclass
class DataManagedObjectStructure(VersionedObjectStructure):
    managed_by_area_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ManagedByAreaRef",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "pattern": r"[0-9]{3}",
        }
    )
    info_links: Optional[InfoLinksStructure] = field(
        default=None,
        metadata={
            "name": "InfoLinks",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )


@dataclass
class PointProjectionStructure(AbstractProjection):
    longitude: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Longitude",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "min_inclusive": Decimal("-180"),
            "max_inclusive": Decimal("180"),
        }
    )
    latitude: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Latitude",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "min_inclusive": Decimal("-90"),
            "max_inclusive": Decimal("90"),
        }
    )
    altitude: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Altitude",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "min_inclusive": Decimal("-1000"),
            "max_inclusive": Decimal("5000"),
        }
    )
    coordinates: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Coordinates",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "tokens": True,
        }
    )
    precision: Optional[int] = field(
        default=None,
        metadata={
            "name": "Precision",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
        }
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        }
    )


@dataclass
class ValidityConditionStructure:
    from_date_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "FromDateTime",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    to_date_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ToDateTime",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    day_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "DayType",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    timebands: List["ValidityConditionStructure.Timebands"] = field(
        default_factory=list,
        metadata={
            "name": "Timebands",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )

    @dataclass
    class Timebands:
        timeband: Optional[TimebandStructure] = field(
            default=None,
            metadata={
                "name": "Timeband",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/ifopt",
                "required": True,
            }
        )


@dataclass
class EnvelopeType:
    lower_corner: Optional[DirectPositionType] = field(
        default=None,
        metadata={
            "name": "lowerCorner",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    upper_corner: Optional[DirectPositionType] = field(
        default=None,
        metadata={
            "name": "upperCorner",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "max_occurs": 2,
        }
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        }
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        }
    )


@dataclass
class AbstractAssociationRole(AssociationRoleType):
    class Meta:
        name = "abstractAssociationRole"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractReference(ReferenceType):
    class Meta:
        name = "abstractReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractStrictAssociationRole(AssociationRoleType):
    class Meta:
        name = "abstractStrictAssociationRole"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class DescriptionReference(ReferenceType):
    class Meta:
        name = "descriptionReference"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Identifier(CodeWithAuthorityType):
    class Meta:
        name = "identifier"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Vector(VectorType):
    class Meta:
        name = "vector"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractCapabilitiesStructure:
    general_interaction: Optional[CapabilityGeneralInteractionStructure] = field(
        default=None,
        metadata={
            "name": "GeneralInteraction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    transport_description: Optional[TransportDescriptionStructure] = field(
        default=None,
        metadata={
            "name": "TransportDescription",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractDiscoveryRequestStructure(AuthenticatedRequestStructure):
    address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    requestor_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "MessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractFunctionalServiceCapabilitiesRequest(AbstractServiceRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AbstractFunctionalServiceRequestStructure(AbstractServiceRequestStructure):
    pass


@dataclass
class AbstractServiceRequest(AbstractServiceRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AccessNotAllowedError(AccessNotAllowedErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AccessibilityNeedsFilterStructure:
    user_need: List[UserNeedStructure] = field(
        default_factory=list,
        metadata={
            "name": "UserNeed",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class AffectedFacilityStructure:
    facility_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FacilityRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    start_stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StartStopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    end_stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "EndStopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "FacilityName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_status: List[FacilityStatusEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "FacilityStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: List[Extensions1] = field(
        default_factory=list,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AffectedOperatorStructure:
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "OperatorName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_short_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "OperatorShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operational_unit_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "OperationalUnitRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AimedLocationName(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AllowedResourceUsageExceededError(AllowedResourceUsageExceededErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AnnotatedConnectionLinkStructure:
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    feeder_stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FeederStopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DistributorStopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Monitored",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionLinkName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_stop_point_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "FeederStopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_stop_point_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DistributorStopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    url: Optional[str] = field(
        default=None,
        metadata={
            "name": "Url",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AnnotatedDestinationStructure:
    destination_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    place_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "PlaceName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ArrivalCancellationReason(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ArrivalPlatformName(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ArrivalProximityText(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AuthenticatedRequest(AuthenticatedRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class BeyondDataHorizon(BeyondDataHorizonErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class BrandingStructure:
    branding_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    short_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "ShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    image: Optional[str] = field(
        default=None,
        metadata={
            "name": "Image",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    url: Optional[str] = field(
        default=None,
        metadata={
            "name": "Url",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    private_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PrivateCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class CapabilityNotSupportedError(CapabilityNotSupportedErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionLinkPermissions:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    allow_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AllowAll",
            "type": "Element",
        }
    )
    connection_link_permission: List[ConnectionLinkPermissionStructure] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionLinkPermission",
            "type": "Element",
        }
    )


@dataclass
class ConnectionMonitoringCapabilityRequestPolicyStructure(CapabilityRequestPolicyStructure):
    foreign_journeys_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ForeignJourneysOnly",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ConnectionTimetableCapabilityRequestPolicyStructure(CapabilityRequestPolicyStructure):
    foreign_journeys_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ForeignJourneysOnly",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ConsumerRequestEndpointStructure(AuthenticatedRequestStructure):
    address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    consumer_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConsumerRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "MessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ContextualisedRequestStructure:
    service_request_context: Optional[ServiceRequestContextStructure] = field(
        default=None,
        metadata={
            "name": "ServiceRequestContext",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_timestamp: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "RequestTimestamp",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    account_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "AccountId",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    account_key: Optional[str] = field(
        default=None,
        metadata={
            "name": "AccountKey",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    requestor_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "MessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DefaultedTextStructure(NaturalLanguageStringStructure):
    overridden: bool = field(
        default=True,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class DeliveryVariantStructure:
    variant_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "VariantType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    content: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Content",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class DepartureCancellationReason(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class DeparturePlatformName(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class DepartureProximityText(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class DestinationName(NaturalLanguagePlaceNameStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class DestinationStructure:
    destination_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    destination_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class DirectionStructure:
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DistributorRef(ConnectingJourneyRefStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EasementsStructure:
    ticket_restrictions: Optional[TicketRestrictionEnumeration] = field(
        default=None,
        metadata={
            "name": "TicketRestrictions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    easement: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Easement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    easement_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "EasementRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class EndpointDeniedAccessError(EndpointDeniedAccessStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EndpointNotAvailableAccessError(EndpointNotAvailableAccessStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EquipmentAvailabilityStructure:
    equipment_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquipmentRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    equipment_type_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquipmentTypeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    validity_period: Optional[HalfOpenTimestampOutputRangeStructure] = field(
        default=None,
        metadata={
            "name": "ValidityPeriod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    equipment_status: EquipmentStatusEnumeration = field(
        default=EquipmentStatusEnumeration.NOT_AVAILABLE,
        metadata={
            "name": "EquipmentStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    equipment_features: Optional["EquipmentAvailabilityStructure.EquipmentFeatures"] = field(
        default=None,
        metadata={
            "name": "EquipmentFeatures",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class EquipmentFeatures:
        feature_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "FeatureRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class EstimatedServiceJourneyInterchangeStructure:
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_journey_ref: Optional[ConnectingJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FeederJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_arrival_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FeederArrivalStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time_of_feeder: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTimeOfFeeder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_journey_ref: Optional[ConnectingJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "DistributorJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_departure_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DistributorDepartureStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time_of_distributor: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTimeOfDistributor",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stay_seated: Optional[bool] = field(
        default=None,
        metadata={
            "name": "StaySeated",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    guaranteed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advertised: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Advertised",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_status: Optional[InterchangeStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "InterchangeStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    will_not_wait: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "WillNotWait",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    will_wait: Optional[WillWaitStructure] = field(
        default=None,
        metadata={
            "name": "WillWait",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_arrival_time_of_feeder: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedArrivalTimeOfFeeder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_time_of_distributor: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedDepartureTimeOfDistributor",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ConnectionMonitoring",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_automatic_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumAutomaticWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    minimum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MinimumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class EstimatedTimetableCapabilityRequestPolicyStructure(CapabilityRequestPolicyStructure):
    foreign_journeys_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ForeignJourneysOnly",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class FeederRef(ConnectingJourneyRefStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class GeneralMessageServicePermissionStructure(AbstractPermissionStructure):
    info_channel_permissions: Optional["GeneralMessageServicePermissionStructure.InfoChannelPermissions"] = field(
        default=None,
        metadata={
            "name": "InfoChannelPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class InfoChannelPermissions:
        allow_all: Optional[bool] = field(
            default=None,
            metadata={
                "name": "AllowAll",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        info_channel_permission: List[InfoChannelPermissionStructure] = field(
            default_factory=list,
            metadata={
                "name": "InfoChannelPermission",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class GroupReservationStructure:
    name_of_group: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "NameOfGroup",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    number_of_reserved_seats: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfReservedSeats",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class InfoChannelStructure:
    info_channel_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "InfoChannelCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    icon: Optional[str] = field(
        default=None,
        metadata={
            "name": "Icon",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class InfoLinkStructure:
    uri: Optional[str] = field(
        default=None,
        metadata={
            "name": "Uri",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    label: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Label",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    image: Optional[ImageStructure] = field(
        default=None,
        metadata={
            "name": "Image",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    link_content: Optional[LinkContentEnumeration] = field(
        default=None,
        metadata={
            "name": "LinkContent",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class InfoMessageCancellationStructure(AbstractReferencingItemStructure):
    info_message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "InfoMessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    info_channel_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InfoChannelRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class InvalidDataReferencesError(InvalidDataReferencesErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class JourneyNote(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class KeyList(KeyListStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class LinePermissions:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    allow_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AllowAll",
            "type": "Element",
        }
    )
    line_permission: List[LinePermissionStructure] = field(
        default_factory=list,
        metadata={
            "name": "LinePermission",
            "type": "Element",
        }
    )


@dataclass
class MonitoringValidityConditionStructure:
    period: List[HalfOpenTimestampOutputRangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "Period",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timeband: List[HalfOpenTimeRangeStructure2] = field(
        default_factory=list,
        metadata={
            "name": "Timeband",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    day_type: List[DaysOfWeekEnumerationx] = field(
        default_factory=list,
        metadata={
            "name": "DayType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    holiday_type: List[HolidayTypeEnumerationx] = field(
        default_factory=list,
        metadata={
            "name": "HolidayType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class NetworkStructure:
    network_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "NetworkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    network_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "NetworkName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: Optional[VehicleModesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    air_submode: Optional[AirSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "AirSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    bus_submode: Optional[BusSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "BusSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    coach_submode: Optional[CoachSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "CoachSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    metro_submode: Optional[MetroSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "MetroSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    rail_submode: Optional[RailSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "RailSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    tram_submode: Optional[TramSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "TramSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    water_submode: Optional[WaterSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "WaterSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    telecabin_submode: Optional[TelecabinSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "TelecabinSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_mode: Optional[AccessModesEnumeration] = field(
        default=None,
        metadata={
            "name": "AccessMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class NoInfoForTopicError(NoInfoForTopicErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class OperatorPermissions:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    allow_all: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AllowAll",
            "type": "Element",
        }
    )
    operator_permission: List[OperatorPermissionStructure] = field(
        default_factory=list,
        metadata={
            "name": "OperatorPermission",
            "type": "Element",
        }
    )


@dataclass
class OriginName(NaturalLanguagePlaceNameStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class OtherError(OtherErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ParametersIgnoredError(ParametersIgnoredErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class PassengerCapacityStructure:
    compound_train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CompoundTrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_component_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainComponentRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    entrance_to_vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "EntranceToVehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    fare_class: Optional[FareClassEnumeration] = field(
        default=None,
        metadata={
            "name": "FareClass",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    passenger_category: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "PassengerCategory",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    total_capacity: Optional[int] = field(
        default=None,
        metadata={
            "name": "TotalCapacity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    seating_capacity: Optional[int] = field(
        default=None,
        metadata={
            "name": "SeatingCapacity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standing_capacity: Optional[int] = field(
        default=None,
        metadata={
            "name": "StandingCapacity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    special_place_capacity: Optional[int] = field(
        default=None,
        metadata={
            "name": "SpecialPlaceCapacity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    pushchair_capacity: Optional[int] = field(
        default=None,
        metadata={
            "name": "PushchairCapacity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    wheelchair_place_capacity: Optional[int] = field(
        default=None,
        metadata={
            "name": "WheelchairPlaceCapacity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    pram_place_capacity: Optional[int] = field(
        default=None,
        metadata={
            "name": "PramPlaceCapacity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    bicycle_rack_capacity: Optional[int] = field(
        default=None,
        metadata={
            "name": "BicycleRackCapacity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PlaceNameStructure:
    place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    place_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "PlaceName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    place_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "PlaceShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ProducerRequestEndpointStructure(AuthenticatedRequestStructure):
    address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    producer_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProducerRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "MessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ProductCategoryStructure:
    product_category_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProductCategoryCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    icon: Optional[str] = field(
        default=None,
        metadata={
            "name": "Icon",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ProductionTimetableCapabilityRequestPolicyStructure(CapabilityRequestPolicyStructure):
    foreign_journeys_only: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ForeignJourneysOnly",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PtAdviceStructure:
    advice_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AdviceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advice_type: Optional[AdviceTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "AdviceType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advice_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "AdviceName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    details: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Details",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PublishedLineName(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ReasonForRemoval(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class RecommendedActionStructure:
    type_of_action_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TypeOfActionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    description: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class RelatedSituationStructure:
    creation_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "CreationTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    country_ref: Optional[IanaCountryTldEnumeration] = field(
        default=None,
        metadata={
            "name": "CountryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "SituationNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    update_country_ref: Optional[IanaCountryTldEnumeration] = field(
        default=None,
        metadata={
            "name": "UpdateCountryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    update_participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "UpdateParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: Optional[int] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalReference",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    related_as: Optional[RelatedToEnumeration] = field(
        default=None,
        metadata={
            "name": "RelatedAs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class RemedyStructure:
    remedy_type: Optional[RemedyTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "RemedyType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    remedy_period: Optional[HalfOpenTimestampInputRangeStructure] = field(
        default=None,
        metadata={
            "name": "RemedyPeriod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class RequestStructure(AuthenticatedRequestStructure):
    address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    requestor_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "MessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class RouteName(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ServiceCapabilitiesRequestStructure(AbstractServiceRequestStructure):
    participant_permissions: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ParticipantPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ServiceExceptionStructure(AbstractItemStructure):
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_status: Optional[ServiceExceptionEnumeration] = field(
        default=None,
        metadata={
            "name": "ServiceStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    notice: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Notice",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ServiceFeatureStructure:
    service_feature_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ServiceFeatureCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    icon: Optional[str] = field(
        default=None,
        metadata={
            "name": "Icon",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class ServiceNotAvailableError(ServiceNotAvailableErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SituationFullRef(SituationFullRefStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SituationSourceStructure:
    country: Optional[IanaCountryTldEnumeration] = field(
        default=None,
        metadata={
            "name": "Country",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    source_type: Optional[SituationSourceTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "SourceType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    email: Optional[str] = field(
        default=None,
        metadata={
            "name": "Email",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    phone: Optional[str] = field(
        default=None,
        metadata={
            "name": "Phone",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    fax: Optional[str] = field(
        default=None,
        metadata={
            "name": "Fax",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    web: Optional[str] = field(
        default=None,
        metadata={
            "name": "Web",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    other: Optional[str] = field(
        default=None,
        metadata={
            "name": "Other",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    source_method: Optional[SourceTypeEnum] = field(
        default=None,
        metadata={
            "name": "SourceMethod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    agent_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "AgentReference",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    source_role: Optional[str] = field(
        default=None,
        metadata={
            "name": "SourceRole",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    time_of_communication: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "TimeOfCommunication",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    source_file: Optional[str] = field(
        default=None,
        metadata={
            "name": "SourceFile",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopLineNoticeCancellationStructure(AbstractReferencingItemStructure):
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopMonitoringCapabilityRequestPolicyStructure(CapabilityRequestPolicyStructure):
    use_references: Optional[bool] = field(
        default=None,
        metadata={
            "name": "UseReferences",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    use_names: Optional[bool] = field(
        default=None,
        metadata={
            "name": "UseNames",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopMonitoringFilterStructure:
    preview_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "PreviewInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    start_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_visit_types: Optional[StopVisitTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "StopVisitTypes",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_translations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTranslations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_stop_visits: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaximumStopVisits",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    minimum_stop_visits_per_line: Optional[int] = field(
        default=None,
        metadata={
            "name": "MinimumStopVisitsPerLine",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    minimum_stop_visits_per_line_via: Optional[int] = field(
        default=None,
        metadata={
            "name": "MinimumStopVisitsPerLineVia",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_text_length: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaximumTextLength",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_detail_level: Optional[StopMonitoringDetailEnumeration] = field(
        default=None,
        metadata={
            "name": "StopMonitoringDetailLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_situations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeSituations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_number_of_calls: Optional["StopMonitoringFilterStructure.MaximumNumberOfCalls"] = field(
        default=None,
        metadata={
            "name": "MaximumNumberOfCalls",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class MaximumNumberOfCalls:
        previous: Optional[int] = field(
            default=None,
            metadata={
                "name": "Previous",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        onwards: Optional[int] = field(
            default=None,
            metadata={
                "name": "Onwards",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class StopNoticeCancellationStructure(AbstractRequiredReferencingItemStructure):
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    applies_from_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AppliesFromTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopPointName(NaturalLanguageStringStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopTimetableCapabilityRequestPolicyStructure(CapabilityRequestPolicyStructure):
    use_references: Optional[bool] = field(
        default=None,
        metadata={
            "name": "UseReferences",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    use_names: Optional[bool] = field(
        default=None,
        metadata={
            "name": "UseNames",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TerminateSubscriptionRequestStructure(AuthenticatedRequestStructure):
    address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    requestor_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "MessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscriber_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriberRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    all: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "All",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "SubscriptionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TrainBlockPartStructure:
    number_of_block_parts: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfBlockParts",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    train_part_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainPartRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    position_of_train_block_part: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "PositionOfTrainBlockPart",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TypeOfValueStructure:
    type_of_value_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "TypeOfValueCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    name_of_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "NameOfClass",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    short_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "ShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    image: Optional[str] = field(
        default=None,
        metadata={
            "name": "Image",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    url: Optional[str] = field(
        default=None,
        metadata={
            "name": "Url",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    private_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PrivateCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class UnapprovedKeyAccessError(UnapprovedKeyAccessStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class UnknownEndpointError(UnknownEndpointErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class UnknownExtensionsError(UnknownExtensionsErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class UnknownParticipantError(UnknownParticipantErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class UnknownSubscriberError(UnknownSubscriberErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class UnknownSubscriptionError(UnknownSubscriptionErrorStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class VehicleFeaturesStructure:
    vehicle_feature_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleFeatureCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    icon: Optional[str] = field(
        default=None,
        metadata={
            "name": "Icon",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class VehicleMonitoringCapabilityRequestPolicyStructure(CapabilityRequestPolicyStructure):
    has_references: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HasReferences",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    has_names: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HasNames",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class VehicleOrientationRelativeToQuay(NaturalLanguageStringStructure):
    pass


@dataclass
class ViaName(NaturalLanguagePlaceNameStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AlertCarea:
    class Meta:
        name = "AlertCArea"

    alert_clocation_country_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "alertCLocationCountryCode",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    alert_clocation_table_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "alertCLocationTableNumber",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    alert_clocation_table_version: Optional[str] = field(
        default=None,
        metadata={
            "name": "alertCLocationTableVersion",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    area_location: Optional[AlertClocation] = field(
        default=None,
        metadata={
            "name": "areaLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_carea_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCAreaExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AlertClinearByCode(AlertClinear):
    class Meta:
        name = "AlertCLinearByCode"

    alert_cdirection: Optional[AlertCdirection] = field(
        default=None,
        metadata={
            "name": "alertCDirection",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    location_code_for_linear_location: Optional[AlertClocation] = field(
        default=None,
        metadata={
            "name": "locationCodeForLinearLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_clinear_by_code_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCLinearByCodeExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AlertCmethod2PrimaryPointLocation:
    class Meta:
        name = "AlertCMethod2PrimaryPointLocation"

    alert_clocation: Optional[AlertClocation] = field(
        default=None,
        metadata={
            "name": "alertCLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod2_primary_point_location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCMethod2PrimaryPointLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AlertCmethod2SecondaryPointLocation:
    class Meta:
        name = "AlertCMethod2SecondaryPointLocation"

    alert_clocation: Optional[AlertClocation] = field(
        default=None,
        metadata={
            "name": "alertCLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod2_secondary_point_location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCMethod2SecondaryPointLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AlertCmethod4PrimaryPointLocation:
    class Meta:
        name = "AlertCMethod4PrimaryPointLocation"

    alert_clocation: Optional[AlertClocation] = field(
        default=None,
        metadata={
            "name": "alertCLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    offset_distance: Optional[OffsetDistance] = field(
        default=None,
        metadata={
            "name": "offsetDistance",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod4_primary_point_location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCMethod4PrimaryPointLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AlertCmethod4SecondaryPointLocation:
    class Meta:
        name = "AlertCMethod4SecondaryPointLocation"

    alert_clocation: Optional[AlertClocation] = field(
        default=None,
        metadata={
            "name": "alertCLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    offset_distance: Optional[OffsetDistance] = field(
        default=None,
        metadata={
            "name": "offsetDistance",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod4_secondary_point_location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCMethod4SecondaryPointLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Exchange:
    changed_flag: Optional[ChangedFlagEnum] = field(
        default=None,
        metadata={
            "name": "changedFlag",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    client_identification: Optional[str] = field(
        default=None,
        metadata={
            "name": "clientIdentification",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    delivery_break: Optional[bool] = field(
        default=None,
        metadata={
            "name": "deliveryBreak",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    deny_reason: Optional[DenyReasonEnum] = field(
        default=None,
        metadata={
            "name": "denyReason",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    historical_start_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "historicalStartDate",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    historical_stop_date: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "historicalStopDate",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    keep_alive: Optional[bool] = field(
        default=None,
        metadata={
            "name": "keepAlive",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    request_type: Optional[RequestTypeEnum] = field(
        default=None,
        metadata={
            "name": "requestType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    response: Optional[ResponseEnum] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    subscription_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "subscriptionReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    supplier_identification: Optional[InternationalIdentifier] = field(
        default=None,
        metadata={
            "name": "supplierIdentification",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    target: Optional[Target] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    subscription: Optional[Subscription] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    filter_reference: List[FilterReference] = field(
        default_factory=list,
        metadata={
            "name": "filterReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    catalogue_reference: List[CatalogueReference] = field(
        default_factory=list,
        metadata={
            "name": "catalogueReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    exchange_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "exchangeExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class GenericPublication(PayloadPublication):
    generic_publication_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "genericPublicationName",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    generic_publication_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "genericPublicationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class GroupOfNonOrderedLocations(GroupOfLocations):
    location_contained_in_group: List[Location] = field(
        default_factory=list,
        metadata={
            "name": "locationContainedInGroup",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    group_of_non_ordered_locations_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "groupOfNonOrderedLocationsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class GroupOfVehiclesInvolved:
    number_of_vehicles: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfVehicles",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_status: Optional[VehicleStatusEnum] = field(
        default=None,
        metadata={
            "name": "vehicleStatus",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_characteristics: Optional[VehicleCharacteristics] = field(
        default=None,
        metadata={
            "name": "vehicleCharacteristics",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    group_of_vehicles_involved_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "groupOfVehiclesInvolvedExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Itinerary(GroupOfLocations):
    location_contained_in_itinerary: List["Itinerary.LocationContainedInItinerary"] = field(
        default_factory=list,
        metadata={
            "name": "locationContainedInItinerary",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    route_destination: List[Destination1] = field(
        default_factory=list,
        metadata={
            "name": "routeDestination",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    itinerary_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "itineraryExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )

    @dataclass
    class LocationContainedInItinerary(Location):
        index: Optional[int] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "required": True,
            }
        )


@dataclass
class LocationByReference(Location):
    predefined_location_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "predefinedLocationReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    location_by_reference_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "locationByReferenceExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class MeasuredValue:
    measurement_equipment_type_used: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "measurementEquipmentTypeUsed",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    location_characteristics_override: Optional[LocationCharacteristicsOverride] = field(
        default=None,
        metadata={
            "name": "locationCharacteristicsOverride",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    basic_data_value: Optional[BasicDataValue] = field(
        default=None,
        metadata={
            "name": "basicDataValue",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    measured_value_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "measuredValueExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class MeasurementSpecificCharacteristics:
    accuracy: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    period: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    smoothing_factor: Optional[float] = field(
        default=None,
        metadata={
            "name": "smoothingFactor",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    specific_lane: Optional[LaneEnum] = field(
        default=None,
        metadata={
            "name": "specificLane",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    specific_measurement_value_type: Optional[MeasuredOrDerivedDataTypeEnum] = field(
        default=None,
        metadata={
            "name": "specificMeasurementValueType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    specific_vehicle_characteristics: Optional[VehicleCharacteristics] = field(
        default=None,
        metadata={
            "name": "specificVehicleCharacteristics",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    measurement_specific_characteristics_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "measurementSpecificCharacteristicsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class NetworkLocation(Location):
    supplementary_positional_description: Optional[SupplementaryPositionalDescription] = field(
        default=None,
        metadata={
            "name": "supplementaryPositionalDescription",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    destination: Optional[Destination1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    network_location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "networkLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class OverallPeriod:
    overall_start_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "overallStartTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    overall_end_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "overallEndTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    valid_period: List[Period] = field(
        default_factory=list,
        metadata={
            "name": "validPeriod",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    exception_period: List[Period] = field(
        default_factory=list,
        metadata={
            "name": "exceptionPeriod",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    overall_period_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "overallPeriodExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PredefinedLocation:
    predefined_location_name: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "predefinedLocationName",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    predefined_location: Optional[Location] = field(
        default=None,
        metadata={
            "name": "predefinedLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    predefined_location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "predefinedLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class RoadsideReferencePointPrimaryLocation:
    roadside_reference_point: Optional[RoadsideReferencePoint] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePoint",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    roadside_reference_point_primary_location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePointPrimaryLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class RoadsideReferencePointSecondaryLocation:
    roadside_reference_point: Optional[RoadsideReferencePoint] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePoint",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    roadside_reference_point_secondary_location_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePointSecondaryLocationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegAreaDescriptor(TpegDescriptor):
    tpeg_area_descriptor_type: Optional[TpegLoc03AreaDescriptorSubtypeEnum] = field(
        default=None,
        metadata={
            "name": "tpegAreaDescriptorType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_area_descriptor_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegAreaDescriptorExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegPointDescriptor(TpegDescriptor):
    tpeg_point_descriptor_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegPointDescriptorExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TrafficStatusValue(BasicDataValue):
    traffic_status: Optional[TrafficStatusEnum] = field(
        default=None,
        metadata={
            "name": "trafficStatus",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    traffic_trend_type: Optional[TrafficTrendTypeEnum] = field(
        default=None,
        metadata={
            "name": "trafficTrendType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    traffic_status_value_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "trafficStatusValueExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TrafficValue(BasicDataValue):
    for_vehicles_with_characteristics_of: Optional[VehicleCharacteristics] = field(
        default=None,
        metadata={
            "name": "forVehiclesWithCharacteristicsOf",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    traffic_value_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "trafficValueExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TravelTimeValue(BasicDataValue):
    travel_time: Optional[float] = field(
        default=None,
        metadata={
            "name": "travelTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    travel_time_trend_type: Optional[TravelTimeTrendTypeEnum] = field(
        default=None,
        metadata={
            "name": "travelTimeTrendType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    travel_time_type: Optional[TravelTimeTypeEnum] = field(
        default=None,
        metadata={
            "name": "travelTimeType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    free_flow_speed: Optional[float] = field(
        default=None,
        metadata={
            "name": "freeFlowSpeed",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    free_flow_travel_time: Optional[float] = field(
        default=None,
        metadata={
            "name": "freeFlowTravelTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    normally_expected_travel_time: Optional[float] = field(
        default=None,
        metadata={
            "name": "normallyExpectedTravelTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_type: List[VehicleTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "vehicleType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    travel_time_value_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "travelTimeValueExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Vehicle:
    vehicle_colour: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "vehicleColour",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_country_of_origin: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "vehicleCountryOfOrigin",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vehicleIdentifier",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    vehicle_manufacturer: Optional[str] = field(
        default=None,
        metadata={
            "name": "vehicleManufacturer",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    vehicle_model: Optional[str] = field(
        default=None,
        metadata={
            "name": "vehicleModel",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    vehicle_registration_plate_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vehicleRegistrationPlateIdentifier",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    vehicle_status: Optional[VehicleStatusEnum] = field(
        default=None,
        metadata={
            "name": "vehicleStatus",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_characteristics: Optional[VehicleCharacteristics] = field(
        default=None,
        metadata={
            "name": "vehicleCharacteristics",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    axle_spacing_on_vehicle: List[AxleSpacing] = field(
        default_factory=list,
        metadata={
            "name": "axleSpacingOnVehicle",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    specific_axle_weight: List[AxleWeight] = field(
        default_factory=list,
        metadata={
            "name": "specificAxleWeight",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    hazardous_goods_associated_with_vehicle: Optional[HazardousMaterials] = field(
        default=None,
        metadata={
            "name": "hazardousGoodsAssociatedWithVehicle",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "vehicleExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class WeatherValue(BasicDataValue):
    weather_value_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "weatherValueExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AccessibilityLimitationStructure:
    limitation_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "LimitationId",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    validity_condition: Optional[ValidityConditionStructure] = field(
        default=None,
        metadata={
            "name": "ValidityCondition",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    wheelchair_access: Optional[AccessibilityEnumeration] = field(
        default=None,
        metadata={
            "name": "WheelchairAccess",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
            "required": True,
        }
    )
    step_free_access: Optional[AccessibilityEnumeration] = field(
        default=None,
        metadata={
            "name": "StepFreeAccess",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    escalator_free_access: Optional[AccessibilityEnumeration] = field(
        default=None,
        metadata={
            "name": "EscalatorFreeAccess",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    lift_free_access: Optional[AccessibilityEnumeration] = field(
        default=None,
        metadata={
            "name": "LiftFreeAccess",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    audible_signals_available: Optional[AccessibilityEnumeration] = field(
        default=None,
        metadata={
            "name": "AudibleSignalsAvailable",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    visual_signs_available: Optional[AccessibilityEnumeration] = field(
        default=None,
        metadata={
            "name": "VisualSignsAvailable",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    extensions: Optional[Extensions2] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )


@dataclass
class AbstractEquipmentStructure(DataManagedObjectStructure):
    equipment_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquipmentId",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "required": True,
        }
    )
    equipment_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "EquipmentName",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    type_of_equipment: Optional[str] = field(
        default=None,
        metadata={
            "name": "TypeOfEquipment",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )


@dataclass
class CheckPointStructure:
    check_point_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "CheckPointId",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    validity_condition: Optional[ValidityConditionStructure] = field(
        default=None,
        metadata={
            "name": "ValidityCondition",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    check_point_process: Optional[CheckPointProcessEnumeration] = field(
        default=None,
        metadata={
            "name": "CheckPointProcess",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    check_point_service: Optional[CheckPointServiceEnumeration] = field(
        default=None,
        metadata={
            "name": "CheckPointService",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    access_feature_type: Optional[AccessibilityFeatureEnumeration1] = field(
        default=None,
        metadata={
            "name": "AccessFeatureType",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    congestion: Optional[CongestionEnumeration] = field(
        default=None,
        metadata={
            "name": "Congestion",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    facility_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FacilityRef",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    minimum_likely_delay: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MinimumLikelyDelay",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    average_delay: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "AverageDelay",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    maximum_likely_delay: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumLikelyDelay",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )


@dataclass
class PointProjection(PointProjectionStructure):
    class Meta:
        namespace = "http://www.ifopt.org.uk/ifopt"


@dataclass
class ValidityConditionsStructure:
    validity_condition: List[ValidityConditionStructure] = field(
        default_factory=list,
        metadata={
            "name": "ValidityCondition",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "min_occurs": 1,
        }
    )


@dataclass
class AbstractGmltype:
    class Meta:
        name = "AbstractGMLType"

    description_reference: Optional[DescriptionReference] = field(
        default=None,
        metadata={
            "name": "descriptionReference",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    identifier: Optional[Identifier] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    name: List[Name] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        }
    )


@dataclass
class Envelope(EnvelopeType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractCallStructure:
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "VisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_name: List[StopPointName] = field(
        default_factory=list,
        metadata={
            "name": "StopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractDiscoveryRequest(AbstractDiscoveryRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AbstractFeederItemStructure(AbstractIdentifiedItemStructure):
    valid_until_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidUntilTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "VisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_name: List[StopPointName] = field(
        default_factory=list,
        metadata={
            "name": "StopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractFunctionalServiceRequest(AbstractFunctionalServiceRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AbstractMonitoredCallStructure:
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "VisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_name: List[StopPointName] = field(
        default_factory=list,
        metadata={
            "name": "StopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractNotificationStructure(ProducerRequestEndpointStructure):
    pass


@dataclass
class AbstractServiceJourneyInterchangeStructure:
    interchange_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extra_interchange: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ExtraInterchange",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    cancellation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason_for_removal: Optional[ReasonForRemoval] = field(
        default=None,
        metadata={
            "name": "ReasonForRemoval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_ref: Optional[FeederRef] = field(
        default=None,
        metadata={
            "name": "FeederRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_arrival_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FeederArrivalStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time_of_feeder: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTimeOfFeeder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_ref: Optional[DistributorRef] = field(
        default=None,
        metadata={
            "name": "DistributorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_departure_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DistributorDepartureStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time_of_distributor: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTimeOfDistributor",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stay_seated: Optional[bool] = field(
        default=None,
        metadata={
            "name": "StaySeated",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    guaranteed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advertised: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Advertised",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_automatic_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumAutomaticWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    minimum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MinimumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractSubscriptionRequestStructure(RequestStructure):
    consumer_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConsumerAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_filter_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriptionFilterIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_context: Optional[SubscriptionContextStructure] = field(
        default=None,
        metadata={
            "name": "SubscriptionContext",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractTrackedRequest(RequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AnnotatedConnectionLinkRef(AnnotatedConnectionLinkStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AnnotatedStopPointStructure:
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    timing_point: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TimingPoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Monitored",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "StopName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_area_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopAreaRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    features: Optional["AnnotatedStopPointStructure.Features"] = field(
        default=None,
        metadata={
            "name": "Features",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    lines: Optional["AnnotatedStopPointStructure.Lines"] = field(
        default=None,
        metadata={
            "name": "Lines",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    location: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "Location",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    url: Optional[str] = field(
        default=None,
        metadata={
            "name": "Url",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Features:
        service_feature: List[ServiceFeatureStructure] = field(
            default_factory=list,
            metadata={
                "name": "ServiceFeature",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        service_feature_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "ServiceFeatureRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class Lines:
        line_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "LineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        line_direction: List[LineDirectionStructure] = field(
            default_factory=list,
            metadata={
                "name": "LineDirection",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class ArrivalOrientationRelativeToQuay(VehicleOrientationRelativeToQuay):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class CheckStatusRequestStructure(RequestStructure):
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class CheckStatusResponseBodyStructure:
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    data_ready: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DataReady",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional["CheckStatusResponseBodyStructure.ErrorCondition"] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    valid_until: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidUntil",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    shortest_possible_cycle: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ShortestPossibleCycle",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_started_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ServiceStartedTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class ErrorCondition:
        service_not_available_error: Optional[ServiceNotAvailableError] = field(
            default=None,
            metadata={
                "name": "ServiceNotAvailableError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        other_error: Optional[OtherError] = field(
            default=None,
            metadata={
                "name": "OtherError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        description: Optional[str] = field(
            default=None,
            metadata={
                "name": "Description",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class CheckStatusResponseStructure(ResponseStructure):
    producer_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProducerRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    response_message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "ResponseMessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_message_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestMessageRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    data_ready: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DataReady",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional["CheckStatusResponseStructure.ErrorCondition"] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    valid_until: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidUntil",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    shortest_possible_cycle: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ShortestPossibleCycle",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_started_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ServiceStartedTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class ErrorCondition:
        service_not_available_error: Optional[ServiceNotAvailableError] = field(
            default=None,
            metadata={
                "name": "ServiceNotAvailableError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        other_error: Optional[OtherError] = field(
            default=None,
            metadata={
                "name": "OtherError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        description: Optional[str] = field(
            default=None,
            metadata={
                "name": "Description",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class ConnectionLinksDiscoveryRequestStructure(AbstractDiscoveryRequestStructure):
    bounding_box: Optional[BoundingBoxStructure] = field(
        default=None,
        metadata={
            "name": "BoundingBox",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    circle: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "Circle",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_links_detail_level: Optional[ConnectionLinksDetailEnumeration] = field(
        default=None,
        metadata={
            "name": "ConnectionLinksDetailLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        init=False,
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ConnectionMonitoringCapabilitiesRequest(ServiceCapabilitiesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionMonitoringRequestStructure(AbstractFunctionalServiceRequestStructure):
    preview_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "PreviewInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    connecting_time_filter: Optional[ConnectingTimeFilterStructure] = field(
        default=None,
        metadata={
            "name": "ConnectingTimeFilter",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connecting_journey_filter: List[ConnectingJourneyFilterStructure] = field(
        default_factory=list,
        metadata={
            "name": "ConnectingJourneyFilter",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_translations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTranslations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_detail_level: Optional[ConnectionMonitoringDetailEnumeration] = field(
        default=None,
        metadata={
            "name": "ConnectionMonitoringDetailLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ConnectionMonitoringServiceCapabilitiesStructure(AbstractCapabilitiesStructure):
    topic_filtering: Optional["ConnectionMonitoringServiceCapabilitiesStructure.TopicFiltering"] = field(
        default=None,
        metadata={
            "name": "TopicFiltering",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_policy: Optional["ConnectionMonitoringServiceCapabilitiesStructure.RequestPolicy"] = field(
        default=None,
        metadata={
            "name": "RequestPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_policy: Optional[CapabilitySubscriptionPolicyStructure] = field(
        default=None,
        metadata={
            "name": "SubscriptionPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_control: Optional[ConnectionCapabilityAccessControlStructure] = field(
        default=None,
        metadata={
            "name": "AccessControl",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TopicFiltering:
        default_preview_interval: Optional[XmlDuration] = field(
            default=None,
            metadata={
                "name": "DefaultPreviewInterval",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_connection_link_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByConnectionLinkRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_journey: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByJourney",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_time: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByTime",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class RequestPolicy(CapabilityRequestPolicyStructure):
        foreign_journeys_only: Optional[bool] = field(
            default=None,
            metadata={
                "name": "ForeignJourneysOnly",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class ConnectionServicePermissionStructure(AbstractPermissionStructure):
    operator_permissions: Optional[OperatorPermissions] = field(
        default=None,
        metadata={
            "name": "OperatorPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    line_permissions: Optional[LinePermissions] = field(
        default=None,
        metadata={
            "name": "LinePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    connection_link_permissions: Optional[ConnectionLinkPermissions] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ConnectionTimetableCapabilitiesRequest(ServiceCapabilitiesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionTimetableRequestStructure(AbstractFunctionalServiceRequestStructure):
    arrival_window: Optional[ClosedTimestampRangeStructure] = field(
        default=None,
        metadata={
            "name": "ArrivalWindow",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_translations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTranslations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ConnectionTimetableServiceCapabilitiesStructure(AbstractCapabilitiesStructure):
    topic_filtering: Optional["ConnectionTimetableServiceCapabilitiesStructure.TopicFiltering"] = field(
        default=None,
        metadata={
            "name": "TopicFiltering",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_policy: Optional["ConnectionTimetableServiceCapabilitiesStructure.RequestPolicy"] = field(
        default=None,
        metadata={
            "name": "RequestPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_policy: Optional[CapabilitySubscriptionPolicyStructure] = field(
        default=None,
        metadata={
            "name": "SubscriptionPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_control: Optional[ConnectionCapabilityAccessControlStructure] = field(
        default=None,
        metadata={
            "name": "AccessControl",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TopicFiltering:
        filter_by_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        filter_by_connection_link_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByConnectionLinkRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )

    @dataclass
    class RequestPolicy(CapabilityRequestPolicyStructure):
        foreign_journeys_only: Optional[bool] = field(
            default=None,
            metadata={
                "name": "ForeignJourneysOnly",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class ConsequenceContentStructure:
    consequence_text: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "ConsequenceText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    consequence_priority: Optional[int] = field(
        default=None,
        metadata={
            "name": "ConsequencePriority",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ContextualisedConnectionLinkStructure:
    connection_link_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_name: Optional[StopPointName] = field(
        default=None,
        metadata={
            "name": "StopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    default_duration: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "DefaultDuration",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    frequent_traveller_duration: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "FrequentTravellerDuration",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    occasional_traveller_duration: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "OccasionalTravellerDuration",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    impaired_access_duration: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ImpairedAccessDuration",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DataReadyResponseStructure(ConsumerResponseEndpointStructure):
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional["DataReadyResponseStructure.ErrorCondition"] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class ErrorCondition:
        unknown_subscription_error: Optional[UnknownSubscriptionError] = field(
            default=None,
            metadata={
                "name": "UnknownSubscriptionError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        other_error: Optional[OtherError] = field(
            default=None,
            metadata={
                "name": "OtherError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        description: Optional[str] = field(
            default=None,
            metadata={
                "name": "Description",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class DataReceivedResponseStructure(ConsumerResponseEndpointStructure):
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional["DataReceivedResponseStructure.ErrorCondition"] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class ErrorCondition:
        unknown_subscription_error: Optional[UnknownSubscriptionError] = field(
            default=None,
            metadata={
                "name": "UnknownSubscriptionError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        other_error: Optional[OtherError] = field(
            default=None,
            metadata={
                "name": "OtherError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        description: Optional[str] = field(
            default=None,
            metadata={
                "name": "Description",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class DataSupplyRequestStructure(ConsumerRequestEndpointStructure):
    notification_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "NotificationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    all_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AllData",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DepartureOrientationRelativeToQuay(VehicleOrientationRelativeToQuay):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class DescriptionContentStructure:
    description_text: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "DescriptionText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    description_priority: Optional[int] = field(
        default=None,
        metadata={
            "name": "DescriptionPriority",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class Destination(AnnotatedDestinationStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class Direction(DirectionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class DurationContentStructure:
    duration_text: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "DurationText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class ErrorConditionElementStructure:
    unapproved_key_access_error: Optional[UnapprovedKeyAccessError] = field(
        default=None,
        metadata={
            "name": "UnapprovedKeyAccessError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    unknown_participant_error: Optional[UnknownParticipantError] = field(
        default=None,
        metadata={
            "name": "UnknownParticipantError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    unknown_endpoint_error: Optional[UnknownEndpointError] = field(
        default=None,
        metadata={
            "name": "UnknownEndpointError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    endpoint_denied_access_error: Optional[EndpointDeniedAccessError] = field(
        default=None,
        metadata={
            "name": "EndpointDeniedAccessError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    endpoint_not_available_access_error: Optional[EndpointNotAvailableAccessError] = field(
        default=None,
        metadata={
            "name": "EndpointNotAvailableAccessError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_not_available_error: Optional[ServiceNotAvailableError] = field(
        default=None,
        metadata={
            "name": "ServiceNotAvailableError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    capability_not_supported_error: Optional[CapabilityNotSupportedError] = field(
        default=None,
        metadata={
            "name": "CapabilityNotSupportedError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_not_allowed_error: Optional[AccessNotAllowedError] = field(
        default=None,
        metadata={
            "name": "AccessNotAllowedError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    invalid_data_references_error: Optional[InvalidDataReferencesError] = field(
        default=None,
        metadata={
            "name": "InvalidDataReferencesError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    beyond_data_horizon: Optional[BeyondDataHorizon] = field(
        default=None,
        metadata={
            "name": "BeyondDataHorizon",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    no_info_for_topic_error: Optional[NoInfoForTopicError] = field(
        default=None,
        metadata={
            "name": "NoInfoForTopicError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    parameters_ignored_error: Optional[ParametersIgnoredError] = field(
        default=None,
        metadata={
            "name": "ParametersIgnoredError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    unknown_extensions_error: Optional[UnknownExtensionsError] = field(
        default=None,
        metadata={
            "name": "UnknownExtensionsError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    allowed_resource_usage_exceeded_error: Optional[AllowedResourceUsageExceededError] = field(
        default=None,
        metadata={
            "name": "AllowedResourceUsageExceededError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    other_error: Optional[OtherError] = field(
        default=None,
        metadata={
            "name": "OtherError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    unknown_subscription_error: Optional[UnknownSubscriptionError] = field(
        default=None,
        metadata={
            "name": "UnknownSubscriptionError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ErrorConditionStructure:
    service_not_available_error: Optional[ServiceNotAvailableError] = field(
        default=None,
        metadata={
            "name": "ServiceNotAvailableError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    capability_not_supported_error: Optional[CapabilityNotSupportedError] = field(
        default=None,
        metadata={
            "name": "CapabilityNotSupportedError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_not_allowed_error: Optional[AccessNotAllowedError] = field(
        default=None,
        metadata={
            "name": "AccessNotAllowedError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    invalid_data_references_error: Optional[InvalidDataReferencesError] = field(
        default=None,
        metadata={
            "name": "InvalidDataReferencesError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    beyond_data_horizon: Optional[BeyondDataHorizon] = field(
        default=None,
        metadata={
            "name": "BeyondDataHorizon",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    no_info_for_topic_error: Optional[NoInfoForTopicError] = field(
        default=None,
        metadata={
            "name": "NoInfoForTopicError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    parameters_ignored_error: Optional[ParametersIgnoredError] = field(
        default=None,
        metadata={
            "name": "ParametersIgnoredError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    unknown_extensions_error: Optional[UnknownExtensionsError] = field(
        default=None,
        metadata={
            "name": "UnknownExtensionsError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    allowed_resource_usage_exceeded_error: Optional[AllowedResourceUsageExceededError] = field(
        default=None,
        metadata={
            "name": "AllowedResourceUsageExceededError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    other_error: Optional[OtherError] = field(
        default=None,
        metadata={
            "name": "OtherError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class EstimatedServiceJourneyInterchange(EstimatedServiceJourneyInterchangeStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EstimatedTimetableCapabilitiesRequest(ServiceCapabilitiesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EstimatedTimetableRequestStructure(AbstractFunctionalServiceRequestStructure):
    preview_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "PreviewInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timetable_version_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TimetableVersionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    lines: Optional["EstimatedTimetableRequestStructure.Lines"] = field(
        default=None,
        metadata={
            "name": "Lines",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ProductCategoryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_translations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTranslations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_interchanges: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeInterchanges",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_journey_relations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeJourneyRelations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_train_formations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTrainFormations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_timetable_detail_level: Optional[EstimatedTimetableDetailEnumeration] = field(
        default=None,
        metadata={
            "name": "EstimatedTimetableDetailLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )

    @dataclass
    class Lines:
        line_direction: List[LineDirectionStructure] = field(
            default_factory=list,
            metadata={
                "name": "LineDirection",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class EstimatedTimetableServiceCapabilitiesStructure(AbstractCapabilitiesStructure):
    topic_filtering: Optional["EstimatedTimetableServiceCapabilitiesStructure.TopicFiltering"] = field(
        default=None,
        metadata={
            "name": "TopicFiltering",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_policy: Optional["EstimatedTimetableServiceCapabilitiesStructure.RequestPolicy"] = field(
        default=None,
        metadata={
            "name": "RequestPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_policy: Optional[CapabilitySubscriptionPolicyStructure] = field(
        default=None,
        metadata={
            "name": "SubscriptionPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_control: Optional[ConnectionCapabilityAccessControlStructure] = field(
        default=None,
        metadata={
            "name": "AccessControl",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TopicFiltering:
        default_preview_interval: Optional[XmlDuration] = field(
            default=None,
            metadata={
                "name": "DefaultPreviewInterval",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_operator_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByOperatorRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        filter_by_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        filter_by_vehicle_mode: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByVehicleMode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_product_category_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByProductCategoryRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_stop_point_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByStopPointRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_version_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByVersionRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class RequestPolicy(CapabilityRequestPolicyStructure):
        pass


@dataclass
class ExpectedDepartureCapacities(PassengerCapacityStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityMonitoringCapabilitiesRequest(ServiceCapabilitiesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityMonitoringRequestStructure(AbstractFunctionalServiceRequestStructure):
    preview_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "PreviewInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    start_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "FacilityRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "FeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_place_component_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPlaceComponentRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    site_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SiteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accessibility_needs_filter: List[AccessibilityNeedsFilterStructure] = field(
        default_factory=list,
        metadata={
            "name": "AccessibilityNeedsFilter",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_translations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTranslations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_number_of_facility_conditions: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaximumNumberOfFacilityConditions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class FacilityMonitoringServiceCapabilitiesStructure(AbstractCapabilitiesStructure):
    topic_filtering: Optional["FacilityMonitoringServiceCapabilitiesStructure.TopicFiltering"] = field(
        default=None,
        metadata={
            "name": "TopicFiltering",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_policy: Optional["FacilityMonitoringServiceCapabilitiesStructure.RequestPolicy"] = field(
        default=None,
        metadata={
            "name": "RequestPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_policy: Optional[CapabilitySubscriptionPolicyStructure] = field(
        default=None,
        metadata={
            "name": "SubscriptionPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_control: Optional["FacilityMonitoringServiceCapabilitiesStructure.AccessControl"] = field(
        default=None,
        metadata={
            "name": "AccessControl",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    response_features: Optional["FacilityMonitoringServiceCapabilitiesStructure.ResponseFeatures"] = field(
        default=None,
        metadata={
            "name": "ResponseFeatures",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TopicFiltering:
        default_preview_interval: XmlDuration = field(
            default=XmlDuration("PT60M"),
            metadata={
                "name": "DefaultPreviewInterval",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_facility_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByFacilityRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        filter_by_location_ref: bool = field(
            init=False,
            default=True,
            metadata={
                "name": "FilterByLocationRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_vehicle_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByVehicleRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_stop_point_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByStopPointRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_vehicle_journey_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByVehicleJourneyRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_connection_link_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByConnectionLinkRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_interchange_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByInterchangeRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_specific_need: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterBySpecificNeed",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class RequestPolicy(CapabilityRequestPolicyStructure):
        has_maximum_facility_status: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasMaximumFacilityStatus",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class AccessControl(CapabilityAccessControlStructure):
        check_operator_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "CheckOperatorRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        check_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "CheckLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class ResponseFeatures:
        has_remedy: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasRemedy",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_facility_location: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasFacilityLocation",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class FacilityMonitoringServicePermissionStructure(AbstractPermissionStructure):
    operator_permissions: Optional[OperatorPermissions] = field(
        default=None,
        metadata={
            "name": "OperatorPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    line_permissions: Optional[LinePermissions] = field(
        default=None,
        metadata={
            "name": "LinePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class FacilityRequestStructure(AbstractDiscoveryRequestStructure):
    bounding_box: Optional[BoundingBoxStructure] = field(
        default=None,
        metadata={
            "name": "BoundingBox",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_detail_level: Optional[FacilityDetailEnumeration] = field(
        default=None,
        metadata={
            "name": "FacilityDetailLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class FromServiceJourneyInterchangeStructure:
    interchange_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extra_interchange: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ExtraInterchange",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    cancellation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason_for_removal: Optional[ReasonForRemoval] = field(
        default=None,
        metadata={
            "name": "ReasonForRemoval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_ref: Optional[FeederRef] = field(
        default=None,
        metadata={
            "name": "FeederRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    feeder_arrival_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FeederArrivalStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    feeder_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time_of_feeder: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTimeOfFeeder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_ref: Optional[DistributorRef] = field(
        default=None,
        metadata={
            "name": "DistributorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_departure_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DistributorDepartureStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time_of_distributor: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTimeOfDistributor",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stay_seated: Optional[bool] = field(
        default=None,
        metadata={
            "name": "StaySeated",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    guaranteed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advertised: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Advertised",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_automatic_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumAutomaticWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    minimum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MinimumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class GeneralMessageCancellation(InfoMessageCancellationStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class GeneralMessageCapabilitiesRequest(ServiceCapabilitiesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class GeneralMessagePermissions(PermissionsStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    general_message_permission: List[GeneralMessageServicePermissionStructure] = field(
        default_factory=list,
        metadata={
            "name": "GeneralMessagePermission",
            "type": "Element",
        }
    )


@dataclass
class GeneralMessageRequestStructure(AbstractFunctionalServiceRequestStructure):
    info_channel_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "InfoChannelRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class GeneralMessageServiceCapabilitiesStructure(AbstractCapabilitiesStructure):
    topic_filtering: Optional["GeneralMessageServiceCapabilitiesStructure.TopicFiltering"] = field(
        default=None,
        metadata={
            "name": "TopicFiltering",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_policy: Optional[CapabilityRequestPolicyStructure] = field(
        default=None,
        metadata={
            "name": "RequestPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_control: Optional[GeneralMessageCapabilityAccessControlStructure] = field(
        default=None,
        metadata={
            "name": "AccessControl",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TopicFiltering:
        default_preview_interval: XmlDuration = field(
            default=XmlDuration("PT60M"),
            metadata={
                "name": "DefaultPreviewInterval",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_info_channel: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByInfoChannel",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class HeartbeatNotificationStructure(ProducerRequestEndpointStructure):
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    data_ready: Optional[bool] = field(
        default=None,
        metadata={
            "name": "DataReady",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional["HeartbeatNotificationStructure.ErrorCondition"] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    valid_until: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidUntil",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    shortest_possible_cycle: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ShortestPossibleCycle",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_started_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ServiceStartedTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class ErrorCondition:
        service_not_available_error: Optional[ServiceNotAvailableError] = field(
            default=None,
            metadata={
                "name": "ServiceNotAvailableError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        other_error: Optional[OtherError] = field(
            default=None,
            metadata={
                "name": "OtherError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        description: Optional[str] = field(
            default=None,
            metadata={
                "name": "Description",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class InfoChannel(InfoChannelStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class InfoChannelDiscoveryRequestStructure(AbstractDiscoveryRequestStructure):
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class LinesDiscoveryRequestStructure(AbstractDiscoveryRequestStructure):
    bounding_box: Optional[BoundingBoxStructure] = field(
        default=None,
        metadata={
            "name": "BoundingBox",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    circle: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "Circle",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_direction_ref: Optional[LineDirectionStructure] = field(
        default=None,
        metadata={
            "name": "LineDirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    lines_detail_level: Optional[LinesDetailEnumeration] = field(
        default=None,
        metadata={
            "name": "LinesDetailLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class MonitoredCountingStructure:
    counting_type: Optional[CountingTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "CountingType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    counted_feature_unit: Optional[CountedFeatureUnitEnumeration] = field(
        default=None,
        metadata={
            "name": "CountedFeatureUnit",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    type_of_counted_feature: Optional[TypeOfValueStructure] = field(
        default=None,
        metadata={
            "name": "TypeOfCountedFeature",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    count: Optional[int] = field(
        default=None,
        metadata={
            "name": "Count",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Percentage",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_inclusive": Decimal("0"),
        }
    )
    trend: Optional[CountingTrendEnumeration] = field(
        default=None,
        metadata={
            "name": "Trend",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accuracy: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Accuracy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_inclusive": Decimal("0"),
        }
    )
    description: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    counted_items_id_list: Optional["MonitoredCountingStructure.CountedItemsIdList"] = field(
        default=None,
        metadata={
            "name": "CountedItemsIdList",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class CountedItemsIdList:
        item_id: List[str] = field(
            default_factory=list,
            metadata={
                "name": "ItemId",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class MonitoredStopVisitCancellationStructure(AbstractReferencingItemStructure):
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "VisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "VehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    clear_down_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ClearDownRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPatternRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "JourneyPatternName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_lines_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupOfLinesRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding: Optional[BrandingStructure] = field(
        default=None,
        metadata={
            "name": "Branding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Reason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class MonitoringInformationStructure:
    monitoring_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MonitoringInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitoring_type: Optional[MonitoringTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "MonitoringType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitoring_period: Optional[MonitoringValidityConditionStructure] = field(
        default=None,
        metadata={
            "name": "MonitoringPeriod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class NetworkContextStructure:
    operator: List[AffectedOperatorStructure] = field(
        default_factory=list,
        metadata={
            "name": "Operator",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    network: Optional[NetworkStructure] = field(
        default=None,
        metadata={
            "name": "Network",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ProducerRequest(ProducerRequestEndpointStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ProductCategoriesDiscoveryRequestStructure(AbstractDiscoveryRequestStructure):
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ProductCategory(ProductCategoryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ProductionTimetableCapabilitiesRequest(ServiceCapabilitiesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ProductionTimetableRequestStructure(AbstractFunctionalServiceRequestStructure):
    validity_period: Optional[TimetableValidityPeriod] = field(
        default=None,
        metadata={
            "name": "ValidityPeriod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timetable_version_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TimetableVersionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    lines: Optional["ProductionTimetableRequestStructure.Lines"] = field(
        default=None,
        metadata={
            "name": "Lines",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ProductCategoryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_translations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTranslations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_interchanges: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeInterchanges",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_journey_relations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeJourneyRelations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_train_formations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTrainFormations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    incremental_updates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncrementalUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )

    @dataclass
    class Lines:
        line_direction: List[LineDirectionStructure] = field(
            default_factory=list,
            metadata={
                "name": "LineDirection",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class ProductionTimetableServiceCapabilitiesStructure(AbstractCapabilitiesStructure):
    topic_filtering: Optional["ProductionTimetableServiceCapabilitiesStructure.TopicFiltering"] = field(
        default=None,
        metadata={
            "name": "TopicFiltering",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_policy: Optional["ProductionTimetableServiceCapabilitiesStructure.RequestPolicy"] = field(
        default=None,
        metadata={
            "name": "RequestPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_policy: Optional["ProductionTimetableServiceCapabilitiesStructure.SubscriptionPolicy"] = field(
        default=None,
        metadata={
            "name": "SubscriptionPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_control: Optional[ConnectionCapabilityAccessControlStructure] = field(
        default=None,
        metadata={
            "name": "AccessControl",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TopicFiltering:
        filter_by_validity_period: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByValidityPeriod",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        filter_by_operator_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByOperatorRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        filter_by_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        filter_by_vehicle_mode: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByVehicleMode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_product_category_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByProductCategoryRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_stop_point_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByStopPointRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_version_ref: bool = field(
            default=True,
            metadata={
                "name": "FilterByVersionRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class RequestPolicy(CapabilityRequestPolicyStructure):
        pass

    @dataclass
    class SubscriptionPolicy:
        has_incremental_updates: bool = field(
            default=True,
            metadata={
                "name": "HasIncrementalUpdates",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class ReasonContentStructure:
    reason_text: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "ReasonText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class RecommendationContentStructure:
    recommendation_text: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "RecommendationText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    recommendation_priority: Optional[int] = field(
        default=None,
        metadata={
            "name": "RecommendationPriority",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class RecordedDepartureCapacities(PassengerCapacityStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ReferencesStructure:
    related_to_ref: List[RelatedSituationStructure] = field(
        default_factory=list,
        metadata={
            "name": "RelatedToRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class RemarkContentStructure:
    remark: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "Remark",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    remark_priority: Optional[int] = field(
        default=None,
        metadata={
            "name": "RemarkPriority",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class RemovedDatedVehicleJourneyStructure:
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    dated_vehicle_journey_indirect_ref: Optional[DatedVehicleJourneyIndirectRefStructure] = field(
        default=None,
        metadata={
            "name": "DatedVehicleJourneyIndirectRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_numbers: Optional["RemovedDatedVehicleJourneyStructure.TrainNumbers"] = field(
        default=None,
        metadata={
            "name": "TrainNumbers",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason_for_removal: Optional[ReasonForRemoval] = field(
        default=None,
        metadata={
            "name": "ReasonForRemoval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )

    @dataclass
    class TrainNumbers:
        train_number_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "TrainNumberRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class RemovedServiceJourneyInterchangeStructure:
    interchange_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extra_interchange: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ExtraInterchange",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    cancellation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason_for_removal: Optional[ReasonForRemoval] = field(
        default=None,
        metadata={
            "name": "ReasonForRemoval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    feeder_ref: Optional[FeederRef] = field(
        default=None,
        metadata={
            "name": "FeederRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    feeder_arrival_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FeederArrivalStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    feeder_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time_of_feeder: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTimeOfFeeder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_ref: Optional[DistributorRef] = field(
        default=None,
        metadata={
            "name": "DistributorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    distributor_departure_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DistributorDepartureStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    distributor_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time_of_distributor: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTimeOfDistributor",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stay_seated: Optional[bool] = field(
        default=None,
        metadata={
            "name": "StaySeated",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    guaranteed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advertised: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Advertised",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_automatic_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumAutomaticWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    minimum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MinimumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ServiceDeliveryErrorConditionStructure:
    unapproved_key_access_error: Optional[UnapprovedKeyAccessError] = field(
        default=None,
        metadata={
            "name": "UnapprovedKeyAccessError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    unknown_participant_error: Optional[UnknownParticipantError] = field(
        default=None,
        metadata={
            "name": "UnknownParticipantError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    unknown_endpoint_error: Optional[UnknownEndpointError] = field(
        default=None,
        metadata={
            "name": "UnknownEndpointError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    endpoint_denied_access_error: Optional[EndpointDeniedAccessError] = field(
        default=None,
        metadata={
            "name": "EndpointDeniedAccessError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    endpoint_not_available_access_error: Optional[EndpointNotAvailableAccessError] = field(
        default=None,
        metadata={
            "name": "EndpointNotAvailableAccessError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_not_available_error: Optional[ServiceNotAvailableError] = field(
        default=None,
        metadata={
            "name": "ServiceNotAvailableError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    capability_not_supported_error: Optional[CapabilityNotSupportedError] = field(
        default=None,
        metadata={
            "name": "CapabilityNotSupportedError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_not_allowed_error: Optional[AccessNotAllowedError] = field(
        default=None,
        metadata={
            "name": "AccessNotAllowedError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    invalid_data_references_error: Optional[InvalidDataReferencesError] = field(
        default=None,
        metadata={
            "name": "InvalidDataReferencesError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    beyond_data_horizon: Optional[BeyondDataHorizon] = field(
        default=None,
        metadata={
            "name": "BeyondDataHorizon",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    no_info_for_topic_error: Optional[NoInfoForTopicError] = field(
        default=None,
        metadata={
            "name": "NoInfoForTopicError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    parameters_ignored_error: Optional[ParametersIgnoredError] = field(
        default=None,
        metadata={
            "name": "ParametersIgnoredError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    unknown_extensions_error: Optional[UnknownExtensionsError] = field(
        default=None,
        metadata={
            "name": "UnknownExtensionsError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    allowed_resource_usage_exceeded_error: Optional[AllowedResourceUsageExceededError] = field(
        default=None,
        metadata={
            "name": "AllowedResourceUsageExceededError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    other_error: Optional[OtherError] = field(
        default=None,
        metadata={
            "name": "OtherError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ServiceException(ServiceExceptionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ServiceFeature(ServiceFeatureStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ServiceFeaturesDiscoveryRequestStructure(AbstractDiscoveryRequestStructure):
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ServiceJourneyInterchangeStructure:
    interchange_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extra_interchange: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ExtraInterchange",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    cancellation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason_for_removal: Optional[ReasonForRemoval] = field(
        default=None,
        metadata={
            "name": "ReasonForRemoval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_ref: Optional[FeederRef] = field(
        default=None,
        metadata={
            "name": "FeederRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    feeder_arrival_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FeederArrivalStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    feeder_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time_of_feeder: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTimeOfFeeder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_ref: Optional[DistributorRef] = field(
        default=None,
        metadata={
            "name": "DistributorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    distributor_departure_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DistributorDepartureStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    distributor_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time_of_distributor: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTimeOfDistributor",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stay_seated: Optional[bool] = field(
        default=None,
        metadata={
            "name": "StaySeated",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    guaranteed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advertised: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Advertised",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_automatic_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumAutomaticWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    minimum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MinimumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class SituationExchangeCapabilitiesRequest(ServiceCapabilitiesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SituationExchangeRequestStructure(AbstractFunctionalServiceRequestStructure):
    preview_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "PreviewInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    start_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    validity_period: Optional[HalfOpenTimestampInputRangeStructure] = field(
        default=None,
        metadata={
            "name": "ValidityPeriod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_only_if_in_publication_window: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeOnlyIfInPublicationWindow",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: Optional[VehicleModesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    air_submode: Optional[AirSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "AirSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    bus_submode: Optional[BusSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "BusSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    coach_submode: Optional[CoachSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "CoachSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    metro_submode: Optional[MetroSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "MetroSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    rail_submode: Optional[RailSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "RailSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    tram_submode: Optional[TramSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "TramSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    water_submode: Optional[WaterSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "WaterSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    telecabin_submode: Optional[TelecabinSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "TelecabinSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_mode: Optional[AccessModesEnumeration] = field(
        default=None,
        metadata={
            "name": "AccessMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    severity: Optional[SeverityEnumeration] = field(
        default=None,
        metadata={
            "name": "Severity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    scope: List[ScopeTypeEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "Scope",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    predictability: Optional[PredictabilityEnumeration] = field(
        default=None,
        metadata={
            "name": "Predictability",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    keywords: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Keywords",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "tokens": True,
        }
    )
    verification: Optional[VerificationStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "Verification",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    progress: List[WorkflowStatusEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "Progress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reality: Optional[InformationStatusEnum] = field(
        default=None,
        metadata={
            "name": "Reality",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operational_unit_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "OperationalUnitRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    network_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "NetworkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    lines: Optional["SituationExchangeRequestStructure.Lines"] = field(
        default=None,
        metadata={
            "name": "Lines",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "FacilityRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_place_component_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPlaceComponentRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    country_ref: Optional[IanaCountryTldEnumeration] = field(
        default=None,
        metadata={
            "name": "CountryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    location: List[LocationStructure] = field(
        default_factory=list,
        metadata={
            "name": "Location",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "max_occurs": 2,
        }
    )
    situation_road_filter: Optional["SituationExchangeRequestStructure.SituationRoadFilter"] = field(
        default=None,
        metadata={
            "name": "SituationRoadFilter",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accessibility_need_filter: List[PassengerAccessibilityNeedsStructure] = field(
        default_factory=list,
        metadata={
            "name": "AccessibilityNeedFilter",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_translations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTranslations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_number_of_situation_elements: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaximumNumberOfSituationElements",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )

    @dataclass
    class Lines:
        line_direction: List[LineDirectionStructure] = field(
            default_factory=list,
            metadata={
                "name": "LineDirection",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class SituationRoadFilter:
        road_filter: List[RoadFilterStructure] = field(
            default_factory=list,
            metadata={
                "name": "RoadFilter",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class SituationExchangeServiceCapabilitiesStructure(AbstractCapabilitiesStructure):
    topic_filtering: Optional["SituationExchangeServiceCapabilitiesStructure.TopicFiltering"] = field(
        default=None,
        metadata={
            "name": "TopicFiltering",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_policy: Optional["SituationExchangeServiceCapabilitiesStructure.RequestPolicy"] = field(
        default=None,
        metadata={
            "name": "RequestPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_policy: Optional[CapabilitySubscriptionPolicyStructure] = field(
        default=None,
        metadata={
            "name": "SubscriptionPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_control: Optional["SituationExchangeServiceCapabilitiesStructure.AccessControl"] = field(
        default=None,
        metadata={
            "name": "AccessControl",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    response_features: Optional["SituationExchangeServiceCapabilitiesStructure.ResponseFeatures"] = field(
        default=None,
        metadata={
            "name": "ResponseFeatures",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TopicFiltering:
        default_preview_interval: XmlDuration = field(
            default=XmlDuration("PT60M"),
            metadata={
                "name": "DefaultPreviewInterval",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_facility_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByFacilityRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_location_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByLocationRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_vehicle_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByVehicleRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_mode: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByMode",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_network_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByNetworkRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_stop_point_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByStopPointRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_stop_place_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByStopPlaceRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_vehicle_journey_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByVehicleJourneyRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_connection_link_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByConnectionLinkRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_interchange_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByInterchangeRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_specific_need: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterBySpecificNeed",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_keyword: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByKeyword",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class RequestPolicy(CapabilityRequestPolicyStructure):
        has_maximum_number_of_situations: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasMaximumNumberOfSituations",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class AccessControl(CapabilityAccessControlStructure):
        check_operator_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "CheckOperatorRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        check_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "CheckLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class ResponseFeatures:
        pass


@dataclass
class SituationExchangeServicePermissionStructure(AbstractPermissionStructure):
    operator_permissions: Optional[OperatorPermissions] = field(
        default=None,
        metadata={
            "name": "OperatorPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    line_permissions: Optional[LinePermissions] = field(
        default=None,
        metadata={
            "name": "LinePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class SituationRefStructure:
    situation_simple_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SituationSimpleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_full_ref: Optional[SituationFullRef] = field(
        default=None,
        metadata={
            "name": "SituationFullRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopLineNoticeCancellation(StopLineNoticeCancellationStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopMonitoringCapabilitiesRequest(ServiceCapabilitiesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopMonitoringMultipleRequestStructure(AbstractFunctionalServiceRequestStructure):
    stop_monitoring_filter: List[StopMonitoringFilterStructure] = field(
        default_factory=list,
        metadata={
            "name": "StopMonitoringFIlter",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class StopMonitoringRequestStructure(AbstractFunctionalServiceRequestStructure):
    preview_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "PreviewInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    start_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "StartTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_visit_types: Optional[StopVisitTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "StopVisitTypes",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_translations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTranslations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_stop_visits: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaximumStopVisits",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    minimum_stop_visits_per_line: Optional[int] = field(
        default=None,
        metadata={
            "name": "MinimumStopVisitsPerLine",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    minimum_stop_visits_per_line_via: Optional[int] = field(
        default=None,
        metadata={
            "name": "MinimumStopVisitsPerLineVia",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_text_length: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaximumTextLength",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_detail_level: Optional[StopMonitoringDetailEnumeration] = field(
        default=None,
        metadata={
            "name": "StopMonitoringDetailLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_situations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeSituations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_number_of_calls: Optional["StopMonitoringRequestStructure.MaximumNumberOfCalls"] = field(
        default=None,
        metadata={
            "name": "MaximumNumberOfCalls",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )

    @dataclass
    class MaximumNumberOfCalls:
        previous: Optional[int] = field(
            default=None,
            metadata={
                "name": "Previous",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        onwards: Optional[int] = field(
            default=None,
            metadata={
                "name": "Onwards",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class StopMonitoringServiceCapabilitiesStructure(AbstractCapabilitiesStructure):
    topic_filtering: Optional["StopMonitoringServiceCapabilitiesStructure.TopicFiltering"] = field(
        default=None,
        metadata={
            "name": "TopicFiltering",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_policy: Optional["StopMonitoringServiceCapabilitiesStructure.RequestPolicy"] = field(
        default=None,
        metadata={
            "name": "RequestPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_policy: Optional[CapabilitySubscriptionPolicyStructure] = field(
        default=None,
        metadata={
            "name": "SubscriptionPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_control: Optional[MonitoringCapabilityAccessControlStructure] = field(
        default=None,
        metadata={
            "name": "AccessControl",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    response_features: Optional["StopMonitoringServiceCapabilitiesStructure.ResponseFeatures"] = field(
        default=None,
        metadata={
            "name": "ResponseFeatures",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TopicFiltering:
        default_preview_interval: XmlDuration = field(
            default=XmlDuration("PT60M"),
            metadata={
                "name": "DefaultPreviewInterval",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        by_start_time: Optional[bool] = field(
            default=None,
            metadata={
                "name": "ByStartTime",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_monitoring_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByMonitoringRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        filter_by_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        filter_by_direction_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByDirectionRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_destination: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByDestination",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_visit_type: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByVisitType",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class RequestPolicy(StopMonitoringCapabilityRequestPolicyStructure):
        has_detail_level: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasDetailLevel",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        default_detail_level: Optional[StopMonitoringDetailEnumeration] = field(
            default=None,
            metadata={
                "name": "DefaultDetailLevel",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_maximum_visits: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasMaximumVisits",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_minimum_visits_per_line: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasMinimumVisitsPerLine",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_minimum_visits_per_via: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasMinimumVisitsPerVia",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_number_of_onwards_calls: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasNumberOfOnwardsCalls",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_number_of_previous_calls: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasNumberOfPreviousCalls",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class ResponseFeatures:
        has_line_notices: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasLineNotices",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_situations: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasSituations",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class StopMonitoringServicePermissionStructure(AbstractPermissionStructure):
    operator_permissions: Optional[OperatorPermissions] = field(
        default=None,
        metadata={
            "name": "OperatorPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    line_permissions: Optional[LinePermissions] = field(
        default=None,
        metadata={
            "name": "LinePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    stop_monitor_permissions: Optional["StopMonitoringServicePermissionStructure.StopMonitorPermissions"] = field(
        default=None,
        metadata={
            "name": "StopMonitorPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class StopMonitorPermissions:
        allow_all: Optional[bool] = field(
            default=None,
            metadata={
                "name": "AllowAll",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        stop_monitor_permission: List[StopMonitorPermissionStructure] = field(
            default_factory=list,
            metadata={
                "name": "StopMonitorPermission",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class StopNoticeCancellation(StopNoticeCancellationStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopPointsDiscoveryRequestStructure(AbstractDiscoveryRequestStructure):
    bounding_box: Optional[BoundingBoxStructure] = field(
        default=None,
        metadata={
            "name": "BoundingBox",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    circle: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "Circle",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_points_detail_level: Optional[StopPointsDetailEnumeration] = field(
        default=None,
        metadata={
            "name": "StopPointsDetailLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class StopTimetableCapabilitiesRequest(ServiceCapabilitiesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopTimetableRequestStructure(AbstractFunctionalServiceRequestStructure):
    departure_window: Optional[ClosedTimestampRangeStructure] = field(
        default=None,
        metadata={
            "name": "DepartureWindow",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_translations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTranslations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class StopTimetableServiceCapabilitiesStructure(AbstractCapabilitiesStructure):
    topic_filtering: Optional["StopTimetableServiceCapabilitiesStructure.TopicFiltering"] = field(
        default=None,
        metadata={
            "name": "TopicFiltering",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_policy: Optional[StopTimetableCapabilityRequestPolicyStructure] = field(
        default=None,
        metadata={
            "name": "RequestPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_control: Optional["StopTimetableServiceCapabilitiesStructure.AccessControl"] = field(
        default=None,
        metadata={
            "name": "AccessControl",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TopicFiltering:
        filter_by_monitoring_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByMonitoringRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        filter_by_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        filter_by_direction_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByDirectionRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class AccessControl(CapabilityAccessControlStructure):
        check_operator_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "CheckOperatorRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        check_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "CheckLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        check_monitoring_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "CheckMonitoringRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class StopTimetableServicePermissionStructure(AbstractPermissionStructure):
    operator_permissions: Optional[OperatorPermissions] = field(
        default=None,
        metadata={
            "name": "OperatorPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    line_permissions: Optional[LinePermissions] = field(
        default=None,
        metadata={
            "name": "LinePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    stop_monitor_permissions: Optional["StopTimetableServicePermissionStructure.StopMonitorPermissions"] = field(
        default=None,
        metadata={
            "name": "StopMonitorPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class StopMonitorPermissions:
        allow_all: Optional[bool] = field(
            default=None,
            metadata={
                "name": "AllowAll",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        stop_monitor_permission: List[StopMonitorPermissionStructure] = field(
            default_factory=list,
            metadata={
                "name": "StopMonitorPermission",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class SummaryContentStructure:
    summary_text: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "SummaryText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class TerminateSubscriptionRequest(TerminateSubscriptionRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class TerminationResponseStatusStructure:
    response_timestamp: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ResponseTimestamp",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_message_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestMessageRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscriber_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriberRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_filter_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriptionFilterRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriptionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional["TerminationResponseStatusStructure.ErrorCondition"] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class ErrorCondition:
        capability_not_supported_error: Optional[CapabilityNotSupportedError] = field(
            default=None,
            metadata={
                "name": "CapabilityNotSupportedError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        unknown_subscriber_error: Optional[UnknownSubscriberError] = field(
            default=None,
            metadata={
                "name": "UnknownSubscriberError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        unknown_subscription_error: Optional[UnknownSubscriptionError] = field(
            default=None,
            metadata={
                "name": "UnknownSubscriptionError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        other_error: Optional[OtherError] = field(
            default=None,
            metadata={
                "name": "OtherError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        description: Optional[str] = field(
            default=None,
            metadata={
                "name": "Description",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class TimetabledFeederArrivalCancellationStructure(AbstractReferencingItemStructure):
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "VisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_name: List[StopPointName] = field(
        default_factory=list,
        metadata={
            "name": "StopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "VehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    journey_pattern_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPatternRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "JourneyPatternName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_lines_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupOfLinesRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding: Optional[BrandingStructure] = field(
        default=None,
        metadata={
            "name": "Branding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Reason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TimetabledStopVisitCancellationStructure(AbstractReferencingItemStructure):
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "VisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPatternRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "JourneyPatternName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_lines_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupOfLinesRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding: Optional[BrandingStructure] = field(
        default=None,
        metadata={
            "name": "Branding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Reason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ToServiceJourneyInterchangeStructure:
    interchange_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extra_interchange: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ExtraInterchange",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    cancellation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason_for_removal: Optional[ReasonForRemoval] = field(
        default=None,
        metadata={
            "name": "ReasonForRemoval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_ref: Optional[FeederRef] = field(
        default=None,
        metadata={
            "name": "FeederRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_arrival_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FeederArrivalStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "FeederStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time_of_feeder: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTimeOfFeeder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_ref: Optional[DistributorRef] = field(
        default=None,
        metadata={
            "name": "DistributorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    distributor_departure_stop_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DistributorDepartureStopRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    distributor_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_stop_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorStopOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time_of_distributor: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTimeOfDistributor",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stay_seated: Optional[bool] = field(
        default=None,
        metadata={
            "name": "StaySeated",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    guaranteed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advertised: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Advertised",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_automatic_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumAutomaticWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    minimum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MinimumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TypeOfValue(TypeOfValueStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class TypeOfVehicleFuelStructure:
    type_of_fuel: Optional[TypeOfFuelEnumeration] = field(
        default=None,
        metadata={
            "name": "TypeOfFuel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    other_type_of_fuel: Optional[TypeOfValueStructure] = field(
        default=None,
        metadata={
            "name": "OtherTypeOfFuel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class VehicleActivityCancellationStructure(AbstractReferencingItemStructure):
    vehicle_monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleMonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "VehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPatternRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "JourneyPatternName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_lines_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupOfLinesRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding: Optional[BrandingStructure] = field(
        default=None,
        metadata={
            "name": "Branding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Reason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class VehicleFeature(VehicleFeaturesStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class VehicleFeaturesRequestStructure(AbstractDiscoveryRequestStructure):
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class VehicleMonitoringCapabilitiesRequest(ServiceCapabilitiesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class VehicleMonitoringRequestStructure(AbstractFunctionalServiceRequestStructure):
    vehicle_monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleMonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_translations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeTranslations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_vehicles: Optional[int] = field(
        default=None,
        metadata={
            "name": "MaximumVehicles",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_monitoring_detail_level: Optional[VehicleMonitoringDetailEnumeration] = field(
        default=None,
        metadata={
            "name": "VehicleMonitoringDetailLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_number_of_calls: Optional["VehicleMonitoringRequestStructure.MaximumNumberOfCalls"] = field(
        default=None,
        metadata={
            "name": "MaximumNumberOfCalls",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_situations: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeSituations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )

    @dataclass
    class MaximumNumberOfCalls:
        previous: Optional[int] = field(
            default=None,
            metadata={
                "name": "Previous",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        onwards: Optional[int] = field(
            default=None,
            metadata={
                "name": "Onwards",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class VehicleMonitoringServiceCapabilitiesStructure(AbstractCapabilitiesStructure):
    topic_filtering: Optional["VehicleMonitoringServiceCapabilitiesStructure.TopicFiltering"] = field(
        default=None,
        metadata={
            "name": "TopicFiltering",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_policy: Optional["VehicleMonitoringServiceCapabilitiesStructure.RequestPolicy"] = field(
        default=None,
        metadata={
            "name": "RequestPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_policy: Optional[CapabilitySubscriptionPolicyStructure] = field(
        default=None,
        metadata={
            "name": "SubscriptionPolicy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_control: Optional["VehicleMonitoringServiceCapabilitiesStructure.AccessControl"] = field(
        default=None,
        metadata={
            "name": "AccessControl",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    response_features: Optional["VehicleMonitoringServiceCapabilitiesStructure.ResponseFeatures"] = field(
        default=None,
        metadata={
            "name": "ResponseFeatures",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TopicFiltering:
        default_preview_interval: XmlDuration = field(
            default=XmlDuration("PT60M"),
            metadata={
                "name": "DefaultPreviewInterval",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_vehicle_monitoring_ref: bool = field(
            init=False,
            default=True,
            metadata={
                "name": "FilterByVehicleMonitoringRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_vehicle_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByVehicleRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        filter_by_direction_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "FilterByDirectionRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class RequestPolicy(CapabilityRequestPolicyStructure):
        has_detail_level: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasDetailLevel",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        default_detail_level: Optional[VehicleMonitoringDetailEnumeration] = field(
            default=None,
            metadata={
                "name": "DefaultDetailLevel",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_maximum_vehicles: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasMaximumVehicles",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_maximum_number_of_calls: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasMaximumNumberOfCalls",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_number_of_onwards_calls: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasNumberOfOnwardsCalls",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_number_of_previous_calls: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasNumberOfPreviousCalls",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class AccessControl(CapabilityAccessControlStructure):
        check_operator_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "CheckOperatorRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        check_line_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "CheckLineRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        check_vehicle_monitoring_ref: Optional[bool] = field(
            default=None,
            metadata={
                "name": "CheckVehicleMonitoringRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class ResponseFeatures:
        has_location: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasLocation",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        has_situations: Optional[bool] = field(
            default=None,
            metadata={
                "name": "HasSituations",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class VehicleMonitoringServicePermissionStructure(AbstractPermissionStructure):
    operator_permissions: Optional[OperatorPermissions] = field(
        default=None,
        metadata={
            "name": "OperatorPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    line_permissions: Optional[LinePermissions] = field(
        default=None,
        metadata={
            "name": "LinePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    vehicle_monitoring_permissions: Optional["VehicleMonitoringServicePermissionStructure.VehicleMonitoringPermissions"] = field(
        default=None,
        metadata={
            "name": "VehicleMonitoringPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class VehicleMonitoringPermissions:
        allow_all: Optional[bool] = field(
            default=None,
            metadata={
                "name": "AllowAll",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        vehicle_monitor_permission: List[VehicleMonitorPermissionStructure] = field(
            default_factory=list,
            metadata={
                "name": "VehicleMonitorPermission",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class VehicleOccupancyStructure:
    compound_train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CompoundTrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_component_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainComponentRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    entrance_to_vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "EntranceToVehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    fare_class: Optional[FareClassEnumeration] = field(
        default=None,
        metadata={
            "name": "FareClass",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    passenger_category: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "PassengerCategory",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    occupancy_level: Optional[OccupancyEnumeration] = field(
        default=None,
        metadata={
            "name": "OccupancyLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    occupancy_percentage: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "OccupancyPercentage",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_inclusive": Decimal("0"),
        }
    )
    alighting_count: Optional[int] = field(
        default=None,
        metadata={
            "name": "AlightingCount",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    boarding_count: Optional[int] = field(
        default=None,
        metadata={
            "name": "BoardingCount",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    onboard_count: Optional[int] = field(
        default=None,
        metadata={
            "name": "OnboardCount",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    special_places_occupied: Optional[int] = field(
        default=None,
        metadata={
            "name": "SpecialPlacesOccupied",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    pushchairs_onboard_count: Optional[int] = field(
        default=None,
        metadata={
            "name": "PushchairsOnboardCount",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    wheelchairs_onboard_count: Optional[int] = field(
        default=None,
        metadata={
            "name": "WheelchairsOnboardCount",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    prams_onboard_count: Optional[int] = field(
        default=None,
        metadata={
            "name": "PramsOnboardCount",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    bicycle_onboard_count: Optional[int] = field(
        default=None,
        metadata={
            "name": "BicycleOnboardCount",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    total_number_of_reserved_seats: Optional[int] = field(
        default=None,
        metadata={
            "name": "TotalNumberOfReservedSeats",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    group_reservation: List[GroupReservationStructure] = field(
        default_factory=list,
        metadata={
            "name": "GroupReservation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ViaNameStructure(PlaceNameStructure):
    via_priority: Optional[int] = field(
        default=None,
        metadata={
            "name": "ViaPriority",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AlertCmethod2Linear(AlertClinear):
    class Meta:
        name = "AlertCMethod2Linear"

    alert_cdirection: Optional[AlertCdirection] = field(
        default=None,
        metadata={
            "name": "alertCDirection",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod2_primary_point_location: Optional[AlertCmethod2PrimaryPointLocation] = field(
        default=None,
        metadata={
            "name": "alertCMethod2PrimaryPointLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod2_secondary_point_location: Optional[AlertCmethod2SecondaryPointLocation] = field(
        default=None,
        metadata={
            "name": "alertCMethod2SecondaryPointLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod2_linear_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCMethod2LinearExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AlertCmethod2Point(AlertCpoint):
    class Meta:
        name = "AlertCMethod2Point"

    alert_cdirection: Optional[AlertCdirection] = field(
        default=None,
        metadata={
            "name": "alertCDirection",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod2_primary_point_location: Optional[AlertCmethod2PrimaryPointLocation] = field(
        default=None,
        metadata={
            "name": "alertCMethod2PrimaryPointLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod2_point_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCMethod2PointExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AlertCmethod4Linear(AlertClinear):
    class Meta:
        name = "AlertCMethod4Linear"

    alert_cdirection: Optional[AlertCdirection] = field(
        default=None,
        metadata={
            "name": "alertCDirection",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod4_primary_point_location: Optional[AlertCmethod4PrimaryPointLocation] = field(
        default=None,
        metadata={
            "name": "alertCMethod4PrimaryPointLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod4_secondary_point_location: Optional[AlertCmethod4SecondaryPointLocation] = field(
        default=None,
        metadata={
            "name": "alertCMethod4SecondaryPointLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod4_linear_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCMethod4LinearExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AlertCmethod4Point(AlertCpoint):
    class Meta:
        name = "AlertCMethod4Point"

    alert_cdirection: Optional[AlertCdirection] = field(
        default=None,
        metadata={
            "name": "alertCDirection",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod4_primary_point_location: Optional[AlertCmethod4PrimaryPointLocation] = field(
        default=None,
        metadata={
            "name": "alertCMethod4PrimaryPointLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    alert_cmethod4_point_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "alertCMethod4PointExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Area(Location):
    alert_carea: Optional[AlertCarea] = field(
        default=None,
        metadata={
            "name": "alertCArea",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    tpeg_area_location: Optional[TpegAreaLocation] = field(
        default=None,
        metadata={
            "name": "tpegAreaLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    area_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "areaExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class D2LogicalModel1:
    class Meta:
        name = "D2LogicalModel"

    exchange: Optional[Exchange] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    payload_publication: Optional[PayloadPublication] = field(
        default=None,
        metadata={
            "name": "payloadPublication",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    d2_logical_model_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "d2LogicalModelExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    model_base_version: str = field(
        init=False,
        default="2.0RC1",
        metadata={
            "name": "modelBaseVersion",
            "type": "Attribute",
        }
    )


@dataclass
class HumidityInformation(WeatherValue):
    humidity: Optional[Humidity] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    humidity_information_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "humidityInformationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class IndividualVehicleMeasurements(TrafficValue):
    vehicle_speed: Optional[VehicleSpeed] = field(
        default=None,
        metadata={
            "name": "vehicleSpeed",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_detection_time: Optional[VehicleDetectionTime] = field(
        default=None,
        metadata={
            "name": "vehicleDetectionTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_headway: Optional[VehicleHeadway] = field(
        default=None,
        metadata={
            "name": "vehicleHeadway",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    individual_vehicle_measurements_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "individualVehicleMeasurementsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class MeasurementSiteRecord:
    measurement_site_record_version: Optional[int] = field(
        default=None,
        metadata={
            "name": "measurementSiteRecordVersion",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    measurement_site_record_version_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "measurementSiteRecordVersionTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    computation_method: Optional[ComputationMethodEnum] = field(
        default=None,
        metadata={
            "name": "computationMethod",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    measurement_equipment_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "measurementEquipmentReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    measurement_equipment_type_used: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "measurementEquipmentTypeUsed",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    measurement_site_name: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "measurementSiteName",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    measurement_site_number_of_lanes: Optional[int] = field(
        default=None,
        metadata={
            "name": "measurementSiteNumberOfLanes",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    measurement_site_identification: Optional[str] = field(
        default=None,
        metadata={
            "name": "measurementSiteIdentification",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    measurement_side: Optional[DirectionEnum] = field(
        default=None,
        metadata={
            "name": "measurementSide",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    measurement_specific_characteristics: List["MeasurementSiteRecord.MeasurementSpecificCharacteristics"] = field(
        default_factory=list,
        metadata={
            "name": "measurementSpecificCharacteristics",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    measurement_site_location: Optional[Location] = field(
        default=None,
        metadata={
            "name": "measurementSiteLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    measurement_site_record_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "measurementSiteRecordExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )

    @dataclass
    class MeasurementSpecificCharacteristics(MeasurementSpecificCharacteristics):
        index: Optional[int] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "required": True,
            }
        )


@dataclass
class Point1(NetworkLocation):
    class Meta:
        name = "Point"

    tpeg_point_location: Optional[TpegPointLocation] = field(
        default=None,
        metadata={
            "name": "tpegPointLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    alert_cpoint: Optional[AlertCpoint] = field(
        default=None,
        metadata={
            "name": "alertCPoint",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    roadside_reference_point: Optional[RoadsideReferencePoint] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePoint",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    point_by_coordinates: Optional[PointByCoordinates] = field(
        default=None,
        metadata={
            "name": "pointByCoordinates",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    point_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "pointExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PollutionInformation(WeatherValue):
    pollution_measurement: List[PollutionMeasurement] = field(
        default_factory=list,
        metadata={
            "name": "pollutionMeasurement",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    pollution_information_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "pollutionInformationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PrecipitationInformation(WeatherValue):
    no_precipitation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "noPrecipitation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    precipitation_detail: Optional[PrecipitationDetail] = field(
        default=None,
        metadata={
            "name": "precipitationDetail",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    precipitation_information_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "precipitationInformationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PredefinedLocationSet:
    predefined_location_set_name: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "predefinedLocationSetName",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    predefined_location_set_version: Optional[int] = field(
        default=None,
        metadata={
            "name": "predefinedLocationSetVersion",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    predefined_location: List[PredefinedLocation] = field(
        default_factory=list,
        metadata={
            "name": "predefinedLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    predefined_location_set_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "predefinedLocationSetExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class RoadSurfaceConditionInformation(WeatherValue):
    road_surface_condition_measurements: Optional[RoadSurfaceConditionMeasurements] = field(
        default=None,
        metadata={
            "name": "roadSurfaceConditionMeasurements",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    road_surface_condition_information_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadSurfaceConditionInformationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class RoadsideReferencePointLinear:
    roadside_reference_point_primary_location: Optional[RoadsideReferencePointPrimaryLocation] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePointPrimaryLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    roadside_reference_point_secondary_location: Optional[RoadsideReferencePointSecondaryLocation] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePointSecondaryLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    roadside_reference_point_linear_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePointLinearExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class SiteMeasurements:
    measurement_site_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "measurementSiteReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    measurement_time_default: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "measurementTimeDefault",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    measured_value: List["SiteMeasurements.MeasuredValue"] = field(
        default_factory=list,
        metadata={
            "name": "measuredValue",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    site_measurements_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "siteMeasurementsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )

    @dataclass
    class MeasuredValue(MeasuredValue):
        index: Optional[int] = field(
            default=None,
            metadata={
                "type": "Attribute",
                "required": True,
            }
        )


@dataclass
class TemperatureInformation(WeatherValue):
    temperature: Optional[Temperature] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    temperature_information_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "temperatureInformationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegGeometricArea(TpegAreaLocation):
    radius: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    centre_point: Optional[PointCoordinates] = field(
        default=None,
        metadata={
            "name": "centrePoint",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    name: Optional[TpegAreaDescriptor] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    tpeg_geometric_area_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegGeometricAreaExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegIlcPointDescriptor(TpegPointDescriptor):
    tpeg_ilc_point_descriptor_type: Optional[TpegLoc03IlcPointDescriptorSubtypeEnum] = field(
        default=None,
        metadata={
            "name": "tpegIlcPointDescriptorType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_ilc_point_descriptor_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegIlcPointDescriptorExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegJunctionPointDescriptor(TpegPointDescriptor):
    tpeg_junction_point_descriptor_type: Optional[TpegLoc03JunctionPointDescriptorSubtypeEnum] = field(
        default=None,
        metadata={
            "name": "tpegJunctionPointDescriptorType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_junction_point_descriptor_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegJunctionPointDescriptorExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegNamedOnlyArea(TpegAreaLocation):
    name: List[TpegAreaDescriptor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    tpeg_named_only_area_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegNamedOnlyAreaExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegOtherPointDescriptor(TpegPointDescriptor):
    tpeg_other_point_descriptor_type: Optional[TpegLoc03OtherPointDescriptorSubtypeEnum] = field(
        default=None,
        metadata={
            "name": "tpegOtherPointDescriptorType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_other_point_descriptor_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegOtherPointDescriptorExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TrafficConcentration(TrafficValue):
    concentration: Optional[int] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    occupancy: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    traffic_concentration_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "trafficConcentrationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TrafficFlow(TrafficValue):
    axle_flow: Optional[int] = field(
        default=None,
        metadata={
            "name": "axleFlow",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    pcu_flow: Optional[int] = field(
        default=None,
        metadata={
            "name": "pcuFlow",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    percentage_long_vehicles: Optional[float] = field(
        default=None,
        metadata={
            "name": "percentageLongVehicles",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_flow: Optional[int] = field(
        default=None,
        metadata={
            "name": "vehicleFlow",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    traffic_flow_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "trafficFlowExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TrafficHeadway(TrafficValue):
    average_distance_headway: Optional[float] = field(
        default=None,
        metadata={
            "name": "averageDistanceHeadway",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    average_time_headway: Optional[float] = field(
        default=None,
        metadata={
            "name": "averageTimeHeadway",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    traffic_headway_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "trafficHeadwayExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TrafficSpeed(TrafficValue):
    average_vehicle_speed: Optional[float] = field(
        default=None,
        metadata={
            "name": "averageVehicleSpeed",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    speed_percentile: Optional[SpeedPercentile] = field(
        default=None,
        metadata={
            "name": "speedPercentile",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    traffic_speed_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "trafficSpeedExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Validity:
    validity_status: Optional[ValidityStatusEnum] = field(
        default=None,
        metadata={
            "name": "validityStatus",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    overrunning: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    validity_time_specification: Optional[OverallPeriod] = field(
        default=None,
        metadata={
            "name": "validityTimeSpecification",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    validity_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "validityExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class VisibilityInformation(WeatherValue):
    visibility: Optional[Visibility] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    visibility_information_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "visibilityInformationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class WindInformation(WeatherValue):
    wind: Optional[Wind] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    wind_information_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "windInformationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AccessibilityAssessmentStructure:
    mobility_impaired_access: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MobilityImpairedAccess",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
            "required": True,
        }
    )
    limitations: Optional["AccessibilityAssessmentStructure.Limitations"] = field(
        default=None,
        metadata={
            "name": "Limitations",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    suitabilities: Optional["AccessibilityAssessmentStructure.Suitabilities"] = field(
        default=None,
        metadata={
            "name": "Suitabilities",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/acsb",
        }
    )
    extensions: Optional[Extensions2] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )

    @dataclass
    class Limitations:
        accessibility_limitation: List[AccessibilityLimitationStructure] = field(
            default_factory=list,
            metadata={
                "name": "AccessibilityLimitation",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/acsb",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Suitabilities:
        suitability: List[SuitabilityStructure] = field(
            default_factory=list,
            metadata={
                "name": "Suitability",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/acsb",
                "min_occurs": 1,
            }
        )


@dataclass
class InstalledEquipmentStructure(AbstractEquipmentStructure):
    pass


@dataclass
class LinkProjectionStructure(AbstractProjection):
    line: Optional["LinkProjectionStructure.Line"] = field(
        default=None,
        metadata={
            "name": "Line",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )

    @dataclass
    class Line:
        point_projection: List[PointProjection] = field(
            default_factory=list,
            metadata={
                "name": "PointProjection",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/ifopt",
                "min_occurs": 2,
            }
        )


@dataclass
class ZoneProjectionStructure(AbstractProjection):
    boundary: List["ZoneProjectionStructure.Boundary"] = field(
        default_factory=list,
        metadata={
            "name": "Boundary",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
            "min_occurs": 1,
        }
    )

    @dataclass
    class Boundary:
        point_projection: List[PointProjection] = field(
            default_factory=list,
            metadata={
                "name": "PointProjection",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/ifopt",
                "min_occurs": 3,
            }
        )


@dataclass
class AbstractGml(AbstractGmltype):
    class Meta:
        name = "AbstractGML"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractGeometryType(AbstractGmltype):
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        }
    )
    srs_dimension: Optional[int] = field(
        default=None,
        metadata={
            "name": "srsDimension",
            "type": "Attribute",
        }
    )


@dataclass
class AbstractDiscoveryDeliveryStructure(ResponseStructure):
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional[ServiceDeliveryErrorConditionStructure] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    valid_until: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidUntil",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    shortest_possible_cycle: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ShortestPossibleCycle",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractServiceCapabilitiesResponseStructure(ResponseStructure):
    request_message_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestMessageRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional[ServiceDeliveryErrorConditionStructure] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AbstractServiceDeliveryStructure(ResponseStructure):
    request_message_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestMessageRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscriber_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriberRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_filter_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriptionFilterRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriptionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional[ServiceDeliveryErrorConditionStructure] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    valid_until: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidUntil",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    shortest_possible_cycle: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ShortestPossibleCycle",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    default_language: Optional[str] = field(
        default=None,
        metadata={
            "name": "DefaultLanguage",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AnnotatedStopPointRef(AnnotatedStopPointStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class CapabilitiesRequestStructure(AuthenticatedRequestStructure):
    address: Optional[str] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    requestor_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    delegator_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delegator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DelegatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    production_timetable_capabilities_request: Optional[ProductionTimetableCapabilitiesRequest] = field(
        default=None,
        metadata={
            "name": "ProductionTimetableCapabilitiesRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_timetable_capabilities_request: Optional[EstimatedTimetableCapabilitiesRequest] = field(
        default=None,
        metadata={
            "name": "EstimatedTimetableCapabilitiesRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_timetable_capabilities_request: Optional[StopTimetableCapabilitiesRequest] = field(
        default=None,
        metadata={
            "name": "StopTimetableCapabilitiesRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_capabilities_request: Optional[StopMonitoringCapabilitiesRequest] = field(
        default=None,
        metadata={
            "name": "StopMonitoringCapabilitiesRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_monitoring_capabilities_request: Optional[VehicleMonitoringCapabilitiesRequest] = field(
        default=None,
        metadata={
            "name": "VehicleMonitoringCapabilitiesRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_timetable_capabilities_request: Optional[ConnectionTimetableCapabilitiesRequest] = field(
        default=None,
        metadata={
            "name": "ConnectionTimetableCapabilitiesRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_capabilities_request: Optional[ConnectionMonitoringCapabilitiesRequest] = field(
        default=None,
        metadata={
            "name": "ConnectionMonitoringCapabilitiesRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_message_capabilities_request: Optional[GeneralMessageCapabilitiesRequest] = field(
        default=None,
        metadata={
            "name": "GeneralMessageCapabilitiesRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_monitoring_capabilities_request: Optional[FacilityMonitoringCapabilitiesRequest] = field(
        default=None,
        metadata={
            "name": "FacilityMonitoringCapabilitiesRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_exchange_capabilities_request: Optional[SituationExchangeCapabilitiesRequest] = field(
        default=None,
        metadata={
            "name": "SituationExchangeCapabilitiesRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class CheckStatusRequest(CheckStatusRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class CheckStatusResponse(CheckStatusResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionLinksRequest(ConnectionLinksDiscoveryRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionMonitoringPermissions:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    connection_monitoring_permission: List[ConnectionServicePermissionStructure] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringPermission",
            "type": "Element",
        }
    )


@dataclass
class ConnectionMonitoringRequest(ConnectionMonitoringRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionMonitoringServiceCapabilities(ConnectionMonitoringServiceCapabilitiesStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionTimetableRequest(ConnectionTimetableRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionTimetableServiceCapabilities(ConnectionTimetableServiceCapabilitiesStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class DataReadyAcknowledgement(DataReadyResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class DataReadyRequestStructure(AbstractNotificationStructure):
    pass


@dataclass
class DataReceivedAcknowledgement(DataReceivedResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class DataSupplyRequest(DataSupplyRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ErrorCondition(ErrorConditionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ErrorConditionElement(ErrorConditionElementStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EstimatedTimetablePermissions(PermissionsStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    estimated_timetable_permission: List[ConnectionServicePermissionStructure] = field(
        default_factory=list,
        metadata={
            "name": "EstimatedTimetablePermission",
            "type": "Element",
        }
    )


@dataclass
class EstimatedTimetableRequest(EstimatedTimetableRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EstimatedTimetableServiceCapabilities(EstimatedTimetableServiceCapabilitiesStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ExpectedDepartureOccupancy(VehicleOccupancyStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityMonitoringPermissions(PermissionsStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    facility_monitoring_permission: List[FacilityMonitoringServicePermissionStructure] = field(
        default_factory=list,
        metadata={
            "name": "FacilityMonitoringPermission",
            "type": "Element",
        }
    )


@dataclass
class FacilityMonitoringRequest(FacilityMonitoringRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityMonitoringServiceCapabilities(FacilityMonitoringServiceCapabilitiesStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityRequest(FacilityRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FeederItem(AbstractFeederItemStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class GeneralMessageRequest(GeneralMessageRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class GeneralMessageServiceCapabilities(GeneralMessageServiceCapabilitiesStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class HeartbeatNotification(HeartbeatNotificationStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class InfoChannelRequest(InfoChannelDiscoveryRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class LinesRequest(LinesDiscoveryRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class MonitoredFeederArrivalCancellationStructure(AbstractFeederItemStructure):
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "VehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    journey_pattern_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPatternRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "JourneyPatternName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_lines_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupOfLinesRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding: Optional[BrandingStructure] = field(
        default=None,
        metadata={
            "name": "Branding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Reason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class MonitoredStopVisitCancellation(MonitoredStopVisitCancellationStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class PreviousCallStructure(AbstractMonitoredCallStructure):
    vehicle_at_stop: Optional[bool] = field(
        default=None,
        metadata={
            "name": "VehicleAtStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ActualArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ActualDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ProductCategoriesRequest(ProductCategoriesDiscoveryRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ProductionTimetablePermission(ConnectionServicePermissionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ProductionTimetableRequest(ProductionTimetableRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ProductionTimetableServiceCapabilities(ProductionTimetableServiceCapabilitiesStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class RecordedDepartureOccupancy(VehicleOccupancyStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class RelatedCallStructure(AbstractCallStructure):
    aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ServiceDeliveryErrorConditionElement(ServiceDeliveryErrorConditionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ServiceFeaturesRequest(ServiceFeaturesDiscoveryRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SituationElementStructure(AbstractSituationElementStructure):
    references: Optional[ReferencesStructure] = field(
        default=None,
        metadata={
            "name": "References",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    source: Optional[SituationSourceStructure] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    versioned_at_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "VersionedAtTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class SituationExchangePermissions(PermissionsStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    situation_exchange_permission: List[SituationExchangeServicePermissionStructure] = field(
        default_factory=list,
        metadata={
            "name": "SituationExchangePermission",
            "type": "Element",
        }
    )


@dataclass
class SituationExchangeRequest(SituationExchangeRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SituationExchangeServiceCapabilities(SituationExchangeServiceCapabilitiesStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SituationRef(SituationRefStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StatusResponseStructure(ResponseStructure):
    request_message_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestMessageRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscriber_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriberRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_filter_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriptionFilterRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    subscription_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriptionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional[ServiceDeliveryErrorConditionStructure] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    valid_until: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidUntil",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    shortest_possible_cycle: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ShortestPossibleCycle",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopMonitoringMultipleRequest(StopMonitoringMultipleRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopMonitoringPermissions(PermissionsStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    stop_monitoring_permission: List[StopMonitoringServicePermissionStructure] = field(
        default_factory=list,
        metadata={
            "name": "StopMonitoringPermission",
            "type": "Element",
        }
    )


@dataclass
class StopMonitoringRequest(StopMonitoringRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopMonitoringServiceCapabilities(StopMonitoringServiceCapabilitiesStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopPointsRequest(StopPointsDiscoveryRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopTimetablePermissions(PermissionsStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    stop_timetable_permission: List[StopTimetableServicePermissionStructure] = field(
        default_factory=list,
        metadata={
            "name": "StopTimetablePermission",
            "type": "Element",
        }
    )


@dataclass
class StopTimetableRequest(StopTimetableRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopTimetableServiceCapabilities(StopTimetableServiceCapabilitiesStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SubscriptionTerminatedNotificationStructure(ProducerResponseStructure):
    subscriber_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "SubscriberRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "sequential": True,
        }
    )
    subscription_filter_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "SubscriptionFilterRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "sequential": True,
        }
    )
    subscription_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "SubscriptionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
            "sequential": True,
        }
    )
    errror_condition: Optional[ErrorConditionStructure] = field(
        default=None,
        metadata={
            "name": "ErrrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TargetedInterchangeStructure:
    interchange_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DistributorVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    distributor_connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DistributorConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_connection_link: Optional[ContextualisedConnectionLinkStructure] = field(
        default=None,
        metadata={
            "name": "DistributorConnectionLink",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stay_seated: Optional[bool] = field(
        default=None,
        metadata={
            "name": "StaySeated",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    guaranteed: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Guaranteed",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advertised: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Advertised",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_automatic_wait_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumAutomaticWaitTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    standard_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "StandardTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    minimum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MinimumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_transfer_time: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "MaximumTransferTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TerminateSubscriptionResponseStructure(ResponseEndpointStructure):
    termination_response_status: List[TerminationResponseStatusStructure] = field(
        default_factory=list,
        metadata={
            "name": "TerminationResponseStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TimetabledFeederArrivalCancellation(TimetabledFeederArrivalCancellationStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ValuesStructure:
    type_of_value: List[TypeOfValue] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfValue",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class VehicleFeaturesRequest(VehicleFeaturesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class VehicleMonitoringPermissions(PermissionsStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    vehicle_monitoring_permission: List[VehicleMonitoringServicePermissionStructure] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMonitoringPermission",
            "type": "Element",
        }
    )


@dataclass
class VehicleMonitoringRequest(VehicleMonitoringRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class VehicleMonitoringServiceCapabilities(VehicleMonitoringServiceCapabilitiesStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AreaDestination(Destination1):
    area: Optional[Area] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    area_destination_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "areaDestinationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class ElaboratedData:
    forecast: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    source: Optional[Source] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    validity: Optional[Validity] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    basic_data_value: Optional[BasicDataValue] = field(
        default=None,
        metadata={
            "name": "basicDataValue",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    elaborated_data_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "elaboratedDataExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Linear(NetworkLocation):
    tpeg_linear_location: Optional[TpegLinearLocation] = field(
        default=None,
        metadata={
            "name": "tpegLinearLocation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    alert_clinear: Optional[AlertClinear] = field(
        default=None,
        metadata={
            "name": "alertCLinear",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    roadside_reference_point_linear: Optional[RoadsideReferencePointLinear] = field(
        default=None,
        metadata={
            "name": "roadsideReferencePointLinear",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    linear_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "linearExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class MeasuredDataPublication(PayloadPublication):
    measurement_site_table_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "measurementSiteTableReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    header_information: Optional[HeaderInformation] = field(
        default=None,
        metadata={
            "name": "headerInformation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    site_measurements: List[SiteMeasurements] = field(
        default_factory=list,
        metadata={
            "name": "siteMeasurements",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    measured_data_publication_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "measuredDataPublicationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class MeasurementSiteTable:
    measurement_site_table_identification: Optional[str] = field(
        default=None,
        metadata={
            "name": "measurementSiteTableIdentification",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    measurement_site_table_version: Optional[int] = field(
        default=None,
        metadata={
            "name": "measurementSiteTableVersion",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    measurement_site_record: List[MeasurementSiteRecord] = field(
        default_factory=list,
        metadata={
            "name": "measurementSiteRecord",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    measurement_site_table_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "measurementSiteTableExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class PointDestination(Destination1):
    point: Optional[Point1] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    point_destination_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "pointDestinationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PredefinedLocationsPublication(PayloadPublication):
    header_information: Optional[HeaderInformation] = field(
        default=None,
        metadata={
            "name": "headerInformation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    predefined_location_set: List[PredefinedLocationSet] = field(
        default_factory=list,
        metadata={
            "name": "predefinedLocationSet",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    predefined_locations_publication_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "predefinedLocationsPublicationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class SituationRecord:
    situation_record_creation_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "situationRecordCreationReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    situation_record_creation_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "situationRecordCreationTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    situation_record_observation_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "situationRecordObservationTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    situation_record_version: Optional[int] = field(
        default=None,
        metadata={
            "name": "situationRecordVersion",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    situation_record_version_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "situationRecordVersionTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    situation_record_first_supplier_version_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "situationRecordFirstSupplierVersionTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    confidentiality_override: Optional[ConfidentialityValueEnum] = field(
        default=None,
        metadata={
            "name": "confidentialityOverride",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    probability_of_occurrence: Optional[ProbabilityOfOccurrenceEnum] = field(
        default=None,
        metadata={
            "name": "probabilityOfOccurrence",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    source: Optional[Source] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    validity: Optional[Validity] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    impact: Optional[Impact] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    cause: Optional[Cause] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    general_public_comment: List[Comment] = field(
        default_factory=list,
        metadata={
            "name": "generalPublicComment",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    non_general_public_comment: List[Comment] = field(
        default_factory=list,
        metadata={
            "name": "nonGeneralPublicComment",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    url_link: List[UrlLink] = field(
        default_factory=list,
        metadata={
            "name": "urlLink",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    group_of_locations: Optional[GroupOfLocations] = field(
        default=None,
        metadata={
            "name": "groupOfLocations",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    management: Optional[Management] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    situation_record_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "situationRecordExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class TpegJunction(TpegPoint):
    point_coordinates: Optional[PointCoordinates] = field(
        default=None,
        metadata={
            "name": "pointCoordinates",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    name: Optional[TpegJunctionPointDescriptor] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    ilc: List[TpegIlcPointDescriptor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
            "max_occurs": 3,
        }
    )
    other_name: List[TpegOtherPointDescriptor] = field(
        default_factory=list,
        metadata={
            "name": "otherName",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    tpeg_junction_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegJunctionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TpegNonJunctionPoint(TpegPoint):
    point_coordinates: Optional[PointCoordinates] = field(
        default=None,
        metadata={
            "name": "pointCoordinates",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    name: List[TpegOtherPointDescriptor] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    tpeg_non_junction_point_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegNonJunctionPointExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class D2LogicalModel(D2LogicalModel1):
    class Meta:
        name = "d2LogicalModel"
        namespace = "http://datex2.eu/schema/2_0RC1/2_0"


@dataclass
class LinkProjection(LinkProjectionStructure):
    class Meta:
        namespace = "http://www.ifopt.org.uk/ifopt"


@dataclass
class LocalServiceStructure(InstalledEquipmentStructure):
    validity_conditions: Optional[ValidityConditionsStructure] = field(
        default=None,
        metadata={
            "name": "ValidityConditions",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    feature_refs: Optional["LocalServiceStructure.FeatureRefs"] = field(
        default=None,
        metadata={
            "name": "FeatureRefs",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    extensions: Optional[Extensions2] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )

    @dataclass
    class FeatureRefs:
        feature_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "FeatureRef",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/ifopt",
            }
        )


@dataclass
class PlaceEquipmentStructure(InstalledEquipmentStructure):
    extensions: Optional[Extensions2] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )


@dataclass
class ZoneProjection(ZoneProjectionStructure):
    class Meta:
        namespace = "http://www.ifopt.org.uk/ifopt"


@dataclass
class AbstractGeometricPrimitiveType(AbstractGeometryType):
    pass


@dataclass
class AbstractGeometry(AbstractGeometryType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractDiscoveryDelivery(AbstractDiscoveryDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AbstractFunctionalServiceCapabilitiesResponse(AbstractServiceCapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AbstractFunctionalServiceDelivery(AbstractServiceDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AffectedPathLinkStructure:
    link_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "LinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    link_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "LinkName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accessibility_feature: Optional[AccessibilityFeatureEnumeration2] = field(
        default=None,
        metadata={
            "name": "AccessibilityFeature",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    link_direction: List[str] = field(
        default_factory=list,
        metadata={
            "name": "LinkDirection",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    link_projection: Optional[LinkProjectionStructure] = field(
        default=None,
        metadata={
            "name": "LinkProjection",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    offset: Optional[OffsetStructure] = field(
        default=None,
        metadata={
            "name": "Offset",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AffectedPlaceStructure:
    place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    private_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PrivateCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    place_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "PlaceName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    location: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "Location",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    place_category: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlaceCategory",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    equipment_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "EquipmentRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accessibility_assessment: Optional[AccessibilityAssessmentStructure] = field(
        default=None,
        metadata={
            "name": "AccessibilityAssessment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AffectedRoadStructure:
    road: Optional[RoadsideReferencePointLinear] = field(
        default=None,
        metadata={
            "name": "Road",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    link_projection: Optional[LinkProjectionStructure] = field(
        default=None,
        metadata={
            "name": "LinkProjection",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    offset: Optional[OffsetStructure] = field(
        default=None,
        metadata={
            "name": "Offset",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AffectedSectionStructure:
    section_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    indirect_section_ref: Optional["AffectedSectionStructure.IndirectSectionRef"] = field(
        default=None,
        metadata={
            "name": "IndirectSectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    link_projection: Optional[LinkProjectionStructure] = field(
        default=None,
        metadata={
            "name": "LinkProjection",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    offset: Optional[OffsetStructure] = field(
        default=None,
        metadata={
            "name": "Offset",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class IndirectSectionRef:
        first_stop_point_ref: Optional[str] = field(
            default=None,
            metadata={
                "name": "FirstStopPointRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        first_stop_place_ref: Optional[str] = field(
            default=None,
            metadata={
                "name": "FirstStopPlaceRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        first_quay_ref: Optional[str] = field(
            default=None,
            metadata={
                "name": "FirstQuayRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        intermediate_stop_point_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "IntermediateStopPointRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )
        intermediate_stop_place_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "IntermediateStopPlaceRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )
        intermediate_quay_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "IntermediateQuayRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )
        last_stop_point_ref: Optional[str] = field(
            default=None,
            metadata={
                "name": "LastStopPointRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        last_stop_place_ref: Optional[str] = field(
            default=None,
            metadata={
                "name": "LastStopPlaceRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        last_quay_ref: Optional[str] = field(
            default=None,
            metadata={
                "name": "LastQuayRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class AffectedStopPlaceElementStructure:
    accessibility_assessment: Optional[AccessibilityAssessmentStructure] = field(
        default=None,
        metadata={
            "name": "AccessibilityAssessment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AffectedVehicleStructure:
    vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    vehicle_registration_number_plate: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VehicleRegistrationNumberPlate",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    phone_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "PhoneNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    ipaddress: Optional[str] = field(
        default=None,
        metadata={
            "name": "IPAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    radio_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "RadioAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    location: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "Location",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    current_location: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "CurrentLocation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accessibility_assessment: Optional[AccessibilityAssessmentStructure] = field(
        default=None,
        metadata={
            "name": "AccessibilityAssessment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProductCategoryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ServiceFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VehicleFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_block_part: List[TrainBlockPartStructure] = field(
        default_factory=list,
        metadata={
            "name": "TrainBlockPart",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    block_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BlockRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    course_of_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CourseOfJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    in_congestion: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InCongestion",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    in_panic: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InPanic",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    headway_service: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HeadwayService",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class CapabilitiesRequest(CapabilitiesRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionLinksDeliveryStructure(AbstractDiscoveryDeliveryStructure):
    annotated_connection_link_ref: List[AnnotatedConnectionLinkRef] = field(
        default_factory=list,
        metadata={
            "name": "AnnotatedConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        init=False,
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ConnectionMonitoringCapabilitiesResponseStructure(AbstractServiceCapabilitiesResponseStructure):
    connection_monitoring_service_capabilities: Optional[ConnectionMonitoringServiceCapabilities] = field(
        default=None,
        metadata={
            "name": "ConnectionMonitoringServiceCapabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_permissions: Optional[ConnectionMonitoringPermissions] = field(
        default=None,
        metadata={
            "name": "ConnectionMonitoringPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ConnectionMonitoringSubscriptionRequestStructure(AbstractSubscriptionStructure):
    connection_monitoring_request: Optional[ConnectionMonitoringRequest] = field(
        default=None,
        metadata={
            "name": "ConnectionMonitoringRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    change_before_updates: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ChangeBeforeUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ConnectionTimetableCapabilitiesResponseStructure(AbstractServiceCapabilitiesResponseStructure):
    connection_timetable_service_capabilities: Optional[ConnectionTimetableServiceCapabilities] = field(
        default=None,
        metadata={
            "name": "ConnectionTimetableServiceCapabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_timetable_permissions: Optional["ConnectionTimetableCapabilitiesResponseStructure.ConnectionTimetablePermissions"] = field(
        default=None,
        metadata={
            "name": "ConnectionTimetablePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )

    @dataclass
    class ConnectionTimetablePermissions(PermissionsStructure):
        connection_timetable_permission: List[ConnectionServicePermissionStructure] = field(
            default_factory=list,
            metadata={
                "name": "ConnectionTimetablePermission",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class ConnectionTimetableSubscriptionStructure(AbstractSubscriptionStructure):
    connection_timetable_request: Optional[ConnectionTimetableRequest] = field(
        default=None,
        metadata={
            "name": "ConnectionTimetableRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DataReadyNotification(DataReadyRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EstimatedTimetableCapabilitiesResponseStructure(AbstractServiceCapabilitiesResponseStructure):
    estimated_timetable_service_capabilities: Optional[EstimatedTimetableServiceCapabilities] = field(
        default=None,
        metadata={
            "name": "EstimatedTimetableServiceCapabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_timetable_permissions: Optional[EstimatedTimetablePermissions] = field(
        default=None,
        metadata={
            "name": "EstimatedTimetablePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class EstimatedTimetableSubscriptionStructure(AbstractSubscriptionStructure):
    estimated_timetable_request: Optional[EstimatedTimetableRequest] = field(
        default=None,
        metadata={
            "name": "EstimatedTimetableRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    incremental_updates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncrementalUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    change_before_updates: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ChangeBeforeUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    skip_recorded_call_updates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SkipRecordedCallUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    include_only_recorded_call_updates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncludeOnlyRecordedCallUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class FacilityChangeStructure:
    equipment_availability: Optional[EquipmentAvailabilityStructure] = field(
        default=None,
        metadata={
            "name": "EquipmentAvailability",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: Optional[SituationRef] = field(
        default=None,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    mobility_disruption: Optional[MobilityDisruptionStructure] = field(
        default=None,
        metadata={
            "name": "MobilityDisruption",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class FacilityMonitoringCapabilitiesResponseStructure(AbstractServiceCapabilitiesResponseStructure):
    facility_monitoring_service_capabilities: Optional[FacilityMonitoringServiceCapabilities] = field(
        default=None,
        metadata={
            "name": "FacilityMonitoringServiceCapabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_monitoring_permissions: Optional[FacilityMonitoringPermissions] = field(
        default=None,
        metadata={
            "name": "FacilityMonitoringPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class FacilityMonitoringSubscriptionStructure(AbstractSubscriptionStructure):
    facility_monitoring_request: Optional[FacilityMonitoringRequest] = field(
        default=None,
        metadata={
            "name": "FacilityMonitoringRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    incremental_updates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncrementalUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class FacilityStatusStructure:
    status: Optional[FacilityStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    description: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accessibility_assessment: Optional[AccessibilityAssessmentStructure] = field(
        default=None,
        metadata={
            "name": "AccessibilityAssessment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class FacilityStructure:
    facility_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "FacilityCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_class: List[FacilityCategoryEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "FacilityClass",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    features: Optional["FacilityStructure.Features"] = field(
        default=None,
        metadata={
            "name": "Features",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    owner_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OwnerRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    owner_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "OwnerName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    validity_condition: Optional[MonitoringValidityConditionStructure] = field(
        default=None,
        metadata={
            "name": "ValidityCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_location: Optional[FacilityLocationStructure] = field(
        default=None,
        metadata={
            "name": "FacilityLocation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    limitations: Optional["FacilityStructure.Limitations"] = field(
        default=None,
        metadata={
            "name": "Limitations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    suitabilities: Optional["FacilityStructure.Suitabilities"] = field(
        default=None,
        metadata={
            "name": "Suitabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accessibility_assessment: Optional[AccessibilityAssessmentStructure] = field(
        default=None,
        metadata={
            "name": "AccessibilityAssessment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Features:
        feature: List[AllFacilitiesFeatureStructure] = field(
            default_factory=list,
            metadata={
                "name": "Feature",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Limitations:
        wheelchair_access: Optional[AccessibilityEnumeration] = field(
            default=None,
            metadata={
                "name": "WheelchairAccess",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/acsb",
                "required": True,
            }
        )
        step_free_access: Optional[AccessibilityEnumeration] = field(
            default=None,
            metadata={
                "name": "StepFreeAccess",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/acsb",
            }
        )
        escalator_free_access: Optional[AccessibilityEnumeration] = field(
            default=None,
            metadata={
                "name": "EscalatorFreeAccess",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/acsb",
            }
        )
        lift_free_access: Optional[AccessibilityEnumeration] = field(
            default=None,
            metadata={
                "name": "LiftFreeAccess",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/acsb",
            }
        )
        audible_signals_available: Optional[AccessibilityEnumeration] = field(
            default=None,
            metadata={
                "name": "AudibleSignalsAvailable",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/acsb",
            }
        )
        visual_signs_available: Optional[AccessibilityEnumeration] = field(
            default=None,
            metadata={
                "name": "VisualSignsAvailable",
                "type": "Element",
                "namespace": "http://www.ifopt.org.uk/acsb",
            }
        )

    @dataclass
    class Suitabilities:
        suitability: List[SuitabilityStructure] = field(
            default_factory=list,
            metadata={
                "name": "Suitability",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class FormationStatusStructure:
    status: Optional[FormationChangeEnumeration] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    description: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accessibility_assessment: Optional[AccessibilityAssessmentStructure] = field(
        default=None,
        metadata={
            "name": "AccessibilityAssessment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class GeneralMessageCapabilitiesResponseStructure(AbstractServiceCapabilitiesResponseStructure):
    general_message_service_capabilities: Optional[GeneralMessageServiceCapabilities] = field(
        default=None,
        metadata={
            "name": "GeneralMessageServiceCapabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_message_permissions: Optional[GeneralMessagePermissions] = field(
        default=None,
        metadata={
            "name": "GeneralMessagePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class GeneralMessageSubscriptionStructure(AbstractSubscriptionStructure):
    general_message_request: Optional[GeneralMessageRequest] = field(
        default=None,
        metadata={
            "name": "GeneralMessageRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class InfoChannelDeliveryStructure(AbstractDiscoveryDeliveryStructure):
    info_channel: List[InfoChannel] = field(
        default_factory=list,
        metadata={
            "name": "InfoChannel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class InfoMessageStructure(AbstractIdentifiedItemStructure):
    info_message_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "InfoMessageIdentifier",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    info_message_version: Optional[int] = field(
        default=None,
        metadata={
            "name": "InfoMessageVersion",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    info_channel_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InfoChannelRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    valid_until_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidUntilTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: Optional[SituationRef] = field(
        default=None,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    content: Optional[object] = field(
        default=None,
        metadata={
            "name": "Content",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    format_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "formatRef",
            "type": "Attribute",
        }
    )


@dataclass
class MonitoredFeederArrivalCancellation(MonitoredFeederArrivalCancellationStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class NoteStructure:
    situation_ref: Optional[SituationRef] = field(
        default=None,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_simple_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SituationSimpleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_full_ref: Optional[SituationFullRef] = field(
        default=None,
        metadata={
            "name": "SituationFullRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    note: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Note",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class OptionalTrafficElementStructure:
    situation_record_creation_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "situationRecordCreationReference",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
            "max_length": 1024,
        }
    )
    situation_record_creation_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "situationRecordCreationTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_record_observation_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "situationRecordObservationTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_record_version: Optional[int] = field(
        default=None,
        metadata={
            "name": "situationRecordVersion",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_record_version_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "situationRecordVersionTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_record_first_supplier_version_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "situationRecordFirstSupplierVersionTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    probability_of_occurrence: Optional[ProbabilityOfOccurrenceEnum] = field(
        default=None,
        metadata={
            "name": "probabilityOfOccurrence",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    source: Optional[Source] = field(
        default=None,
        metadata={
            "name": "Source",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    validity: Optional[Validity] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    impact: Optional[Impact] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    cause: Optional[Cause] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_public_comment: List[Comment] = field(
        default_factory=list,
        metadata={
            "name": "generalPublicComment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    non_general_public_comment: List[Comment] = field(
        default_factory=list,
        metadata={
            "name": "nonGeneralPublicComment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_locations: Optional[GroupOfLocations] = field(
        default=None,
        metadata={
            "name": "groupOfLocations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    management: Optional[Management] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_record_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "situationRecordExtension",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    traffic_element_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "trafficElementExtension",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PreviousCallsStructure:
    previous_call: List[PreviousCallStructure] = field(
        default_factory=list,
        metadata={
            "name": "PreviousCall",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class ProductCategoriesDeliveryStructure(AbstractDiscoveryDeliveryStructure):
    product_category: List[ProductCategory] = field(
        default_factory=list,
        metadata={
            "name": "ProductCategory",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ProductionTimetablePermissions(PermissionsStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    production_timetable_permission: List[ProductionTimetablePermission] = field(
        default_factory=list,
        metadata={
            "name": "ProductionTimetablePermission",
            "type": "Element",
        }
    )


@dataclass
class ProductionTimetableSubscriptionStructure(AbstractSubscriptionStructure):
    production_timetable_request: Optional[ProductionTimetableRequest] = field(
        default=None,
        metadata={
            "name": "ProductionTimetableRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    incremental_updates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncrementalUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class RelatedJourneyStructure(ConnectingJourneyRefStructure):
    call_info: Optional[RelatedCallStructure] = field(
        default=None,
        metadata={
            "name": "CallInfo",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_parts: Optional["RelatedJourneyStructure.JourneyParts"] = field(
        default=None,
        metadata={
            "name": "JourneyParts",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class JourneyParts:
        journey_part_info: List[RelatedJourneyPartStructure] = field(
            default_factory=list,
            metadata={
                "name": "JourneyPartInfo",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class ResponseStatus(StatusResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ServiceFeaturesDeliveryStructure(AbstractDiscoveryDeliveryStructure):
    service_feature: List[ServiceFeature] = field(
        default_factory=list,
        metadata={
            "name": "ServiceFeature",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ServiceRequestStructure(ContextualisedRequestStructure):
    production_timetable_request: List[ProductionTimetableRequest] = field(
        default_factory=list,
        metadata={
            "name": "ProductionTimetableRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_timetable_request: List[EstimatedTimetableRequest] = field(
        default_factory=list,
        metadata={
            "name": "EstimatedTimetableRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_timetable_request: List[StopTimetableRequest] = field(
        default_factory=list,
        metadata={
            "name": "StopTimetableRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_multiple_request: List[StopMonitoringMultipleRequest] = field(
        default_factory=list,
        metadata={
            "name": "StopMonitoringMultipleRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_request: List[StopMonitoringRequest] = field(
        default_factory=list,
        metadata={
            "name": "StopMonitoringRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_monitoring_request: List[VehicleMonitoringRequest] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMonitoringRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_timetable_request: List[ConnectionTimetableRequest] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionTimetableRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_request: List[ConnectionMonitoringRequest] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_message_request: List[GeneralMessageRequest] = field(
        default_factory=list,
        metadata={
            "name": "GeneralMessageRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_monitoring_request: List[FacilityMonitoringRequest] = field(
        default_factory=list,
        metadata={
            "name": "FacilityMonitoringRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_exchange_request: List[SituationExchangeRequest] = field(
        default_factory=list,
        metadata={
            "name": "SituationExchangeRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class SituationExchangeCapabilitiesResponseStructure(AbstractServiceCapabilitiesResponseStructure):
    situation_exchange_service_capabilities: Optional[SituationExchangeServiceCapabilities] = field(
        default=None,
        metadata={
            "name": "SituationExchangeServiceCapabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_exchange_permissions: Optional[SituationExchangePermissions] = field(
        default=None,
        metadata={
            "name": "SituationExchangePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class SituationExchangeSubscriptionStructure(AbstractSubscriptionStructure):
    situation_exchange_request: Optional[SituationExchangeRequest] = field(
        default=None,
        metadata={
            "name": "SituationExchangeRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    incremental_updates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncrementalUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopLineNoticeStructure(AbstractIdentifiedItemStructure):
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    published_line_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_note: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "LineNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delivery_variant: List[DeliveryVariantStructure] = field(
        default_factory=list,
        metadata={
            "name": "DeliveryVariant",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: List[SituationRef] = field(
        default_factory=list,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopMonitoringCapabilitiesResponseStructure(AbstractServiceCapabilitiesResponseStructure):
    stop_monitoring_service_capabilities: Optional[StopMonitoringServiceCapabilities] = field(
        default=None,
        metadata={
            "name": "StopMonitoringServiceCapabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_permissions: Optional[StopMonitoringPermissions] = field(
        default=None,
        metadata={
            "name": "StopMonitoringPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class StopMonitoringSubscriptionStructure(AbstractSubscriptionStructure):
    stop_monitoring_request: Optional[StopMonitoringRequest] = field(
        default=None,
        metadata={
            "name": "StopMonitoringRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    incremental_updates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncrementalUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    change_before_updates: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ChangeBeforeUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopNoticeStructure(AbstractRequiredIdentifiedItemStructure):
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: List[SituationRef] = field(
        default_factory=list,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_note: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "StopNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopPointInPatternStructure(AnnotatedStopPointStructure):
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    onward_link_shape: Optional[LineShapeStructure] = field(
        default=None,
        metadata={
            "name": "OnwardLinkShape",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    link_projection_to_next_stop_point: Optional[LinkProjectionStructure] = field(
        default=None,
        metadata={
            "name": "LinkProjectionToNextStopPoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopPointsDeliveryStructure(AbstractDiscoveryDeliveryStructure):
    annotated_stop_point_ref: List[AnnotatedStopPointRef] = field(
        default_factory=list,
        metadata={
            "name": "AnnotatedStopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class StopTimetableCapabilitiesResponseStructure(AbstractServiceCapabilitiesResponseStructure):
    stop_timetable_service_capabilities: Optional[StopTimetableServiceCapabilities] = field(
        default=None,
        metadata={
            "name": "StopTimetableServiceCapabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_timetable_permissions: Optional[StopTimetablePermissions] = field(
        default=None,
        metadata={
            "name": "StopTimetablePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class StopTimetableSubscriptionStructure(AbstractSubscriptionStructure):
    stop_timetable_request: Optional[StopTimetableRequest] = field(
        default=None,
        metadata={
            "name": "StopTimetableRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    incremental_updates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncrementalUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    change_before_updates: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ChangeBeforeUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class SubscriptionTerminatedNotification(SubscriptionTerminatedNotificationStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class TerminateSubscriptionResponse(TerminateSubscriptionResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ValueSetStructure:
    value_set_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ValueSetCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    class_of_values: Optional[str] = field(
        default=None,
        metadata={
            "name": "ClassOfValues",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    values: Optional[ValuesStructure] = field(
        default=None,
        metadata={
            "name": "Values",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class VehicleFeaturesDeliveryStructure(AbstractDiscoveryDeliveryStructure):
    vehicle_feature: List[VehicleFeature] = field(
        default_factory=list,
        metadata={
            "name": "VehicleFeature",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class VehicleInFormationStatusStructure:
    status: Optional[VehicleInFormationStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    description: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accessibility_assessment: Optional[AccessibilityAssessmentStructure] = field(
        default=None,
        metadata={
            "name": "AccessibilityAssessment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class VehicleMonitoringCapabilitiesResponseStructure(AbstractServiceCapabilitiesResponseStructure):
    vehicle_monitoring_service_capabilities: Optional[VehicleMonitoringServiceCapabilities] = field(
        default=None,
        metadata={
            "name": "VehicleMonitoringServiceCapabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_monitoring_permissions: Optional[VehicleMonitoringPermissions] = field(
        default=None,
        metadata={
            "name": "VehicleMonitoringPermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class VehicleMonitoringSubscriptionStructure(AbstractSubscriptionStructure):
    vehicle_monitoring_request: Optional[VehicleMonitoringRequest] = field(
        default=None,
        metadata={
            "name": "VehicleMonitoringRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    incremental_updates: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IncrementalUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    change_before_updates: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ChangeBeforeUpdates",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    update_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "UpdateInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ElaboratedDataPublication(PayloadPublication):
    forecast_default: Optional[bool] = field(
        default=None,
        metadata={
            "name": "forecastDefault",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    period_default: Optional[float] = field(
        default=None,
        metadata={
            "name": "periodDefault",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    time_default: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "timeDefault",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    header_information: Optional[HeaderInformation] = field(
        default=None,
        metadata={
            "name": "headerInformation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    reference_settings: Optional[ReferenceSettings] = field(
        default=None,
        metadata={
            "name": "referenceSettings",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    elaborated_data: List[ElaboratedData] = field(
        default_factory=list,
        metadata={
            "name": "elaboratedData",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    elaborated_data_publication_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "elaboratedDataPublicationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class GenericSituationRecord(SituationRecord):
    generic_situation_record_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "genericSituationRecordName",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    generic_situation_record_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "genericSituationRecordExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class MeasurementSiteTablePublication(PayloadPublication):
    header_information: Optional[HeaderInformation] = field(
        default=None,
        metadata={
            "name": "headerInformation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    measurement_site_table: List[MeasurementSiteTable] = field(
        default_factory=list,
        metadata={
            "name": "measurementSiteTable",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    measurement_site_table_publication_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "measurementSiteTablePublicationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class NonRoadEventInformation(SituationRecord):
    non_road_event_information_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "nonRoadEventInformationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class OperatorAction(SituationRecord):
    action_origin: Optional[OperatorActionOriginEnum] = field(
        default=None,
        metadata={
            "name": "actionOrigin",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    operator_action_status: Optional[OperatorActionStatusEnum] = field(
        default=None,
        metadata={
            "name": "operatorActionStatus",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    operator_action_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "operatorActionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Situation:
    overall_severity: Optional[OverallSeverityEnum] = field(
        default=None,
        metadata={
            "name": "overallSeverity",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    related_situation: List[str] = field(
        default_factory=list,
        metadata={
            "name": "relatedSituation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    situation_version: Optional[int] = field(
        default=None,
        metadata={
            "name": "situationVersion",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    situation_version_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "situationVersionTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    header_information: Optional[HeaderInformation] = field(
        default=None,
        metadata={
            "name": "headerInformation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    situation_record: List[SituationRecord] = field(
        default_factory=list,
        metadata={
            "name": "situationRecord",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    situation_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "situationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class TpegFramedPoint(TpegPointLocation):
    tpeg_framed_point_location_type: Optional[TpegLoc01FramedPointLocationSubtypeEnum] = field(
        default=None,
        metadata={
            "name": "tpegFramedPointLocationType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    framed_point: Optional[TpegNonJunctionPoint] = field(
        default=None,
        metadata={
            "name": "framedPoint",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    to: Optional[TpegPoint] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    from_value: Optional[TpegPoint] = field(
        default=None,
        metadata={
            "name": "from",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    tpeg_framed_point_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "tpegFramedPointExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TrafficElement(SituationRecord):
    traffic_element_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "trafficElementExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class LocalService(LocalServiceStructure):
    class Meta:
        namespace = "http://www.ifopt.org.uk/ifopt"


@dataclass
class OtherPlaceEquipment(PlaceEquipmentStructure):
    class Meta:
        namespace = "http://www.ifopt.org.uk/ifopt"


@dataclass
class AbstractCurveType(AbstractGeometricPrimitiveType):
    pass


@dataclass
class AbstractGeometricPrimitive(AbstractGeometricPrimitiveType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSurfaceType(AbstractGeometricPrimitiveType):
    pass


@dataclass
class PointType(AbstractGeometricPrimitiveType):
    pos: Optional[Pos] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )


@dataclass
class AffectedConnectionLinkStructure:
    connection_link_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "ConnectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    all_lines: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "AllLines",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connecting_stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectingStopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connecting_stop_point_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ConnectingStopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connecting_zone_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectingZoneRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_direction: Optional[ConnectionDirectionEnumeration] = field(
        default=None,
        metadata={
            "name": "ConnectionDirection",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affected_path_link: List[AffectedPathLinkStructure] = field(
        default_factory=list,
        metadata={
            "name": "AffectedPathLink",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AffectedRoadsStructure:
    datex2_locations: Optional[GroupOfLocations] = field(
        default=None,
        metadata={
            "name": "Datex2Locations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affected_road: List[AffectedRoadStructure] = field(
        default_factory=list,
        metadata={
            "name": "AffectedRoad",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AffectedRouteStructure:
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction: List[DirectionStructure] = field(
        default_factory=list,
        metadata={
            "name": "Direction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    sections: Optional["AffectedRouteStructure.Sections"] = field(
        default=None,
        metadata={
            "name": "Sections",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_points: Optional["AffectedRouteStructure.StopPoints"] = field(
        default=None,
        metadata={
            "name": "StopPoints",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_links: Optional["AffectedRouteStructure.RouteLinks"] = field(
        default=None,
        metadata={
            "name": "RouteLinks",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Sections:
        affected_section: List[AffectedSectionStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedSection",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class StopPoints:
        affected_only: Optional[bool] = field(
            default=None,
            metadata={
                "name": "AffectedOnly",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        affected_stop_point: List["AffectedStopPointStructure"] = field(
            default_factory=list,
            metadata={
                "name": "AffectedStopPoint",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
                "sequential": True,
            }
        )
        link_projection_to_next_stop_point: List[LinkProjectionStructure] = field(
            default_factory=list,
            metadata={
                "name": "LinkProjectionToNextStopPoint",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )

    @dataclass
    class RouteLinks:
        route_link_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "RouteLinkRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class AffectedStopPlaceComponentStructure(AffectedStopPlaceElementStructure):
    component_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ComponentRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    component_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ComponentName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    component_type: Optional[StopPlaceComponentTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "ComponentType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    point_projection: Optional[PointProjection] = field(
        default=None,
        metadata={
            "name": "PointProjection",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    link_projection: Optional[LinkProjection] = field(
        default=None,
        metadata={
            "name": "LinkProjection",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    zone_projection: Optional[ZoneProjection] = field(
        default=None,
        metadata={
            "name": "ZoneProjection",
            "type": "Element",
            "namespace": "http://www.ifopt.org.uk/ifopt",
        }
    )
    offset: Optional[OffsetStructure] = field(
        default=None,
        metadata={
            "name": "Offset",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_feature_type: Optional[AccessibilityFeatureEnumeration2] = field(
        default=None,
        metadata={
            "name": "AccessFeatureType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affected_facilities: Optional["AffectedStopPlaceComponentStructure.AffectedFacilities"] = field(
        default=None,
        metadata={
            "name": "AffectedFacilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class AffectedFacilities:
        affected_facility: List[AffectedFacilityStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedFacility",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class AnnotatedFacilityStructure:
    facility_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FacilityRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    monitored: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Monitored",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility: Optional[FacilityStructure] = field(
        default=None,
        metadata={
            "name": "Facility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ConnectionLinksDelivery(ConnectionLinksDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionMonitoringCapabilitiesResponse(ConnectionMonitoringCapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionMonitoringSubscriptionRequest(ConnectionMonitoringSubscriptionRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionTimetableCapabilitiesResponse(ConnectionTimetableCapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionTimetableSubscriptionRequest(ConnectionTimetableSubscriptionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EstimatedTimetableCapabilitiesResponse(EstimatedTimetableCapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EstimatedTimetableSubscriptionRequest(EstimatedTimetableSubscriptionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityChangeElement(FacilityChangeStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityConditionStructure:
    facility: Optional[FacilityStructure] = field(
        default=None,
        metadata={
            "name": "Facility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "FacilityRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_status: Optional[FacilityStatusStructure] = field(
        default=None,
        metadata={
            "name": "FacilityStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    monitored_counting: List["FacilityConditionStructure.MonitoredCounting"] = field(
        default_factory=list,
        metadata={
            "name": "MonitoredCounting",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_updated_position: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "FacilityUpdatedPosition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: Optional[SituationRef] = field(
        default=None,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    remedy: Optional[RemedyStructure] = field(
        default=None,
        metadata={
            "name": "Remedy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitoring_info: Optional[MonitoringInformationStructure] = field(
        default=None,
        metadata={
            "name": "MonitoringInfo",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    validity_period: Optional[HalfOpenTimestampOutputRangeStructure] = field(
        default=None,
        metadata={
            "name": "ValidityPeriod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class MonitoredCounting(MonitoredCountingStructure):
        pass


@dataclass
class FacilityMonitoringCapabilitiesResponse(FacilityMonitoringCapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityMonitoringSubscriptionRequest(FacilityMonitoringSubscriptionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FormationConditionStructure:
    compound_train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CompoundTrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_component_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainComponentRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    entrance_to_vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "EntranceToVehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    formation_status: Optional[FormationStatusStructure] = field(
        default=None,
        metadata={
            "name": "FormationStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_in_formation_status: Optional[VehicleInFormationStatusStructure] = field(
        default=None,
        metadata={
            "name": "VehicleInFormationStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: Optional[SituationRef] = field(
        default=None,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    recommended_action: Optional[RecommendedActionStructure] = field(
        default=None,
        metadata={
            "name": "RecommendedAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class GeneralMessage(InfoMessageStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class GeneralMessageCapabilitiesResponse(GeneralMessageCapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class GeneralMessageSubscriptionRequest(GeneralMessageSubscriptionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class InfoChannelDelivery(InfoChannelDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ProductCategoriesDelivery(ProductCategoriesDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ProductionTimetableCapabilitiesResponseStructure(AbstractServiceCapabilitiesResponseStructure):
    production_timetable_service_capabilities: Optional[ProductionTimetableServiceCapabilities] = field(
        default=None,
        metadata={
            "name": "ProductionTimetableServiceCapabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    production_timetable_permissions: Optional[ProductionTimetablePermissions] = field(
        default=None,
        metadata={
            "name": "ProductionTimetablePermissions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ProductionTimetableSubscriptionRequest(ProductionTimetableSubscriptionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class RelatedJourney(RelatedJourneyStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class RouteDirectionStructure(DirectionStructure):
    journey_patterns: Optional["RouteDirectionStructure.JourneyPatterns"] = field(
        default=None,
        metadata={
            "name": "JourneyPatterns",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class JourneyPatterns:
        journey_pattern: List["RouteDirectionStructure.JourneyPatterns.JourneyPattern"] = field(
            default_factory=list,
            metadata={
                "name": "JourneyPattern",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

        @dataclass
        class JourneyPattern:
            journey_pattern_ref: Optional[str] = field(
                default=None,
                metadata={
                    "name": "JourneyPatternRef",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            name: List[NaturalLanguageStringStructure] = field(
                default_factory=list,
                metadata={
                    "name": "Name",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            stops_in_pattern: Optional["RouteDirectionStructure.JourneyPatterns.JourneyPattern.StopsInPattern"] = field(
                default=None,
                metadata={
                    "name": "StopsInPattern",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )

            @dataclass
            class StopsInPattern:
                stop_point_in_pattern: List[StopPointInPatternStructure] = field(
                    default_factory=list,
                    metadata={
                        "name": "StopPointInPattern",
                        "type": "Element",
                        "namespace": "http://www.siri.org.uk/siri",
                        "min_occurs": 2,
                    }
                )


@dataclass
class ServiceFeaturesDelivery(ServiceFeaturesDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ServiceRequest(ServiceRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SituationExchangeCapabilitiesResponse(SituationExchangeCapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SituationExchangeSubscriptionRequest(SituationExchangeSubscriptionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopLineNotice(StopLineNoticeStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopMonitoringCapabilitiesResponse(StopMonitoringCapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopMonitoringSubscriptionRequest(StopMonitoringSubscriptionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopNotice(StopNoticeStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopPointsDelivery(StopPointsDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopTimetableCapabilitiesResponse(StopTimetableCapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopTimetableSubscriptionRequest(StopTimetableSubscriptionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SubscriptionResponseBodyStructure:
    response_status: List[ResponseStatus] = field(
        default_factory=list,
        metadata={
            "name": "ResponseStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    subscription_manager_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriptionManagerAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_started_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ServiceStartedTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class SubscriptionResponseStructure(ResponseEndpointStructure):
    response_status: List[ResponseStatus] = field(
        default_factory=list,
        metadata={
            "name": "ResponseStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    subscription_manager_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "SubscriptionManagerAddress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_started_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ServiceStartedTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TrainElementStructure:
    train_element_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainElementCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    train_element_type: Optional[TrainElementTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "TrainElementType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    fare_classes: List[FareClassEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "FareClasses",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "tokens": True,
        }
    )
    name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    short_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "ShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    private_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PrivateCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reversing_direction: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ReversingDirection",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    self_propelled: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SelfPropelled",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    type_of_fuel: Optional[TypeOfFuelEnumeration] = field(
        default=None,
        metadata={
            "name": "TypeOfFuel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    euro_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "EuroClass",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_passenger_capacities: Optional["TrainElementStructure.MaximumPassengerCapacities"] = field(
        default=None,
        metadata={
            "name": "MaximumPassengerCapacities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    low_floor: Optional[bool] = field(
        default=None,
        metadata={
            "name": "LowFloor",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    has_lift_or_ramp: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HasLiftOrRamp",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    has_hoist: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HasHoist",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    length: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Length",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    width: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Width",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    height: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Height",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    weight: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Weight",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facilities: Optional["TrainElementStructure.Facilities"] = field(
        default=None,
        metadata={
            "name": "Facilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class MaximumPassengerCapacities:
        maximum_passenger_capacity: List[PassengerCapacityStructure] = field(
            default_factory=list,
            metadata={
                "name": "MaximumPassengerCapacity",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Facilities:
        vehicle_feature: List[VehicleFeature] = field(
            default_factory=list,
            metadata={
                "name": "VehicleFeature",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )
        facility: List[FacilityStructure] = field(
            default_factory=list,
            metadata={
                "name": "Facility",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )
        facility_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "FacilityRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )


@dataclass
class ValueSet(ValueSetStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class VehicleFeaturesDelivery(VehicleFeaturesDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class VehicleMonitoringCapabilitiesResponse(VehicleMonitoringCapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class VehicleMonitoringSubscriptionRequest(VehicleMonitoringSubscriptionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AbnormalTraffic(TrafficElement):
    abnormal_traffic_type: Optional[AbnormalTrafficTypeEnum] = field(
        default=None,
        metadata={
            "name": "abnormalTrafficType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    number_of_vehicles_waiting: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfVehiclesWaiting",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    queue_length: Optional[int] = field(
        default=None,
        metadata={
            "name": "queueLength",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    relative_traffic_flow: Optional[RelativeTrafficFlowEnum] = field(
        default=None,
        metadata={
            "name": "relativeTrafficFlow",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    traffic_flow_characteristics: Optional[TrafficFlowCharacteristicsEnum] = field(
        default=None,
        metadata={
            "name": "trafficFlowCharacteristics",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    traffic_trend_type: Optional[TrafficTrendTypeEnum] = field(
        default=None,
        metadata={
            "name": "trafficTrendType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    abnormal_traffic_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "abnormalTrafficExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Accident(TrafficElement):
    accident_cause: Optional[AccidentCauseEnum] = field(
        default=None,
        metadata={
            "name": "accidentCause",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    accident_type: List[AccidentTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "accidentType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    total_number_of_people_involved: Optional[int] = field(
        default=None,
        metadata={
            "name": "totalNumberOfPeopleInvolved",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    total_number_of_vehicles_involved: Optional[int] = field(
        default=None,
        metadata={
            "name": "totalNumberOfVehiclesInvolved",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_involved: List[Vehicle] = field(
        default_factory=list,
        metadata={
            "name": "vehicleInvolved",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    group_of_vehicles_involved: List[GroupOfVehiclesInvolved] = field(
        default_factory=list,
        metadata={
            "name": "groupOfVehiclesInvolved",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    group_of_people_involved: List[GroupOfPeopleInvolved] = field(
        default_factory=list,
        metadata={
            "name": "groupOfPeopleInvolved",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    accident_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "accidentExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Activity(TrafficElement):
    mobility_of_activity: Optional[Mobility] = field(
        default=None,
        metadata={
            "name": "mobilityOfActivity",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    activity_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "activityExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class CarParks(NonRoadEventInformation):
    car_park_configuration: Optional[CarParkConfigurationEnum] = field(
        default=None,
        metadata={
            "name": "carParkConfiguration",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    car_park_identity: Optional[str] = field(
        default=None,
        metadata={
            "name": "carParkIdentity",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    car_park_occupancy: Optional[float] = field(
        default=None,
        metadata={
            "name": "carParkOccupancy",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    car_park_status: Optional[CarParkStatusEnum] = field(
        default=None,
        metadata={
            "name": "carParkStatus",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    exit_rate: Optional[int] = field(
        default=None,
        metadata={
            "name": "exitRate",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    fill_rate: Optional[int] = field(
        default=None,
        metadata={
            "name": "fillRate",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    number_of_vacant_parking_spaces: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfVacantParkingSpaces",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    occupied_spaces: Optional[int] = field(
        default=None,
        metadata={
            "name": "occupiedSpaces",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    queuing_time: Optional[float] = field(
        default=None,
        metadata={
            "name": "queuingTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    total_capacity: Optional[int] = field(
        default=None,
        metadata={
            "name": "totalCapacity",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    car_parks_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "carParksExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Conditions(TrafficElement):
    driving_condition_type: Optional[DrivingConditionTypeEnum] = field(
        default=None,
        metadata={
            "name": "drivingConditionType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    conditions_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "conditionsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class EquipmentOrSystemFault(TrafficElement):
    equipment_or_system_fault_type: Optional[EquipmentOrSystemFaultTypeEnum] = field(
        default=None,
        metadata={
            "name": "equipmentOrSystemFaultType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    faulty_equipment_or_system_type: Optional[EquipmentOrSystemTypeEnum] = field(
        default=None,
        metadata={
            "name": "faultyEquipmentOrSystemType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    equipment_or_system_fault_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "equipmentOrSystemFaultExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class NetworkManagement(OperatorAction):
    compliance_option: Optional[ComplianceOptionEnum] = field(
        default=None,
        metadata={
            "name": "complianceOption",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    applicable_for_traffic_direction: List[DirectionEnum] = field(
        default_factory=list,
        metadata={
            "name": "applicableForTrafficDirection",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    applicable_for_traffic_type: List[TrafficTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "applicableForTrafficType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    places_at_which_applicable: List[PlacesEnum] = field(
        default_factory=list,
        metadata={
            "name": "placesAtWhichApplicable",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    automatically_initiated: Optional[bool] = field(
        default=None,
        metadata={
            "name": "automaticallyInitiated",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    for_vehicles_with_characteristics_of: List[VehicleCharacteristics] = field(
        default_factory=list,
        metadata={
            "name": "forVehiclesWithCharacteristicsOf",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    network_management_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "networkManagementExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Obstruction(TrafficElement):
    number_of_obstructions: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfObstructions",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    mobility_of_obstruction: Optional[Mobility] = field(
        default=None,
        metadata={
            "name": "mobilityOfObstruction",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    obstruction_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "obstructionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class RoadOperatorServiceDisruption(NonRoadEventInformation):
    road_operator_service_disruption_type: List[RoadOperatorServiceDisruptionTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "roadOperatorServiceDisruptionType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    road_operator_service_disruption_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadOperatorServiceDisruptionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class RoadsideAssistance(OperatorAction):
    roadside_assistance_type: Optional[RoadsideAssistanceTypeEnum] = field(
        default=None,
        metadata={
            "name": "roadsideAssistanceType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    roadside_assistance_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadsideAssistanceExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class RoadsideServiceDisruption(NonRoadEventInformation):
    roadside_service_disruption_type: List[RoadsideServiceDisruptionTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "roadsideServiceDisruptionType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    roadside_service_disruption_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadsideServiceDisruptionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class Roadworks(OperatorAction):
    roadworks_duration: Optional[RoadworksDurationEnum] = field(
        default=None,
        metadata={
            "name": "roadworksDuration",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    roadworks_scale: Optional[RoadworksScaleEnum] = field(
        default=None,
        metadata={
            "name": "roadworksScale",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    under_traffic: Optional[bool] = field(
        default=None,
        metadata={
            "name": "underTraffic",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    urgent_roadworks: Optional[bool] = field(
        default=None,
        metadata={
            "name": "urgentRoadworks",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    mobility: Optional[Mobility] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    subjects: Optional[Subjects] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    maintenance_vehicles: Optional[MaintenanceVehicles] = field(
        default=None,
        metadata={
            "name": "maintenanceVehicles",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    roadworks_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadworksExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class SignSetting(OperatorAction):
    datex_pictogram: List[DatexPictogramEnum] = field(
        default_factory=list,
        metadata={
            "name": "datexPictogram",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_occurs": 2,
        }
    )
    pictogram_list: Optional[str] = field(
        default=None,
        metadata={
            "name": "pictogramList",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    pictogram_list_entry: List[str] = field(
        default_factory=list,
        metadata={
            "name": "pictogramListEntry",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_occurs": 2,
            "max_length": 1024,
        }
    )
    reason_for_setting: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "reasonForSetting",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    set_by: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "setBy",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    sign_address: Optional[str] = field(
        default=None,
        metadata={
            "name": "signAddress",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    time_last_set: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "timeLastSet",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    sign_setting_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "signSettingExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class SituationPublication(PayloadPublication):
    situation: List[Situation] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    situation_publication_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "situationPublicationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TrafficViewRecord:
    record_sequence_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "recordSequenceNumber",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    traffic_element: Optional[TrafficElement] = field(
        default=None,
        metadata={
            "name": "trafficElement",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    operator_action: Optional[OperatorAction] = field(
        default=None,
        metadata={
            "name": "operatorAction",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    elaborated_data: Optional[ElaboratedData] = field(
        default=None,
        metadata={
            "name": "elaboratedData",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    url_link: List[UrlLink] = field(
        default_factory=list,
        metadata={
            "name": "urlLink",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    traffic_view_record_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "trafficViewRecordExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class TransitInformation(NonRoadEventInformation):
    journey_destination: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "journeyDestination",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    journey_origin: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "journeyOrigin",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    journey_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "journeyReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    transit_service_information: Optional[TransitServiceInformationEnum] = field(
        default=None,
        metadata={
            "name": "transitServiceInformation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    transit_service_type: Optional[TransitServiceTypeEnum] = field(
        default=None,
        metadata={
            "name": "transitServiceType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    scheduled_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "scheduledDepartureTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    transit_information_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "transitInformationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AbstractCurve(AbstractCurveType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractSurface(AbstractSurfaceType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Point(PointType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AffectedInterchangeStructure:
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeStopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_stop_point_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "InterchangeStopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connecting_vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectingVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    interchange_status_type: Optional[InterchangeStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "InterchangeStatusType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link: List[AffectedConnectionLinkStructure] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionLink",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AffectedStopPlaceStructure(AffectedStopPlaceElementStructure):
    stop_place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    place_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "PlaceName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_place_type: Optional[StopPlaceTypeEnumeration2] = field(
        default=None,
        metadata={
            "name": "StopPlaceType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affected_facilities: Optional["AffectedStopPlaceStructure.AffectedFacilities"] = field(
        default=None,
        metadata={
            "name": "AffectedFacilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affected_components: Optional["AffectedStopPlaceStructure.AffectedComponents"] = field(
        default=None,
        metadata={
            "name": "AffectedComponents",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affected_navigation_paths: Optional["AffectedStopPlaceStructure.AffectedNavigationPaths"] = field(
        default=None,
        metadata={
            "name": "AffectedNavigationPaths",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    lines: Optional["AffectedStopPlaceStructure.Lines"] = field(
        default=None,
        metadata={
            "name": "Lines",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class AffectedFacilities:
        affected_facility: List[AffectedFacilityStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedFacility",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class AffectedComponents:
        affected_component: List[AffectedStopPlaceComponentStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedComponent",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class AffectedNavigationPaths:
        navigation_path_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "NavigationPathRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Lines:
        affected_line: List["AffectedLineStructure"] = field(
            default_factory=list,
            metadata={
                "name": "AffectedLine",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class AnnotatedLineStructure:
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    line_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "LineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    monitored: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Monitored",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destinations: Optional["AnnotatedLineStructure.Destinations"] = field(
        default=None,
        metadata={
            "name": "Destinations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    directions: Optional["AnnotatedLineStructure.Directions"] = field(
        default=None,
        metadata={
            "name": "Directions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Destinations:
        destination: List[Destination] = field(
            default_factory=list,
            metadata={
                "name": "Destination",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Directions:
        direction: List[RouteDirectionStructure] = field(
            default_factory=list,
            metadata={
                "name": "Direction",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class FacilityCondition(FacilityConditionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityConditionElement(FacilityConditionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityDeliveryStructure(AbstractDiscoveryDeliveryStructure):
    annotated_facility: List[AnnotatedFacilityStructure] = field(
        default_factory=list,
        metadata={
            "name": "AnnotatedFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class FormationCondition(FormationConditionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class GeneralMessageDeliveryStructure(AbstractServiceDeliveryStructure):
    general_message: List[GeneralMessage] = field(
        default_factory=list,
        metadata={
            "name": "GeneralMessage",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_message_cancellation: List[GeneralMessageCancellation] = field(
        default_factory=list,
        metadata={
            "name": "GeneralMessageCancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class JourneyRelationStructure:
    journey_relation_type: Optional[JourneyRelationTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "JourneyRelationType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    call_info: Optional[RelatedCallStructure] = field(
        default=None,
        metadata={
            "name": "CallInfo",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_parts: Optional["JourneyRelationStructure.JourneyParts"] = field(
        default=None,
        metadata={
            "name": "JourneyParts",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    related_journey: List[RelatedJourney] = field(
        default_factory=list,
        metadata={
            "name": "RelatedJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )

    @dataclass
    class JourneyParts:
        journey_part_info: List[RelatedJourneyPartStructure] = field(
            default_factory=list,
            metadata={
                "name": "JourneyPartInfo",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class ProductionTimetableCapabilitiesResponse(ProductionTimetableCapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SiriSubscriptionRequestStructure:
    production_timetable_subscription_request: List[ProductionTimetableSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "ProductionTimetableSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_timetable_subscription_request: List[EstimatedTimetableSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "EstimatedTimetableSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_timetable_subscription_request: List[StopTimetableSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "StopTimetableSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_subscription_request: List[StopMonitoringSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "StopMonitoringSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_monitoring_subscription_request: List[VehicleMonitoringSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMonitoringSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_timetable_subscription_request: List[ConnectionTimetableSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionTimetableSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_subscription_request: List[ConnectionMonitoringSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_message_subscription_request: List[GeneralMessageSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "GeneralMessageSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_monitoring_subscription_request: List[FacilityMonitoringSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "FacilityMonitoringSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_exchange_subscription_request: List[SituationExchangeSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "SituationExchangeSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class SubscriptionRequestStructure(AbstractSubscriptionRequestStructure):
    production_timetable_subscription_request: List[ProductionTimetableSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "ProductionTimetableSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_timetable_subscription_request: List[EstimatedTimetableSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "EstimatedTimetableSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_timetable_subscription_request: List[StopTimetableSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "StopTimetableSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_subscription_request: List[StopMonitoringSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "StopMonitoringSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_monitoring_subscription_request: List[VehicleMonitoringSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMonitoringSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_timetable_subscription_request: List[ConnectionTimetableSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionTimetableSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_subscription_request: List[ConnectionMonitoringSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_message_subscription_request: List[GeneralMessageSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "GeneralMessageSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_monitoring_subscription_request: List[FacilityMonitoringSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "FacilityMonitoringSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_exchange_subscription_request: List[SituationExchangeSubscriptionRequest] = field(
        default_factory=list,
        metadata={
            "name": "SituationExchangeSubscriptionRequest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class SubscriptionResponse(SubscriptionResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class TrainElement(TrainElementStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class TypesOfValueStructure:
    value_set: List[ValueSet] = field(
        default_factory=list,
        metadata={
            "name": "ValueSet",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    type_of_value: List[TypeOfValue] = field(
        default_factory=list,
        metadata={
            "name": "TypeOfValue",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AnimalPresenceObstruction(Obstruction):
    alive: Optional[bool] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    animal_presence_type: Optional[AnimalPresenceTypeEnum] = field(
        default=None,
        metadata={
            "name": "animalPresenceType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    animal_presence_obstruction_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "animalPresenceObstructionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class AuthorityOperation(Activity):
    authority_operation_type: Optional[AuthorityOperationTypeEnum] = field(
        default=None,
        metadata={
            "name": "authorityOperationType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    authority_operation_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "authorityOperationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class ConstructionWorks(Roadworks):
    construction_work_type: Optional[ConstructionWorkTypeEnum] = field(
        default=None,
        metadata={
            "name": "constructionWorkType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    construction_works_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "constructionWorksExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class DisturbanceActivity(Activity):
    disturbance_activity_type: Optional[DisturbanceActivityTypeEnum] = field(
        default=None,
        metadata={
            "name": "disturbanceActivityType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    disturbance_activity_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "disturbanceActivityExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class EnvironmentalObstruction(Obstruction):
    depth: Optional[float] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    environmental_obstruction_type: Optional[EnvironmentalObstructionTypeEnum] = field(
        default=None,
        metadata={
            "name": "environmentalObstructionType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    environmental_obstruction_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "environmentalObstructionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class GeneralInstructionToRoadUsers(NetworkManagement):
    general_instruction_to_road_users_type: Optional[GeneralInstructionToRoadUsersTypeEnum] = field(
        default=None,
        metadata={
            "name": "generalInstructionToRoadUsersType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    general_instruction_to_road_users_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "generalInstructionToRoadUsersExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class GeneralNetworkManagement(NetworkManagement):
    general_network_management_type: Optional[GeneralNetworkManagementTypeEnum] = field(
        default=None,
        metadata={
            "name": "generalNetworkManagementType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    traffic_manually_directed_by: Optional[PersonCategoryEnum] = field(
        default=None,
        metadata={
            "name": "trafficManuallyDirectedBy",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    general_network_management_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "generalNetworkManagementExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class GeneralObstruction(Obstruction):
    obstruction_type: List[ObstructionTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "obstructionType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    group_of_people_involved: List[GroupOfPeopleInvolved] = field(
        default_factory=list,
        metadata={
            "name": "groupOfPeopleInvolved",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    general_obstruction_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "generalObstructionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class InfrastructureDamageObstruction(Obstruction):
    infrastructure_damage_type: Optional[InfrastructureDamageTypeEnum] = field(
        default=None,
        metadata={
            "name": "infrastructureDamageType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    infrastructure_damage_obstruction_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "infrastructureDamageObstructionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class LinearTrafficView:
    linear_predefined_location_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "linearPredefinedLocationReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    traffic_view_record: List[TrafficViewRecord] = field(
        default_factory=list,
        metadata={
            "name": "trafficViewRecord",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    linear_traffic_view_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "linearTrafficViewExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class MaintenanceWorks(Roadworks):
    road_maintenance_type: List[RoadMaintenanceTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "roadMaintenanceType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    maintenance_works_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "maintenanceWorksExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class MatrixSignSetting(SignSetting):
    aspect_displayed: Optional[str] = field(
        default=None,
        metadata={
            "name": "aspectDisplayed",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    matrix_fault: List[MatrixFaultEnum] = field(
        default_factory=list,
        metadata={
            "name": "matrixFault",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    matrix_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "matrixIdentifier",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    matrix_sign_setting_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "matrixSignSettingExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PoorEnvironmentConditions(Conditions):
    poor_environment_type: List[PoorEnvironmentTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "poorEnvironmentType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    precipitation_detail: Optional[PrecipitationDetail] = field(
        default=None,
        metadata={
            "name": "precipitationDetail",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    visibility: Optional[Visibility] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    pollution_measurement: List[PollutionMeasurement] = field(
        default_factory=list,
        metadata={
            "name": "pollutionMeasurement",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    temperature: Optional[Temperature] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    wind: Optional[Wind] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    humidity: Optional[Humidity] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    poor_environment_conditions_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "poorEnvironmentConditionsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PublicEvent(Activity):
    public_event_type: Optional[PublicEventTypeEnum] = field(
        default=None,
        metadata={
            "name": "publicEventType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    public_event_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "publicEventExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class ReroutingManagement(NetworkManagement):
    rerouting_management_type: List[ReroutingManagementTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "reroutingManagementType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    rerouting_itinerary_description: Optional[MultilingualString] = field(
        default=None,
        metadata={
            "name": "reroutingItineraryDescription",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    signed_rerouting: Optional[bool] = field(
        default=None,
        metadata={
            "name": "signedRerouting",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    entry: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    exit: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    road_or_junction_number: Optional[str] = field(
        default=None,
        metadata={
            "name": "roadOrJunctionNumber",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    alternative_route: List[Itinerary] = field(
        default_factory=list,
        metadata={
            "name": "alternativeRoute",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    rerouting_management_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "reroutingManagementExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class RoadConditions(Conditions):
    road_conditions_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadConditionsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class RoadOrCarriagewayOrLaneManagement(NetworkManagement):
    road_or_carriageway_or_lane_management_type: Optional[RoadOrCarriagewayOrLaneManagementTypeEnum] = field(
        default=None,
        metadata={
            "name": "roadOrCarriagewayOrLaneManagementType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    minimum_car_occupancy: Optional[int] = field(
        default=None,
        metadata={
            "name": "minimumCarOccupancy",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    specified_carriageway: List[CarriagewayEnum] = field(
        default_factory=list,
        metadata={
            "name": "specifiedCarriageway",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    specified_lane: List[LaneEnum] = field(
        default_factory=list,
        metadata={
            "name": "specifiedLane",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    road_or_carriageway_or_lane_management_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "roadOrCarriagewayOrLaneManagementExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class SpeedManagement(NetworkManagement):
    speed_management_type: Optional[SpeedManagementTypeEnum] = field(
        default=None,
        metadata={
            "name": "speedManagementType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    temporary_speed_limit: Optional[float] = field(
        default=None,
        metadata={
            "name": "temporarySpeedLimit",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    speed_management_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "speedManagementExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class VariableMessageSignSetting(SignSetting):
    number_of_characters: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfCharacters",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    number_of_rows: Optional[int] = field(
        default=None,
        metadata={
            "name": "numberOfRows",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vms_fault: List[VmsFaultEnum] = field(
        default_factory=list,
        metadata={
            "name": "vmsFault",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vms_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "vmsIdentifier",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "max_length": 1024,
        }
    )
    vms_legend: List[MultilingualString] = field(
        default_factory=list,
        metadata={
            "name": "vmsLegend",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vms_type: Optional[VmsTypeEnum] = field(
        default=None,
        metadata={
            "name": "vmsType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    variable_message_sign_setting_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "variableMessageSignSettingExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class VehicleObstruction(Obstruction):
    vehicle_obstruction_type: Optional[VehicleObstructionTypeEnum] = field(
        default=None,
        metadata={
            "name": "vehicleObstructionType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    obstructing_vehicle: List[Vehicle] = field(
        default_factory=list,
        metadata={
            "name": "obstructingVehicle",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    vehicle_obstruction_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "vehicleObstructionExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class WinterDrivingManagement(NetworkManagement):
    winter_equipment_management_type: Optional[WinterEquipmentManagementTypeEnum] = field(
        default=None,
        metadata={
            "name": "winterEquipmentManagementType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    winter_driving_management_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "winterDrivingManagementExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PointArrayPropertyType:
    point: List[Point] = field(
        default_factory=list,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class PointPropertyType:
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        }
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class AffectedLineStructure:
    affected_operator: List[AffectedOperatorStructure] = field(
        default_factory=list,
        metadata={
            "name": "AffectedOperator",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origins: List["AffectedStopPointStructure"] = field(
        default_factory=list,
        metadata={
            "name": "Origins",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destinations: List["AffectedStopPointStructure"] = field(
        default_factory=list,
        metadata={
            "name": "Destinations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction: List[DirectionStructure] = field(
        default_factory=list,
        metadata={
            "name": "Direction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    routes: Optional["AffectedLineStructure.Routes"] = field(
        default=None,
        metadata={
            "name": "Routes",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    sections: Optional["AffectedLineStructure.Sections"] = field(
        default=None,
        metadata={
            "name": "Sections",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_points: Optional["AffectedLineStructure.StopPoints"] = field(
        default=None,
        metadata={
            "name": "StopPoints",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_places: Optional["AffectedLineStructure.StopPlaces"] = field(
        default=None,
        metadata={
            "name": "StopPlaces",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Routes:
        affected_route: List[AffectedRouteStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedRoute",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Sections:
        affected_section: List[AffectedSectionStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedSection",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class StopPoints:
        affected_stop_point: List["AffectedStopPointStructure"] = field(
            default_factory=list,
            metadata={
                "name": "AffectedStopPoint",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class StopPlaces:
        affected_stop_place: List[AffectedStopPlaceStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedStopPlace",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class AnnotatedLineRef(AnnotatedLineStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class CapabilitiesResponseStructure(ProducerResponseStructure):
    production_timetable_capabilities_response: Optional[ProductionTimetableCapabilitiesResponse] = field(
        default=None,
        metadata={
            "name": "ProductionTimetableCapabilitiesResponse",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_timetable_capabilities_response: Optional[EstimatedTimetableCapabilitiesResponse] = field(
        default=None,
        metadata={
            "name": "EstimatedTimetableCapabilitiesResponse",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_timetable_capabilities_response: Optional[StopTimetableCapabilitiesResponse] = field(
        default=None,
        metadata={
            "name": "StopTimetableCapabilitiesResponse",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_capabilities_response: Optional[StopMonitoringCapabilitiesResponse] = field(
        default=None,
        metadata={
            "name": "StopMonitoringCapabilitiesResponse",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_monitoring_capabilities_response: Optional[VehicleMonitoringCapabilitiesResponse] = field(
        default=None,
        metadata={
            "name": "VehicleMonitoringCapabilitiesResponse",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_timetable_capabilities_response: Optional[ConnectionTimetableCapabilitiesResponse] = field(
        default=None,
        metadata={
            "name": "ConnectionTimetableCapabilitiesResponse",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_capabilities_response: Optional[ConnectionMonitoringCapabilitiesResponse] = field(
        default=None,
        metadata={
            "name": "ConnectionMonitoringCapabilitiesResponse",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_message_capabilities_response: Optional[GeneralMessageCapabilitiesResponse] = field(
        default=None,
        metadata={
            "name": "GeneralMessageCapabilitiesResponse",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_monitoring_capabilities_response: Optional[FacilityMonitoringCapabilitiesResponse] = field(
        default=None,
        metadata={
            "name": "FacilityMonitoringCapabilitiesResponse",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_exchange_capabilities_response: Optional[SituationExchangeCapabilitiesResponse] = field(
        default=None,
        metadata={
            "name": "SituationExchangeCapabilitiesResponse",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class FacilityDelivery(FacilityDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityMonitoringDeliveryStructure(AbstractServiceDeliveryStructure):
    facility_condition: List[FacilityCondition] = field(
        default_factory=list,
        metadata={
            "name": "FacilityCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class GeneralMessageDelivery(GeneralMessageDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class InterchangeJourneyStructure:
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPatternRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "JourneyPatternName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_lines_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupOfLinesRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding: Optional[BrandingStructure] = field(
        default=None,
        metadata={
            "name": "Branding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProductCategoryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ServiceFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VehicleFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display_at_origin: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplayAtOrigin",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    via: List[ViaNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "Via",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display_at_destination: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplayAtDestination",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "VehicleJourneyName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_note: List[JourneyNote] = field(
        default_factory=list,
        metadata={
            "name": "JourneyNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    public_contact: Optional[SimpleContactStructure] = field(
        default=None,
        metadata={
            "name": "PublicContact",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operations_contact: Optional[SimpleContactStructure] = field(
        default=None,
        metadata={
            "name": "OperationsContact",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    headway_service: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HeadwayService",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "OriginAimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "DestinationAimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    first_or_last_journey: Optional[FirstOrLastJourneyEnumeration] = field(
        default=None,
        metadata={
            "name": "FirstOrLastJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    formation_condition: List[FormationCondition] = field(
        default_factory=list,
        metadata={
            "name": "FormationCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_condition_element: List[FacilityConditionElement] = field(
        default_factory=list,
        metadata={
            "name": "FacilityConditionElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_change_element: Optional[FacilityChangeElement] = field(
        default=None,
        metadata={
            "name": "FacilityChangeElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: List[SituationRef] = field(
        default_factory=list,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    block_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BlockRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    course_of_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CourseOfJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    additional_vehicle_journey_ref: List[FramedVehicleJourneyRefStructure] = field(
        default_factory=list,
        metadata={
            "name": "AdditionalVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    driver_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DriverRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    driver_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "DriverName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Monitored",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class JourneyRelationsStructure:
    journey_relation: List[JourneyRelationStructure] = field(
        default_factory=list,
        metadata={
            "name": "JourneyRelation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class SubscriptionRequest(SubscriptionRequestStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class TrainComponentStructure:
    train_component_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainComponentCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    label: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Label",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_element_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainElementRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_element: Optional[TrainElement] = field(
        default=None,
        metadata={
            "name": "TrainElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reversed_orientation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ReversedOrientation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TypesOfValue(TypesOfValueStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class NonWeatherRelatedRoadConditions(RoadConditions):
    non_weather_related_road_condition_type: List[NonWeatherRelatedRoadConditionTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "nonWeatherRelatedRoadConditionType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    non_weather_related_road_conditions_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "nonWeatherRelatedRoadConditionsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class TrafficView:
    traffic_view_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "trafficViewTime",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    predefined_location_set_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "predefinedLocationSetReference",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
            "max_length": 1024,
        }
    )
    linear_traffic_view: List[LinearTrafficView] = field(
        default_factory=list,
        metadata={
            "name": "linearTrafficView",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    traffic_view_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "trafficViewExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass
class WeatherRelatedRoadConditions(RoadConditions):
    weather_related_road_condition_type: List[WeatherRelatedRoadConditionTypeEnum] = field(
        default_factory=list,
        metadata={
            "name": "weatherRelatedRoadConditionType",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    road_surface_condition_measurements: Optional[RoadSurfaceConditionMeasurements] = field(
        default=None,
        metadata={
            "name": "roadSurfaceConditionMeasurements",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )
    weather_related_road_conditions_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "weatherRelatedRoadConditionsExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class PointProperty(PointPropertyType):
    class Meta:
        name = "pointProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AbstractDistributorItemStructure(AbstractItemStructure):
    interchange_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "InterchangeRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_link_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ConnectionLinkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorVisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistributorOrder",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_journey: Optional[InterchangeJourneyStructure] = field(
        default=None,
        metadata={
            "name": "DistributorJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    feeder_vehicle_journey_ref: List[FramedVehicleJourneyRefStructure] = field(
        default_factory=list,
        metadata={
            "name": "FeederVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AffectedNetworkStructure:
    affected_operator: List[AffectedOperatorStructure] = field(
        default_factory=list,
        metadata={
            "name": "AffectedOperator",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    network_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "NetworkRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    network_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "NetworkName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    routes_affected: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "RoutesAffected",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: Optional[VehicleModesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    air_submode: Optional[AirSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "AirSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    bus_submode: Optional[BusSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "BusSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    coach_submode: Optional[CoachSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "CoachSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    metro_submode: Optional[MetroSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "MetroSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    rail_submode: Optional[RailSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "RailSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    tram_submode: Optional[TramSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "TramSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    water_submode: Optional[WaterSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "WaterSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    telecabin_submode: Optional[TelecabinSubmodesOfTransportEnumeration] = field(
        default=None,
        metadata={
            "name": "TelecabinSubmode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    access_mode: Optional[AccessModesEnumeration] = field(
        default=None,
        metadata={
            "name": "AccessMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    all_lines: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "AllLines",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    selected_routes: List[AffectedRouteStructure] = field(
        default_factory=list,
        metadata={
            "name": "SelectedRoutes",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affected_section: List[AffectedSectionStructure] = field(
        default_factory=list,
        metadata={
            "name": "AffectedSection",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affected_line: List[AffectedLineStructure] = field(
        default_factory=list,
        metadata={
            "name": "AffectedLine",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class AffectedStopPointStructure:
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    private_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PrivateRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "StopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_type: Optional[StopPointTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "StopPointType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    location: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "Location",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_place_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "StopPlaceName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affected_modes: Optional[AffectedModesStructure] = field(
        default=None,
        metadata={
            "name": "AffectedModes",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    place_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "PlaceName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accessibility_assessment: Optional[AccessibilityAssessmentStructure] = field(
        default=None,
        metadata={
            "name": "AccessibilityAssessment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_condition: List[RoutePointTypeEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "StopCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_links: Optional["AffectedStopPointStructure.ConnectionLinks"] = field(
        default=None,
        metadata={
            "name": "ConnectionLinks",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    lines: Optional["AffectedStopPointStructure.Lines"] = field(
        default=None,
        metadata={
            "name": "Lines",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class ConnectionLinks:
        affected_connection_link: List[AffectedConnectionLinkStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedConnectionLink",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Lines:
        affected_line: List[AffectedLineStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedLine",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class CapabilitiesResponse(CapabilitiesResponseStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class FacilityMonitoringDelivery(FacilityMonitoringDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class GeneralMessageDeliveriesStructure:
    general_message_delivery: List[GeneralMessageDelivery] = field(
        default_factory=list,
        metadata={
            "name": "GeneralMessageDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class LinesDeliveryStructure(AbstractDiscoveryDeliveryStructure):
    annotated_line_ref: List[AnnotatedLineRef] = field(
        default_factory=list,
        metadata={
            "name": "AnnotatedLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class MonitoredFeederArrivalStructure(AbstractFeederItemStructure):
    clear_down_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ClearDownRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    feeder_journey: Optional[InterchangeJourneyStructure] = field(
        default=None,
        metadata={
            "name": "FeederJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    vehicle_at_stop: Optional[bool] = field(
        default=None,
        metadata={
            "name": "VehicleAtStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    number_of_transfer_passengers: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfTransferPassengers",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_platform_name: Optional[ArrivalPlatformName] = field(
        default=None,
        metadata={
            "name": "ArrivalPlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    suggested_wait_decision_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "SuggestedWaitDecisionTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TimetabledFeederArrivalStructure(AbstractFeederItemStructure):
    feeder_journey: Optional[InterchangeJourneyStructure] = field(
        default=None,
        metadata={
            "name": "FeederJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TrainComponent(TrainComponentStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class TrafficViewPublication(PayloadPublication):
    header_information: Optional[HeaderInformation] = field(
        default=None,
        metadata={
            "name": "headerInformation",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "required": True,
        }
    )
    traffic_view: List[TrafficView] = field(
        default_factory=list,
        metadata={
            "name": "trafficView",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
            "min_occurs": 1,
        }
    )
    traffic_view_publication_extension: Optional[ExtensionType] = field(
        default=None,
        metadata={
            "name": "trafficViewPublicationExtension",
            "type": "Element",
            "namespace": "http://datex2.eu/schema/2_0RC1/2_0",
        }
    )


@dataclass
class LineStringType(AbstractCurveType):
    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 2,
            "sequential": True,
        }
    )
    point_property: List[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 2,
            "sequential": True,
        }
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )


@dataclass
class LinearRingType(AbstractRingType):
    pos: List[Pos] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 4,
            "sequential": True,
        }
    )
    point_property: List[PointProperty] = field(
        default_factory=list,
        metadata={
            "name": "pointProperty",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "min_occurs": 4,
            "sequential": True,
        }
    )
    pos_list: Optional[PosList] = field(
        default=None,
        metadata={
            "name": "posList",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )


@dataclass
class AffectedCallStructure(AffectedStopPointStructure):
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    call_condition: List[RoutePointTypeEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "CallCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_at_stop: Optional[bool] = field(
        default=None,
        metadata={
            "name": "VehicleAtStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_location_at_stop: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "VehicleLocationAtStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timing_point: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TimingPoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    boarding_stretch: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BoardingStretch",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_stop: Optional[bool] = field(
        default=None,
        metadata={
            "name": "RequestStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ActualArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_status: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_platform_name: Optional[ArrivalPlatformName] = field(
        default=None,
        metadata={
            "name": "ArrivalPlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_boarding_activity: Optional[ArrivalBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ActualDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_status: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_platform_name: List[DeparturePlatformName] = field(
        default_factory=list,
        metadata={
            "name": "DeparturePlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_boarding_activity: Optional[DepartureBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "AimedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ExpectedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affected_interchanges: Optional["AffectedCallStructure.AffectedInterchanges"] = field(
        default=None,
        metadata={
            "name": "AffectedInterchanges",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class AffectedInterchanges:
        affected_interchange: List[AffectedInterchangeStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedInterchange",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class DistributorDepartureCancellationStructure(AbstractDistributorItemStructure):
    reason: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Reason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class FacilityMonitoringDeliveriesStructure:
    facility_monitoring_delivery: List[FacilityMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "FacilityMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class LinesDelivery(LinesDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class MonitoredFeederArrival(MonitoredFeederArrivalStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StoppingPositionChangedDepartureStructure(AbstractDistributorItemStructure):
    change_note: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "ChangeNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    new_location: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "NewLocation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TimetabledFeederArrival(TimetabledFeederArrivalStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class TrainStructure:
    train_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    short_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "ShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    private_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PrivateCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reversing_direction: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ReversingDirection",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    self_propelled: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SelfPropelled",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    type_of_fuel: Optional[TypeOfFuelEnumeration] = field(
        default=None,
        metadata={
            "name": "TypeOfFuel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    euro_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "EuroClass",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_passenger_capacities: Optional["TrainStructure.MaximumPassengerCapacities"] = field(
        default=None,
        metadata={
            "name": "MaximumPassengerCapacities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    low_floor: Optional[bool] = field(
        default=None,
        metadata={
            "name": "LowFloor",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    has_lift_or_ramp: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HasLiftOrRamp",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    has_hoist: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HasHoist",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    length: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Length",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    width: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Width",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    height: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Height",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    weight: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Weight",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facilities: Optional["TrainStructure.Facilities"] = field(
        default=None,
        metadata={
            "name": "Facilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    number_of_cars: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfCars",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_size_type: Optional[TrainSizeEnumeration] = field(
        default=None,
        metadata={
            "name": "TrainSizeType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_components: Optional["TrainStructure.TrainComponents"] = field(
        default=None,
        metadata={
            "name": "TrainComponents",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class MaximumPassengerCapacities:
        maximum_passenger_capacity: List[PassengerCapacityStructure] = field(
            default_factory=list,
            metadata={
                "name": "MaximumPassengerCapacity",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Facilities:
        vehicle_feature: List[VehicleFeature] = field(
            default_factory=list,
            metadata={
                "name": "VehicleFeature",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )
        facility: List[FacilityStructure] = field(
            default_factory=list,
            metadata={
                "name": "Facility",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )
        facility_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "FacilityRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )

    @dataclass
    class TrainComponents:
        train_component_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "TrainComponentRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        train_component: List[TrainComponent] = field(
            default_factory=list,
            metadata={
                "name": "TrainComponent",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class WaitProlongedDepartureStructure(AbstractDistributorItemStructure):
    expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class LineString(LineStringType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class LinearRing(LinearRingType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AffectedVehicleJourneyStructure:
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    dated_vehicle_journey_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "DatedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "JourneyName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator: Optional[AffectedOperatorStructure] = field(
        default=None,
        metadata={
            "name": "Operator",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    block_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BlockRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_numbers: Optional["AffectedVehicleJourneyStructure.TrainNumbers"] = field(
        default=None,
        metadata={
            "name": "TrainNumbers",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_parts: Optional["AffectedVehicleJourneyStructure.JourneyParts"] = field(
        default=None,
        metadata={
            "name": "JourneyParts",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origins: List[AffectedStopPointStructure] = field(
        default_factory=list,
        metadata={
            "name": "Origins",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destinations: List[AffectedStopPointStructure] = field(
        default_factory=list,
        metadata={
            "name": "Destinations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route: List[AffectedRouteStructure] = field(
        default_factory=list,
        metadata={
            "name": "Route",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "OriginAimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "DestinationAimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display_at_destination: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplayAtDestination",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display_at_origin: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplayAtOrigin",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    accessibility_assessment: Optional[AccessibilityAssessmentStructure] = field(
        default=None,
        metadata={
            "name": "AccessibilityAssessment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_condition: List[ServiceConditionEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "JourneyCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    calls: Optional["AffectedVehicleJourneyStructure.Calls"] = field(
        default=None,
        metadata={
            "name": "Calls",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facilities: Optional["AffectedVehicleJourneyStructure.Facilities"] = field(
        default=None,
        metadata={
            "name": "Facilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TrainNumbers:
        train_number_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "TrainNumberRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class JourneyParts:
        journey_part_info: List[JourneyPartInfoStructure] = field(
            default_factory=list,
            metadata={
                "name": "JourneyPartInfo",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Calls:
        call: List[AffectedCallStructure] = field(
            default_factory=list,
            metadata={
                "name": "Call",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Facilities:
        affected_facility: List[AffectedFacilityStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedFacility",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class ConnectionMonitoringDistributorDeliveryStructure(AbstractServiceDeliveryStructure):
    wait_prolonged_departure: List[WaitProlongedDepartureStructure] = field(
        default_factory=list,
        metadata={
            "name": "WaitProlongedDeparture",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stopping_position_changed_departure: List[StoppingPositionChangedDepartureStructure] = field(
        default_factory=list,
        metadata={
            "name": "StoppingPositionChangedDeparture",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distributor_departure_cancellation: List[DistributorDepartureCancellationStructure] = field(
        default_factory=list,
        metadata={
            "name": "DistributorDepartureCancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ConnectionMonitoringFeederDeliveryStructure(AbstractServiceDeliveryStructure):
    monitored_feeder_arrival: List[MonitoredFeederArrival] = field(
        default_factory=list,
        metadata={
            "name": "MonitoredFeederArrival",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored_feeder_arrival_cancellation: List[MonitoredFeederArrivalCancellation] = field(
        default_factory=list,
        metadata={
            "name": "MonitoredFeederArrivalCancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class ConnectionTimetableDeliveryStructure(AbstractServiceDeliveryStructure):
    timetabled_feeder_arrival: List[TimetabledFeederArrival] = field(
        default_factory=list,
        metadata={
            "name": "TimetabledFeederArrival",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timetabled_feeder_arrival_cancellation: List[TimetabledFeederArrivalCancellation] = field(
        default_factory=list,
        metadata={
            "name": "TimetabledFeederArrivalCancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class Train(TrainStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class AbstractRingPropertyType:
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        }
    )
    abstract_ring: Optional[AbstractRing] = field(
        default=None,
        metadata={
            "name": "AbstractRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        }
    )


@dataclass
class CurveArrayPropertyType:
    line_string: List[LineString] = field(
        default_factory=list,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequential": True,
        }
    )
    abstract_curve: List[AbstractCurve] = field(
        default_factory=list,
        metadata={
            "name": "AbstractCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequential": True,
        }
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class CurvePropertyType:
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    abstract_curve: Optional[AbstractCurve] = field(
        default=None,
        metadata={
            "name": "AbstractCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        }
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class LinearRingPropertyType:
    linear_ring: Optional[LinearRing] = field(
        default=None,
        metadata={
            "name": "LinearRing",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "required": True,
        }
    )


@dataclass
class AffectsScopeStructure:
    area_of_interest: Optional[AreaOfInterestEnum] = field(
        default=None,
        metadata={
            "name": "AreaOfInterest",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operators: Optional["AffectsScopeStructure.Operators"] = field(
        default=None,
        metadata={
            "name": "Operators",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    networks: Optional["AffectsScopeStructure.Networks"] = field(
        default=None,
        metadata={
            "name": "Networks",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_points: Optional["AffectsScopeStructure.StopPoints"] = field(
        default=None,
        metadata={
            "name": "StopPoints",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_places: Optional["AffectsScopeStructure.StopPlaces"] = field(
        default=None,
        metadata={
            "name": "StopPlaces",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    places: Optional["AffectsScopeStructure.Places"] = field(
        default=None,
        metadata={
            "name": "Places",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journeys: Optional["AffectsScopeStructure.VehicleJourneys"] = field(
        default=None,
        metadata={
            "name": "VehicleJourneys",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicles: Optional["AffectsScopeStructure.Vehicles"] = field(
        default=None,
        metadata={
            "name": "Vehicles",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    roads: Optional[AffectedRoadsStructure] = field(
        default=None,
        metadata={
            "name": "Roads",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Operators:
        all_operators: Optional[EmptyType] = field(
            default=None,
            metadata={
                "name": "AllOperators",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        affected_operator: List[AffectedOperatorStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedOperator",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class Networks:
        affected_network: List["AffectsScopeStructure.Networks.AffectedNetwork"] = field(
            default_factory=list,
            metadata={
                "name": "AffectedNetwork",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

        @dataclass
        class AffectedNetwork(AffectedNetworkStructure):
            pass

    @dataclass
    class StopPoints:
        affected_stop_point: List[AffectedStopPointStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedStopPoint",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class StopPlaces:
        affected_stop_place: List[AffectedStopPlaceStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedStopPlace",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Places:
        affected_place: List[AffectedPlaceStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedPlace",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class VehicleJourneys:
        affected_vehicle_journey: List[AffectedVehicleJourneyStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedVehicleJourney",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Vehicles:
        affected_vehicle: List[AffectedVehicleStructure] = field(
            default_factory=list,
            metadata={
                "name": "AffectedVehicle",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class ConnectionMonitoringDistributorDelivery(ConnectionMonitoringDistributorDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionMonitoringFeederDelivery(ConnectionMonitoringFeederDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ConnectionTimetableDelivery(ConnectionTimetableDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class TrainInCompoundTrainStructure:
    train_in_compound_train_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainInCompoundTrainCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    label: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Label",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train: Optional[Train] = field(
        default=None,
        metadata={
            "name": "Train",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display_at_origin: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplayAtOrigin",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    via: List[ViaNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "Via",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display_at_destination: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplayAtDestination",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reversed_orientation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ReversedOrientation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    passages: Optional["TrainInCompoundTrainStructure.Passages"] = field(
        default=None,
        metadata={
            "name": "Passages",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Passages:
        passage_between_trains: List[PassageBetweenTrainsStructure] = field(
            default_factory=list,
            metadata={
                "name": "PassageBetweenTrains",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
                "max_occurs": 2,
            }
        )


@dataclass
class CurveProperty(CurvePropertyType):
    class Meta:
        name = "curveProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Exterior(AbstractRingPropertyType):
    class Meta:
        name = "exterior"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class Interior(AbstractRingPropertyType):
    class Meta:
        name = "interior"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class ActionDataStructure:
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    type: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    value: List[object] = field(
        default_factory=list,
        metadata={
            "name": "Value",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    prompt: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Prompt",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publish_at_scope: Optional["ActionDataStructure.PublishAtScope"] = field(
        default=None,
        metadata={
            "name": "PublishAtScope",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class PublishAtScope:
        scope_type: Optional[ScopeTypeEnumeration] = field(
            default=None,
            metadata={
                "name": "ScopeType",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        affects: Optional[AffectsScopeStructure] = field(
            default=None,
            metadata={
                "name": "Affects",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )


@dataclass
class ConnectionMonitoringDeliveriesStructure:
    connection_monitoring_feeder_delivery: List[ConnectionMonitoringFeederDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringFeederDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_distributor_delivery: List[ConnectionMonitoringDistributorDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringDistributorDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ConnectionTimetableDeliveriesStructure:
    connection_timetable_delivery: Optional[ConnectionTimetableDelivery] = field(
        default=None,
        metadata={
            "name": "ConnectionTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class PtConsequenceStructure:
    period: List[HalfOpenTimestampOutputRangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "Period",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    condition: List[ServiceConditionEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "Condition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    condition_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ConditionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    severity: Optional[SeverityEnumeration] = field(
        default=None,
        metadata={
            "name": "Severity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affects: Optional[AffectsScopeStructure] = field(
        default=None,
        metadata={
            "name": "Affects",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    suitabilities: Optional["PtConsequenceStructure.Suitabilities"] = field(
        default=None,
        metadata={
            "name": "Suitabilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advice: Optional[PtAdviceStructure] = field(
        default=None,
        metadata={
            "name": "Advice",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    blocking: Optional[BlockingStructure] = field(
        default=None,
        metadata={
            "name": "Blocking",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    boarding: Optional[BoardingStructure] = field(
        default=None,
        metadata={
            "name": "Boarding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delays: Optional[DelaysStructure] = field(
        default=None,
        metadata={
            "name": "Delays",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    casualties: Optional[CasualtiesStructure] = field(
        default=None,
        metadata={
            "name": "Casualties",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    easements: List[EasementsStructure] = field(
        default_factory=list,
        metadata={
            "name": "Easements",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Suitabilities:
        suitability: List[SuitabilityStructure] = field(
            default_factory=list,
            metadata={
                "name": "Suitability",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class TrainInCompoundTrain(TrainInCompoundTrainStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class PolygonType(AbstractSurfaceType):
    exterior: Optional[Exterior] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    interior: List[Interior] = field(
        default_factory=list,
        metadata={
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )


@dataclass
class CompoundTrainStructure:
    compound_train_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "CompoundTrainCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    short_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "ShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    private_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "PrivateCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reversing_direction: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ReversingDirection",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    self_propelled: Optional[bool] = field(
        default=None,
        metadata={
            "name": "SelfPropelled",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    type_of_fuel: Optional[TypeOfFuelEnumeration] = field(
        default=None,
        metadata={
            "name": "TypeOfFuel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    euro_class: Optional[str] = field(
        default=None,
        metadata={
            "name": "EuroClass",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    maximum_passenger_capacities: Optional["CompoundTrainStructure.MaximumPassengerCapacities"] = field(
        default=None,
        metadata={
            "name": "MaximumPassengerCapacities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    low_floor: Optional[bool] = field(
        default=None,
        metadata={
            "name": "LowFloor",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    has_lift_or_ramp: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HasLiftOrRamp",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    has_hoist: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HasHoist",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    length: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Length",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    width: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Width",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    height: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Height",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    weight: Optional[Decimal] = field(
        default=None,
        metadata={
            "name": "Weight",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facilities: Optional["CompoundTrainStructure.Facilities"] = field(
        default=None,
        metadata={
            "name": "Facilities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    trains_in_compound_train: Optional["CompoundTrainStructure.TrainsInCompoundTrain"] = field(
        default=None,
        metadata={
            "name": "TrainsInCompoundTrain",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TrainsInCompoundTrain:
        train_in_compound_train_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "TrainInCompoundTrainRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        train_in_compound_train: List[TrainInCompoundTrain] = field(
            default_factory=list,
            metadata={
                "name": "TrainInCompoundTrain",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class MaximumPassengerCapacities:
        maximum_passenger_capacity: List[PassengerCapacityStructure] = field(
            default_factory=list,
            metadata={
                "name": "MaximumPassengerCapacity",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class Facilities:
        vehicle_feature: List[VehicleFeature] = field(
            default_factory=list,
            metadata={
                "name": "VehicleFeature",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )
        facility: List[FacilityStructure] = field(
            default_factory=list,
            metadata={
                "name": "Facility",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )
        facility_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "FacilityRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "sequential": True,
            }
        )


@dataclass
class ParameterisedActionStructure(SimpleActionStructure):
    description: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    action_data: List[ActionDataStructure] = field(
        default_factory=list,
        metadata={
            "name": "ActionData",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publication_window: List[ClosedTimestampRangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "PublicationWindow",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PtConsequencesStructure:
    consequence: List[PtConsequenceStructure] = field(
        default_factory=list,
        metadata={
            "name": "Consequence",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class Polygon(PolygonType):
    class Meta:
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class CompoundTrain(CompoundTrainStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ManualActionStructure(ParameterisedActionStructure):
    pass


@dataclass
class PublishToDisplayActionStructure(ParameterisedActionStructure):
    on_place: Optional[bool] = field(
        default=None,
        metadata={
            "name": "OnPlace",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    on_board: Optional[bool] = field(
        default=None,
        metadata={
            "name": "OnBoard",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PublishToMobileActionStructure(ParameterisedActionStructure):
    incidents: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Incidents",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    home_page: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HomePage",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PublishToTvActionStructure(ParameterisedActionStructure):
    ceefax: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Ceefax",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    teletext: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Teletext",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PublishToWebActionStructure(ParameterisedActionStructure):
    incidents: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Incidents",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    home_page: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HomePage",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    ticker: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Ticker",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    social_network: List[str] = field(
        default_factory=list,
        metadata={
            "name": "SocialNetwork",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PushedActionStructure(ParameterisedActionStructure):
    before_notices: Optional["PushedActionStructure.BeforeNotices"] = field(
        default=None,
        metadata={
            "name": "BeforeNotices",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    clear_notice: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ClearNotice",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class BeforeNotices:
        interval: List[XmlDuration] = field(
            default_factory=list,
            metadata={
                "name": "Interval",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class GeometricPrimitivePropertyType:
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    abstract_surface: Optional[AbstractSurface] = field(
        default=None,
        metadata={
            "name": "AbstractSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    abstract_curve: Optional[AbstractCurve] = field(
        default=None,
        metadata={
            "name": "AbstractCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    abstract_geometric_primitive: Optional[AbstractGeometricPrimitive] = field(
        default=None,
        metadata={
            "name": "AbstractGeometricPrimitive",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        }
    )


@dataclass
class GeometryArrayPropertyType:
    polygon: List[Polygon] = field(
        default_factory=list,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequential": True,
        }
    )
    abstract_surface: List[AbstractSurface] = field(
        default_factory=list,
        metadata={
            "name": "AbstractSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequential": True,
        }
    )
    line_string: List[LineString] = field(
        default_factory=list,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequential": True,
        }
    )
    abstract_curve: List[AbstractCurve] = field(
        default_factory=list,
        metadata={
            "name": "AbstractCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequential": True,
        }
    )
    point: List[Point] = field(
        default_factory=list,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequential": True,
        }
    )
    abstract_geometric_primitive: List[AbstractGeometricPrimitive] = field(
        default_factory=list,
        metadata={
            "name": "AbstractGeometricPrimitive",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequential": True,
        }
    )
    abstract_geometry: List[AbstractGeometry] = field(
        default_factory=list,
        metadata={
            "name": "AbstractGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequential": True,
        }
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class GeometryPropertyType:
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    abstract_surface: Optional[AbstractSurface] = field(
        default=None,
        metadata={
            "name": "AbstractSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    line_string: Optional[LineString] = field(
        default=None,
        metadata={
            "name": "LineString",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    abstract_curve: Optional[AbstractCurve] = field(
        default=None,
        metadata={
            "name": "AbstractCurve",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    point: Optional[Point] = field(
        default=None,
        metadata={
            "name": "Point",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    abstract_geometric_primitive: Optional[AbstractGeometricPrimitive] = field(
        default=None,
        metadata={
            "name": "AbstractGeometricPrimitive",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    abstract_geometry: Optional[AbstractGeometry] = field(
        default=None,
        metadata={
            "name": "AbstractGeometry",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        }
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class SurfaceArrayPropertyType:
    polygon: List[Polygon] = field(
        default_factory=list,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequential": True,
        }
    )
    abstract_surface: List[AbstractSurface] = field(
        default_factory=list,
        metadata={
            "name": "AbstractSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
            "sequential": True,
        }
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class SurfacePropertyType:
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    abstract_surface: Optional[AbstractSurface] = field(
        default=None,
        metadata={
            "name": "AbstractSurface",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )
    nil_reason: Optional[Union[str, NilReasonEnumerationValue]] = field(
        default=None,
        metadata={
            "name": "nilReason",
            "type": "Attribute",
            "pattern": r"other:\w{2,}",
        }
    )
    owns: bool = field(
        default=False,
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class FlexibleAreaStructure:
    bounding_box: Optional[BoundingBoxStructure] = field(
        default=None,
        metadata={
            "name": "BoundingBox",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    circular_area: Optional[CircularAreaStructure] = field(
        default=None,
        metadata={
            "name": "CircularArea",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    polygon: Optional[Polygon] = field(
        default=None,
        metadata={
            "name": "Polygon",
            "type": "Element",
            "namespace": "http://www.opengis.net/gml/3.2",
        }
    )


@dataclass
class ManualAction(ManualActionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class NotifyByEmailActionStructure(PushedActionStructure):
    email: Optional[str] = field(
        default=None,
        metadata={
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class NotifyByPagerActionStructure(PushedActionStructure):
    pager_group_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "PagerGroupRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    pager: Optional[str] = field(
        default=None,
        metadata={
            "name": "Pager",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class NotifyBySmsActionStructure(PushedActionStructure):
    phone: Optional[str] = field(
        default=None,
        metadata={
            "name": "Phone",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    premium: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Premium",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class NotifyUserActionStructure(PushedActionStructure):
    workgroup_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "WorkgroupRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    user_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "UserName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    user_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "UserRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PublishToAlertsActionStructure(PushedActionStructure):
    by_email: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ByEmail",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    by_mobile: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ByMobile",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PublishToDisplayAction(PublishToDisplayActionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class PublishToMobileAction(PublishToMobileActionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class PublishToTvAction(PublishToTvActionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class PublishToWebAction(PublishToWebActionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SurfaceProperty(SurfacePropertyType):
    class Meta:
        name = "surfaceProperty"
        namespace = "http://www.opengis.net/gml/3.2"


@dataclass
class AimedFlexibleArea(FlexibleAreaStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class NotifyByEmailAction(NotifyByEmailActionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class NotifyByPagerAction(NotifyByPagerActionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class NotifyBySmsAction(NotifyBySmsActionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class NotifyUserAction(NotifyUserActionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class PublishToAlertsAction(PublishToAlertsActionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class PlannedStopAssignmentStructure:
    aimed_quay_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AimedQuayRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_quay_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "AimedQuayName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    quay_type: Optional[TypeOfNestedQuayEnumeration] = field(
        default=None,
        metadata={
            "name": "QuayType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_boarding_position_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AimedBoardingPositionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_boarding_position_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "AimedBoardingPositionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_flexible_area: Optional[AimedFlexibleArea] = field(
        default=None,
        metadata={
            "name": "AimedFlexibleArea",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_flexible_area_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AimedFlexibleAreaRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_location_name: List[AimedLocationName] = field(
        default_factory=list,
        metadata={
            "name": "AimedLocationName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopAssignmentStructure:
    aimed_quay_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AimedQuayRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_quay_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "AimedQuayName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_quay_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExpectedQuayRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_quay_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ExpectedQuayName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_quay_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ActualQuayRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_quay_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ActualQuayName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    quay_type: Optional[TypeOfNestedQuayEnumeration] = field(
        default=None,
        metadata={
            "name": "QuayType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_boarding_position_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AimedBoardingPositionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_boarding_position_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "AimedBoardingPositionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_boarding_position_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExpectedBoardingPositionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_boarding_position_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ExpectedBoardingPositionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_boarding_position_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ActualBoardingPositionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_boarding_position_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ActualBoardingPositionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_flexible_area: Optional[AimedFlexibleArea] = field(
        default=None,
        metadata={
            "name": "AimedFlexibleArea",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_flexible_area_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "AimedFlexibleAreaRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_location_name: List[AimedLocationName] = field(
        default_factory=list,
        metadata={
            "name": "AimedLocationName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_flexible_area: Optional[FlexibleAreaStructure] = field(
        default=None,
        metadata={
            "name": "ExpectedFlexibleArea",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_flexible_area_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExpectedFlexibleAreaRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_location_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ExpectedLocationName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_flexible_area: Optional[FlexibleAreaStructure] = field(
        default=None,
        metadata={
            "name": "ActualFlexibleArea",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_flexible_area_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ActualFlexibleAreaRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_location_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ActualLocationName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TextualContentStructure:
    textual_content_size: List[str] = field(
        default_factory=list,
        metadata={
            "name": "TextualContentSize",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "tokens": True,
        }
    )
    publish_to_web_action: List[PublishToWebAction] = field(
        default_factory=list,
        metadata={
            "name": "PublishToWebAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publish_to_mobile_action: List[PublishToMobileAction] = field(
        default_factory=list,
        metadata={
            "name": "PublishToMobileAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publish_to_tv_action: List[PublishToTvAction] = field(
        default_factory=list,
        metadata={
            "name": "PublishToTvAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publish_to_alerts_action: List[PublishToAlertsAction] = field(
        default_factory=list,
        metadata={
            "name": "PublishToAlertsAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publish_to_display_action: List[PublishToDisplayAction] = field(
        default_factory=list,
        metadata={
            "name": "PublishToDisplayAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    manual_action: List[ManualAction] = field(
        default_factory=list,
        metadata={
            "name": "ManualAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    notify_by_email_action: List[NotifyByEmailAction] = field(
        default_factory=list,
        metadata={
            "name": "NotifyByEmailAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    notify_by_sms_action: List[NotifyBySmsAction] = field(
        default_factory=list,
        metadata={
            "name": "NotifyBySmsAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    notify_by_pager_action: List[NotifyByPagerAction] = field(
        default_factory=list,
        metadata={
            "name": "NotifyByPagerAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    notify_user_action: List[NotifyUserAction] = field(
        default_factory=list,
        metadata={
            "name": "NotifyUserAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    summary_content: Optional[SummaryContentStructure] = field(
        default=None,
        metadata={
            "name": "SummaryContent",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    reason_content: Optional[ReasonContentStructure] = field(
        default=None,
        metadata={
            "name": "ReasonContent",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description_content: List[DescriptionContentStructure] = field(
        default_factory=list,
        metadata={
            "name": "DescriptionContent",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    consequence_content: List[ConsequenceContentStructure] = field(
        default_factory=list,
        metadata={
            "name": "ConsequenceContent",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    recommendation_content: List[RecommendationContentStructure] = field(
        default_factory=list,
        metadata={
            "name": "RecommendationContent",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    duration_content: Optional[DurationContentStructure] = field(
        default=None,
        metadata={
            "name": "DurationContent",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    remark_content: List[RemarkContentStructure] = field(
        default_factory=list,
        metadata={
            "name": "RemarkContent",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    info_link: List[InfoLinkStructure] = field(
        default_factory=list,
        metadata={
            "name": "InfoLink",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    image: List[ImageStructure] = field(
        default_factory=list,
        metadata={
            "name": "Image",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    internal: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "Internal",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class FormationAssignmentStructure:
    compound_train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CompoundTrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_component_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TrainComponentRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    entrance_to_vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "EntranceToVehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_in_formation_status: Optional[VehicleInFormationStatusStructure] = field(
        default=None,
        metadata={
            "name": "VehicleInFormationStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_stop_assignment: List[StopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "TrainStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class PassengerInformationActionStructure(ParameterisedActionStructure):
    action_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ActionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    recorded_at_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "RecordedAtTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    version: Optional[int] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    source_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "SourceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    owner_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OwnerRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    perspective: List[PerspectiveEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "Perspective",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    action_priority: Optional[int] = field(
        default=None,
        metadata={
            "name": "ActionPriority",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    textual_content: List[TextualContentStructure] = field(
        default_factory=list,
        metadata={
            "name": "TextualContent",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class ArrivalFormationAssignment(FormationAssignmentStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class DepartureFormationAssignment(FormationAssignmentStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class PassengerInformationAction(PassengerInformationActionStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class DatedCallStructure:
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "VisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_name: List[StopPointName] = field(
        default_factory=list,
        metadata={
            "name": "StopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extra_call: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ExtraCall",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    cancellation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timing_point: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TimingPoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    boarding_stretch: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BoardingStretch",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_stop: Optional[bool] = field(
        default=None,
        metadata={
            "name": "RequestStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    call_note: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "CallNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_platform_name: Optional[ArrivalPlatformName] = field(
        default=None,
        metadata={
            "name": "ArrivalPlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_boarding_activity: Optional[ArrivalBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_stop_assignment: List[PlannedStopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_formation_assignment: List[ArrivalFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_platform_name: Optional[DeparturePlatformName] = field(
        default=None,
        metadata={
            "name": "DeparturePlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_boarding_activity: Optional[DepartureBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_stop_assignment: List[PlannedStopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "DepartureStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_formation_assignment: List[DepartureFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DepartureFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "DepartureOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_latest_passenger_access_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedLatestPassengerAccessTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "AimedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    targeted_interchange: List[TargetedInterchangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "TargetedInterchange",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    from_service_journey_interchange: List[FromServiceJourneyInterchangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "FromServiceJourneyInterchange",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    to_service_journey_interchange: List[ToServiceJourneyInterchangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "ToServiceJourneyInterchange",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class EstimatedCallStructure:
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "VisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_name: List[StopPointName] = field(
        default_factory=list,
        metadata={
            "name": "StopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extra_call: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ExtraCall",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    cancellation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    prediction_inaccurate: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PredictionInaccurate",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    prediction_inaccurate_reason: Optional[PredictionInaccurateReasonEnumeration] = field(
        default=None,
        metadata={
            "name": "PredictionInaccurateReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    occupancy: Optional[OccupancyEnumeration] = field(
        default=None,
        metadata={
            "name": "Occupancy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timing_point: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TimingPoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    boarding_stretch: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BoardingStretch",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_stop: Optional[bool] = field(
        default=None,
        metadata={
            "name": "RequestStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    call_note: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "CallNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    formation_condition: List[FormationCondition] = field(
        default_factory=list,
        metadata={
            "name": "FormationCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_condition_element: List[FacilityConditionElement] = field(
        default_factory=list,
        metadata={
            "name": "FacilityConditionElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_change_element: Optional[FacilityChangeElement] = field(
        default=None,
        metadata={
            "name": "FacilityChangeElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: List[SituationRef] = field(
        default_factory=list,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    latest_expected_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "LatestExpectedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_arrival_prediction_quality: Optional[PredictionQualityStructure] = field(
        default=None,
        metadata={
            "name": "ExpectedArrivalPredictionQuality",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_prediction_unknown: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "ArrivalPredictionUnknown",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_status: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_cancellation_reason: Optional[ArrivalCancellationReason] = field(
        default=None,
        metadata={
            "name": "ArrivalCancellationReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_proximity_text: Optional[ArrivalProximityText] = field(
        default=None,
        metadata={
            "name": "ArrivalProximityText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_platform_name: Optional[ArrivalPlatformName] = field(
        default=None,
        metadata={
            "name": "ArrivalPlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_boarding_activity: Optional[ArrivalBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_stop_assignment: List[StopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_formation_assignment: List[ArrivalFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_orientation_relative_to_quay: List[ArrivalOrientationRelativeToQuay] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalOrientationRelativeToQuay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    provisional_expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ProvisionalExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    earliest_expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "EarliestExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_prediction_quality: Optional[PredictionQualityStructure] = field(
        default=None,
        metadata={
            "name": "ExpectedDeparturePredictionQuality",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_prediction_unknown: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "DeparturePredictionUnknown",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_latest_passenger_access_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedLatestPassengerAccessTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_latest_passenger_access_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedLatestPassengerAccessTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_status: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_cancellation_reason: Optional[DepartureCancellationReason] = field(
        default=None,
        metadata={
            "name": "DepartureCancellationReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_proximity_text: Optional[DepartureProximityText] = field(
        default=None,
        metadata={
            "name": "DepartureProximityText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_platform_name: Optional[DeparturePlatformName] = field(
        default=None,
        metadata={
            "name": "DeparturePlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_boarding_activity: Optional[DepartureBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_stop_assignment: List[StopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "DepartureStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_formation_assignment: List[DepartureFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DepartureFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_orientation_relative_to_quay: List[DepartureOrientationRelativeToQuay] = field(
        default_factory=list,
        metadata={
            "name": "DepartureOrientationRelativeToQuay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_occupancy: List[ExpectedDepartureOccupancy] = field(
        default_factory=list,
        metadata={
            "name": "ExpectedDepartureOccupancy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_capacities: List[ExpectedDepartureCapacities] = field(
        default_factory=list,
        metadata={
            "name": "ExpectedDepartureCapacities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "DepartureOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "AimedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ExpectedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distance_from_stop: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistanceFromStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    number_of_stops_away: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfStopsAway",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class MonitoredCallStructure(AbstractMonitoredCallStructure):
    vehicle_at_stop: Optional[bool] = field(
        default=None,
        metadata={
            "name": "VehicleAtStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_location_at_stop: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "VehicleLocationAtStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reverses_at_stop: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ReversesAtStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    platform_traversal: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PlatformTraversal",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    signal_status: Optional[str] = field(
        default=None,
        metadata={
            "name": "SignalStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timing_point: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TimingPoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    boarding_stretch: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BoardingStretch",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_stop: Optional[bool] = field(
        default=None,
        metadata={
            "name": "RequestStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    call_note: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "CallNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    formation_condition: List[FormationCondition] = field(
        default_factory=list,
        metadata={
            "name": "FormationCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_condition_element: List[FacilityConditionElement] = field(
        default_factory=list,
        metadata={
            "name": "FacilityConditionElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_change_element: Optional[FacilityChangeElement] = field(
        default=None,
        metadata={
            "name": "FacilityChangeElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: List[SituationRef] = field(
        default_factory=list,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ActualArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    latest_expected_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "LatestExpectedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_status: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_cancellation_reason: Optional[ArrivalCancellationReason] = field(
        default=None,
        metadata={
            "name": "ArrivalCancellationReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_proximity_text: Optional[ArrivalProximityText] = field(
        default=None,
        metadata={
            "name": "ArrivalProximityText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_platform_name: Optional[ArrivalPlatformName] = field(
        default=None,
        metadata={
            "name": "ArrivalPlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_boarding_activity: Optional[ArrivalBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_stop_assignment: List[StopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_formation_assignment: List[ArrivalFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_orientation_relative_to_quay: List[ArrivalOrientationRelativeToQuay] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalOrientationRelativeToQuay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ActualDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    provisional_expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ProvisionalExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    earliest_expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "EarliestExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_prediction_quality: Optional[PredictionQualityStructure] = field(
        default=None,
        metadata={
            "name": "ExpectedDeparturePredictionQuality",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_latest_passenger_access_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedLatestPassengerAccessTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_latest_passenger_access_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedLatestPassengerAccessTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_status: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_cancellation_reason: Optional[DepartureCancellationReason] = field(
        default=None,
        metadata={
            "name": "DepartureCancellationReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_proximity_text: Optional[DepartureProximityText] = field(
        default=None,
        metadata={
            "name": "DepartureProximityText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_platform_name: Optional[DeparturePlatformName] = field(
        default=None,
        metadata={
            "name": "DeparturePlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_boarding_activity: Optional[DepartureBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_stop_assignment: List[StopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "DepartureStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_formation_assignment: List[DepartureFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DepartureFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_orientation_relative_to_quay: List[DepartureOrientationRelativeToQuay] = field(
        default_factory=list,
        metadata={
            "name": "DepartureOrientationRelativeToQuay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_occupancy: List[ExpectedDepartureOccupancy] = field(
        default_factory=list,
        metadata={
            "name": "ExpectedDepartureOccupancy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_capacities: List[ExpectedDepartureCapacities] = field(
        default_factory=list,
        metadata={
            "name": "ExpectedDepartureCapacities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "DepartureOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "AimedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ExpectedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distance_from_stop: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistanceFromStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    number_of_stops_away: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfStopsAway",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class OnwardCallStructure(AbstractMonitoredCallStructure):
    vehicle_at_stop: Optional[bool] = field(
        default=None,
        metadata={
            "name": "VehicleAtStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timing_point: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TimingPoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    latest_expected_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "LatestExpectedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_arrival_prediction_quality: Optional[PredictionQualityStructure] = field(
        default=None,
        metadata={
            "name": "ExpectedArrivalPredictionQuality",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_prediction_unknown: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "ArrivalPredictionUnknown",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_status: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_cancellation_reason: Optional[ArrivalCancellationReason] = field(
        default=None,
        metadata={
            "name": "ArrivalCancellationReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_proximity_text: Optional[ArrivalProximityText] = field(
        default=None,
        metadata={
            "name": "ArrivalProximityText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_platform_name: Optional[ArrivalPlatformName] = field(
        default=None,
        metadata={
            "name": "ArrivalPlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_boarding_activity: Optional[ArrivalBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_stop_assignment: List[StopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_formation_assignment: List[ArrivalFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_orientation_relative_to_quay: List[ArrivalOrientationRelativeToQuay] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalOrientationRelativeToQuay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    provisional_expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ProvisionalExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    earliest_expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "EarliestExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_prediction_quality: Optional[PredictionQualityStructure] = field(
        default=None,
        metadata={
            "name": "ExpectedDeparturePredictionQuality",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_prediction_unknown: Optional[EmptyType] = field(
        default=None,
        metadata={
            "name": "DeparturePredictionUnknown",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_latest_passenger_access_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedLatestPassengerAccessTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_latest_passenger_access_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedLatestPassengerAccessTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_status: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_cancellation_reason: Optional[DepartureCancellationReason] = field(
        default=None,
        metadata={
            "name": "DepartureCancellationReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_proximity_text: Optional[DepartureProximityText] = field(
        default=None,
        metadata={
            "name": "DepartureProximityText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_platform_name: Optional[DeparturePlatformName] = field(
        default=None,
        metadata={
            "name": "DeparturePlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_boarding_activity: Optional[DepartureBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_stop_assignment: List[StopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "DepartureStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_formation_assignment: List[DepartureFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DepartureFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_orientation_relative_to_quay: List[DepartureOrientationRelativeToQuay] = field(
        default_factory=list,
        metadata={
            "name": "DepartureOrientationRelativeToQuay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_occupancy: List[ExpectedDepartureOccupancy] = field(
        default_factory=list,
        metadata={
            "name": "ExpectedDepartureOccupancy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_capacities: List[ExpectedDepartureCapacities] = field(
        default_factory=list,
        metadata={
            "name": "ExpectedDepartureCapacities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "DepartureOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "AimedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ExpectedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    distance_from_stop: Optional[int] = field(
        default=None,
        metadata={
            "name": "DistanceFromStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    number_of_stops_away: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberOfStopsAway",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PublishingActionStructure:
    publish_at_scope: Optional["PublishingActionStructure.PublishAtScope"] = field(
        default=None,
        metadata={
            "name": "PublishAtScope",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    passenger_information_action: List[PassengerInformationAction] = field(
        default_factory=list,
        metadata={
            "name": "PassengerInformationAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )

    @dataclass
    class PublishAtScope:
        scope_type: Optional[ScopeTypeEnumeration] = field(
            default=None,
            metadata={
                "name": "ScopeType",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )
        affects: Optional[AffectsScopeStructure] = field(
            default=None,
            metadata={
                "name": "Affects",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "required": True,
            }
        )


@dataclass
class RecordedCallStructure:
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "VisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_point_name: List[StopPointName] = field(
        default_factory=list,
        metadata={
            "name": "StopPointName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extra_call: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ExtraCall",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    cancellation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    prediction_inaccurate: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PredictionInaccurate",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    prediction_inaccurate_reason: Optional[PredictionInaccurateReasonEnumeration] = field(
        default=None,
        metadata={
            "name": "PredictionInaccurateReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    occupancy: Optional[OccupancyEnumeration] = field(
        default=None,
        metadata={
            "name": "Occupancy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timing_point: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TimingPoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    boarding_stretch: Optional[bool] = field(
        default=None,
        metadata={
            "name": "BoardingStretch",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    request_stop: Optional[bool] = field(
        default=None,
        metadata={
            "name": "RequestStop",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    call_note: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "CallNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    formation_condition: List[FormationCondition] = field(
        default_factory=list,
        metadata={
            "name": "FormationCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_condition_element: List[FacilityConditionElement] = field(
        default_factory=list,
        metadata={
            "name": "FacilityConditionElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_change_element: Optional[FacilityChangeElement] = field(
        default=None,
        metadata={
            "name": "FacilityChangeElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: List[SituationRef] = field(
        default_factory=list,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ActualArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_status: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_cancellation_reason: Optional[ArrivalCancellationReason] = field(
        default=None,
        metadata={
            "name": "ArrivalCancellationReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_proximity_text: Optional[ArrivalProximityText] = field(
        default=None,
        metadata={
            "name": "ArrivalProximityText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_platform_name: Optional[ArrivalPlatformName] = field(
        default=None,
        metadata={
            "name": "ArrivalPlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_boarding_activity: Optional[ArrivalBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_stop_assignment: List[StopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_formation_assignment: List[ArrivalFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_orientation_relative_to_quay: List[ArrivalOrientationRelativeToQuay] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalOrientationRelativeToQuay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ExpectedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_platform_name: Optional[DeparturePlatformName] = field(
        default=None,
        metadata={
            "name": "DeparturePlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ActualDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_status: Optional[CallStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_cancellation_reason: Optional[DepartureCancellationReason] = field(
        default=None,
        metadata={
            "name": "DepartureCancellationReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_proximity_text: Optional[DepartureProximityText] = field(
        default=None,
        metadata={
            "name": "DepartureProximityText",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_boarding_activity: Optional[DepartureBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_stop_assignment: List[StopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "DepartureStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_formation_assignment: List[DepartureFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DepartureFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_orientation_relative_to_quay: List[DepartureOrientationRelativeToQuay] = field(
        default_factory=list,
        metadata={
            "name": "DepartureOrientationRelativeToQuay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    recorded_departure_occupancy: List[RecordedDepartureOccupancy] = field(
        default_factory=list,
        metadata={
            "name": "RecordedDepartureOccupancy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    recorded_departure_capacities: List[RecordedDepartureCapacities] = field(
        default_factory=list,
        metadata={
            "name": "RecordedDepartureCapacities",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "DepartureOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "AimedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    expected_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ExpectedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actual_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ActualHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class TargetedCallStructure:
    stop_point_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopPointRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    visit_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "VisitNumber",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    order: Optional[int] = field(
        default=None,
        metadata={
            "name": "Order",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timing_point: Optional[bool] = field(
        default=None,
        metadata={
            "name": "TimingPoint",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProductCategoryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ServiceFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VehicleFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_platform_name: Optional[ArrivalPlatformName] = field(
        default=None,
        metadata={
            "name": "ArrivalPlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_boarding_activity: Optional[ArrivalBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "ArrivalBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_stop_assignment: List[PlannedStopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_formation_assignment: List[ArrivalFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    arrival_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ArrivalOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_platform_name: Optional[DeparturePlatformName] = field(
        default=None,
        metadata={
            "name": "DeparturePlatformName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_boarding_activity: Optional[DepartureBoardingActivityEnumeration] = field(
        default=None,
        metadata={
            "name": "DepartureBoardingActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_stop_assignment: List[PlannedStopAssignmentStructure] = field(
        default_factory=list,
        metadata={
            "name": "DepartureStopAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_formation_assignment: List[DepartureFormationAssignment] = field(
        default_factory=list,
        metadata={
            "name": "DepartureFormationAssignment",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    departure_operator_refs: List[str] = field(
        default_factory=list,
        metadata={
            "name": "DepartureOperatorRefs",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_latest_passenger_access_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "AimedLatestPassengerAccessTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    aimed_headway_interval: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "AimedHeadwayInterval",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class ActionsStructure:
    publish_to_web_action: List[PublishToWebAction] = field(
        default_factory=list,
        metadata={
            "name": "PublishToWebAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publish_to_mobile_action: List[PublishToMobileAction] = field(
        default_factory=list,
        metadata={
            "name": "PublishToMobileAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publish_to_tv_action: List[PublishToTvAction] = field(
        default_factory=list,
        metadata={
            "name": "PublishToTvAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publish_to_alerts_action: List[PublishToAlertsAction] = field(
        default_factory=list,
        metadata={
            "name": "PublishToAlertsAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publish_to_display_action: List[PublishToDisplayAction] = field(
        default_factory=list,
        metadata={
            "name": "PublishToDisplayAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    manual_action: List[ManualAction] = field(
        default_factory=list,
        metadata={
            "name": "ManualAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    notify_by_email_action: List[NotifyByEmailAction] = field(
        default_factory=list,
        metadata={
            "name": "NotifyByEmailAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    notify_by_sms_action: List[NotifyBySmsAction] = field(
        default_factory=list,
        metadata={
            "name": "NotifyBySmsAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    notify_by_pager_action: List[NotifyByPagerAction] = field(
        default_factory=list,
        metadata={
            "name": "NotifyByPagerAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    notify_user_action: List[NotifyUserAction] = field(
        default_factory=list,
        metadata={
            "name": "NotifyUserAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publishing_action: List[PublishingActionStructure] = field(
        default_factory=list,
        metadata={
            "name": "PublishingAction",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[object] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DatedCall(DatedCallStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EstimatedCall(EstimatedCallStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class OnwardCallsStructure:
    onward_call: List[OnwardCallStructure] = field(
        default_factory=list,
        metadata={
            "name": "OnwardCall",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class RecordedCall(RecordedCallStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class TargetedCall(TargetedCallStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ContextStructure:
    country_ref: Optional[IanaCountryTldEnumeration] = field(
        default=None,
        metadata={
            "name": "CountryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    participant_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ParticipantRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    topographic_place_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "TopographicPlaceRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    topographic_place_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "TopographicPlaceName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    default_language: Optional[str] = field(
        default=None,
        metadata={
            "name": "DefaultLanguage",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    network_context: Optional[NetworkContextStructure] = field(
        default=None,
        metadata={
            "name": "NetworkContext",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    actions: Optional[ActionsStructure] = field(
        default=None,
        metadata={
            "name": "Actions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DatedVehicleJourneyStructure:
    dated_vehicle_journey_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "DatedVehicleJourneyCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extra_journey: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ExtraJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    cancellation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPatternRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "JourneyPatternName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_lines_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupOfLinesRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding: Optional[BrandingStructure] = field(
        default=None,
        metadata={
            "name": "Branding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display_at_origin: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplayAtOrigin",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    via: List[ViaNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "Via",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display_at_destination: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplayAtDestination",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProductCategoryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ServiceFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VehicleFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "VehicleJourneyName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_note: List[JourneyNote] = field(
        default_factory=list,
        metadata={
            "name": "JourneyNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    public_contact: Optional[SimpleContactStructure] = field(
        default=None,
        metadata={
            "name": "PublicContact",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operations_contact: Optional[SimpleContactStructure] = field(
        default=None,
        metadata={
            "name": "OperationsContact",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_note: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "LineNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    first_or_last_journey: Optional[FirstOrLastJourneyEnumeration] = field(
        default=None,
        metadata={
            "name": "FirstOrLastJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    headway_service: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HeadwayService",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Monitored",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_block_part: List[TrainBlockPartStructure] = field(
        default_factory=list,
        metadata={
            "name": "TrainBlockPart",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    block_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BlockRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    course_of_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CourseOfJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_numbers: Optional["DatedVehicleJourneyStructure.TrainNumbers"] = field(
        default=None,
        metadata={
            "name": "TrainNumbers",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_parts: Optional["DatedVehicleJourneyStructure.JourneyParts"] = field(
        default=None,
        metadata={
            "name": "JourneyParts",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_elements: Optional["DatedVehicleJourneyStructure.TrainElements"] = field(
        default=None,
        metadata={
            "name": "TrainElements",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    trains: Optional["DatedVehicleJourneyStructure.Trains"] = field(
        default=None,
        metadata={
            "name": "Trains",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    compound_trains: Optional["DatedVehicleJourneyStructure.CompoundTrains"] = field(
        default=None,
        metadata={
            "name": "CompoundTrains",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    dated_calls: Optional["DatedVehicleJourneyStructure.DatedCalls"] = field(
        default=None,
        metadata={
            "name": "DatedCalls",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    journey_relations: Optional[JourneyRelationsStructure] = field(
        default=None,
        metadata={
            "name": "JourneyRelations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class DatedCalls:
        dated_call: List[DatedCall] = field(
            default_factory=list,
            metadata={
                "name": "DatedCall",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 2,
            }
        )

    @dataclass
    class TrainNumbers:
        train_number_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "TrainNumberRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class JourneyParts:
        journey_part_info: List[DatedJourneyPartInfoStructure] = field(
            default_factory=list,
            metadata={
                "name": "JourneyPartInfo",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class TrainElements:
        train_element_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "TrainElementRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        train_element: List[TrainElement] = field(
            default_factory=list,
            metadata={
                "name": "TrainElement",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class Trains:
        train_ref: List[object] = field(
            default_factory=list,
            metadata={
                "name": "TrainRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        train: List[Train] = field(
            default_factory=list,
            metadata={
                "name": "Train",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class CompoundTrains:
        compound_train_ref: List[object] = field(
            default_factory=list,
            metadata={
                "name": "CompoundTrainRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        compound_train: List[CompoundTrain] = field(
            default_factory=list,
            metadata={
                "name": "CompoundTrain",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class EstimatedVehicleJourneyStructure:
    recorded_at_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "RecordedAtTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    dated_vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DatedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    dated_vehicle_journey_indirect_ref: Optional[DatedVehicleJourneyIndirectRefStructure] = field(
        default=None,
        metadata={
            "name": "DatedVehicleJourneyIndirectRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_vehicle_journey_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "EstimatedVehicleJourneyCode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extra_journey: Optional[bool] = field(
        default=None,
        metadata={
            "name": "ExtraJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    cancellation: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Cancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPatternRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "JourneyPatternName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_lines_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupOfLinesRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding: Optional[BrandingStructure] = field(
        default=None,
        metadata={
            "name": "Branding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display_at_origin: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplayAtOrigin",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    via: List[ViaNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "Via",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display_at_destination: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplayAtDestination",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProductCategoryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ServiceFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VehicleFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "VehicleJourneyName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_note: List[JourneyNote] = field(
        default_factory=list,
        metadata={
            "name": "JourneyNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    public_contact: Optional[SimpleContactStructure] = field(
        default=None,
        metadata={
            "name": "PublicContact",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operations_contact: Optional[SimpleContactStructure] = field(
        default=None,
        metadata={
            "name": "OperationsContact",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    headway_service: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HeadwayService",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "OriginAimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "DestinationAimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    first_or_last_journey: Optional[FirstOrLastJourneyEnumeration] = field(
        default=None,
        metadata={
            "name": "FirstOrLastJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    formation_condition: List[FormationCondition] = field(
        default_factory=list,
        metadata={
            "name": "FormationCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_condition_element: List[FacilityConditionElement] = field(
        default_factory=list,
        metadata={
            "name": "FacilityConditionElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_change_element: Optional[FacilityChangeElement] = field(
        default=None,
        metadata={
            "name": "FacilityChangeElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: List[SituationRef] = field(
        default_factory=list,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Monitored",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitoring_error: List[str] = field(
        default_factory=list,
        metadata={
            "name": "MonitoringError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "tokens": True,
        }
    )
    in_congestion: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InCongestion",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    in_panic: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InPanic",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    prediction_inaccurate: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PredictionInaccurate",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    prediction_inaccurate_reason: Optional[PredictionInaccurateReasonEnumeration] = field(
        default=None,
        metadata={
            "name": "PredictionInaccurateReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    data_source: Optional[str] = field(
        default=None,
        metadata={
            "name": "DataSource",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    confidence_level: Optional[QualityIndexEnumeration] = field(
        default=None,
        metadata={
            "name": "ConfidenceLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_location: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "VehicleLocation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    location_recorded_at_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "LocationRecordedAtTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    bearing: Optional[float] = field(
        default=None,
        metadata={
            "name": "Bearing",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    progress_rate: Optional[ProgressRateEnumeration] = field(
        default=None,
        metadata={
            "name": "ProgressRate",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    velocity: Optional[int] = field(
        default=None,
        metadata={
            "name": "Velocity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    engine_on: Optional[bool] = field(
        default=None,
        metadata={
            "name": "EngineOn",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    occupancy: Optional[OccupancyEnumeration] = field(
        default=None,
        metadata={
            "name": "Occupancy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delay: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "Delay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    progress_status: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ProgressStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_status: Optional[VehicleStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "VehicleStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_block_part: List[TrainBlockPartStructure] = field(
        default_factory=list,
        metadata={
            "name": "TrainBlockPart",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    block_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BlockRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    course_of_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CourseOfJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    additional_vehicle_journey_ref: List[FramedVehicleJourneyRefStructure] = field(
        default_factory=list,
        metadata={
            "name": "AdditionalVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    driver_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DriverRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    driver_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "DriverName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_numbers: Optional["EstimatedVehicleJourneyStructure.TrainNumbers"] = field(
        default=None,
        metadata={
            "name": "TrainNumbers",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_parts: Optional["EstimatedVehicleJourneyStructure.JourneyParts"] = field(
        default=None,
        metadata={
            "name": "JourneyParts",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_elements: Optional["EstimatedVehicleJourneyStructure.TrainElements"] = field(
        default=None,
        metadata={
            "name": "TrainElements",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    trains: Optional["EstimatedVehicleJourneyStructure.Trains"] = field(
        default=None,
        metadata={
            "name": "Trains",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    compound_trains: Optional["EstimatedVehicleJourneyStructure.CompoundTrains"] = field(
        default=None,
        metadata={
            "name": "CompoundTrains",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    recorded_calls: Optional["EstimatedVehicleJourneyStructure.RecordedCalls"] = field(
        default=None,
        metadata={
            "name": "RecordedCalls",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_calls: Optional["EstimatedVehicleJourneyStructure.EstimatedCalls"] = field(
        default=None,
        metadata={
            "name": "EstimatedCalls",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    is_complete_stop_sequence: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IsCompleteStopSequence",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_relations: Optional[JourneyRelationsStructure] = field(
        default=None,
        metadata={
            "name": "JourneyRelations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class RecordedCalls:
        recorded_call: List[RecordedCall] = field(
            default_factory=list,
            metadata={
                "name": "RecordedCall",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class EstimatedCalls:
        estimated_call: List[EstimatedCall] = field(
            default_factory=list,
            metadata={
                "name": "EstimatedCall",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class TrainNumbers:
        train_number_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "TrainNumberRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class JourneyParts:
        journey_part_info: List[JourneyPartInfoStructure] = field(
            default_factory=list,
            metadata={
                "name": "JourneyPartInfo",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class TrainElements:
        train_element_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "TrainElementRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        train_element: List[TrainElement] = field(
            default_factory=list,
            metadata={
                "name": "TrainElement",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class Trains:
        train_ref: List[object] = field(
            default_factory=list,
            metadata={
                "name": "TrainRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        train: List[Train] = field(
            default_factory=list,
            metadata={
                "name": "Train",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class CompoundTrains:
        compound_train_ref: List[object] = field(
            default_factory=list,
            metadata={
                "name": "CompoundTrainRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        compound_train: List[CompoundTrain] = field(
            default_factory=list,
            metadata={
                "name": "CompoundTrain",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class MonitoredVehicleJourneyStructure:
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPatternRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "JourneyPatternName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_lines_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupOfLinesRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding: Optional[BrandingStructure] = field(
        default=None,
        metadata={
            "name": "Branding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProductCategoryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ServiceFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VehicleFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display_at_origin: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplayAtOrigin",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    via: List[ViaNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "Via",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display_at_destination: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplayAtDestination",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "VehicleJourneyName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_note: List[JourneyNote] = field(
        default_factory=list,
        metadata={
            "name": "JourneyNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    public_contact: Optional[SimpleContactStructure] = field(
        default=None,
        metadata={
            "name": "PublicContact",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operations_contact: Optional[SimpleContactStructure] = field(
        default=None,
        metadata={
            "name": "OperationsContact",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    headway_service: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HeadwayService",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "OriginAimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "DestinationAimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    first_or_last_journey: Optional[FirstOrLastJourneyEnumeration] = field(
        default=None,
        metadata={
            "name": "FirstOrLastJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    formation_condition: List[FormationCondition] = field(
        default_factory=list,
        metadata={
            "name": "FormationCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_condition_element: List[FacilityConditionElement] = field(
        default_factory=list,
        metadata={
            "name": "FacilityConditionElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_change_element: Optional[FacilityChangeElement] = field(
        default=None,
        metadata={
            "name": "FacilityChangeElement",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_ref: List[SituationRef] = field(
        default_factory=list,
        metadata={
            "name": "SituationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Monitored",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitoring_error: List[str] = field(
        default_factory=list,
        metadata={
            "name": "MonitoringError",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "tokens": True,
        }
    )
    in_congestion: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InCongestion",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    in_panic: Optional[bool] = field(
        default=None,
        metadata={
            "name": "InPanic",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    prediction_inaccurate: Optional[bool] = field(
        default=None,
        metadata={
            "name": "PredictionInaccurate",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    prediction_inaccurate_reason: Optional[PredictionInaccurateReasonEnumeration] = field(
        default=None,
        metadata={
            "name": "PredictionInaccurateReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    data_source: Optional[str] = field(
        default=None,
        metadata={
            "name": "DataSource",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    confidence_level: Optional[QualityIndexEnumeration] = field(
        default=None,
        metadata={
            "name": "ConfidenceLevel",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_location: Optional[LocationStructure] = field(
        default=None,
        metadata={
            "name": "VehicleLocation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    location_recorded_at_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "LocationRecordedAtTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    bearing: Optional[float] = field(
        default=None,
        metadata={
            "name": "Bearing",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    progress_rate: Optional[ProgressRateEnumeration] = field(
        default=None,
        metadata={
            "name": "ProgressRate",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    velocity: Optional[int] = field(
        default=None,
        metadata={
            "name": "Velocity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    engine_on: Optional[bool] = field(
        default=None,
        metadata={
            "name": "EngineOn",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    occupancy: Optional[OccupancyEnumeration] = field(
        default=None,
        metadata={
            "name": "Occupancy",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    delay: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "Delay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    progress_status: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ProgressStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_status: Optional[VehicleStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "VehicleStatus",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_block_part: List[TrainBlockPartStructure] = field(
        default_factory=list,
        metadata={
            "name": "TrainBlockPart",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    block_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BlockRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    course_of_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "CourseOfJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    additional_vehicle_journey_ref: List[FramedVehicleJourneyRefStructure] = field(
        default_factory=list,
        metadata={
            "name": "AdditionalVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    driver_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DriverRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    driver_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "DriverName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_numbers: Optional["MonitoredVehicleJourneyStructure.TrainNumbers"] = field(
        default=None,
        metadata={
            "name": "TrainNumbers",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_parts: Optional["MonitoredVehicleJourneyStructure.JourneyParts"] = field(
        default=None,
        metadata={
            "name": "JourneyParts",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    train_elements: Optional["MonitoredVehicleJourneyStructure.TrainElements"] = field(
        default=None,
        metadata={
            "name": "TrainElements",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    trains: Optional["MonitoredVehicleJourneyStructure.Trains"] = field(
        default=None,
        metadata={
            "name": "Trains",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    compound_trains: Optional["MonitoredVehicleJourneyStructure.CompoundTrains"] = field(
        default=None,
        metadata={
            "name": "CompoundTrains",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    previous_calls: Optional[PreviousCallsStructure] = field(
        default=None,
        metadata={
            "name": "PreviousCalls",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored_call: Optional[MonitoredCallStructure] = field(
        default=None,
        metadata={
            "name": "MonitoredCall",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    onward_calls: Optional[OnwardCallsStructure] = field(
        default=None,
        metadata={
            "name": "OnwardCalls",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    is_complete_stop_sequence: Optional[bool] = field(
        default=None,
        metadata={
            "name": "IsCompleteStopSequence",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class TrainNumbers:
        train_number_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "TrainNumberRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class JourneyParts:
        journey_part_info: List[JourneyPartInfoStructure] = field(
            default_factory=list,
            metadata={
                "name": "JourneyPartInfo",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class TrainElements:
        train_element_ref: List[str] = field(
            default_factory=list,
            metadata={
                "name": "TrainElementRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        train_element: List[TrainElement] = field(
            default_factory=list,
            metadata={
                "name": "TrainElement",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class Trains:
        train_ref: List[object] = field(
            default_factory=list,
            metadata={
                "name": "TrainRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        train: List[Train] = field(
            default_factory=list,
            metadata={
                "name": "Train",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )

    @dataclass
    class CompoundTrains:
        compound_train_ref: List[object] = field(
            default_factory=list,
            metadata={
                "name": "CompoundTrainRef",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        compound_train: List[CompoundTrain] = field(
            default_factory=list,
            metadata={
                "name": "CompoundTrain",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class PtSituationElementStructure(SituationElementStructure):
    verification: Optional[VerificationStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "Verification",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    progress: Optional[WorkflowStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "Progress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    quality_index: Optional[QualityIndexEnumeration] = field(
        default=None,
        metadata={
            "name": "QualityIndex",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reality: Optional[InformationStatusEnum] = field(
        default=None,
        metadata={
            "name": "Reality",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    likelihood: Optional[ProbabilityOfOccurrenceEnum] = field(
        default=None,
        metadata={
            "name": "Likelihood",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publication: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Publication",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    validity_period: List[HalfOpenTimestampOutputRangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "ValidityPeriod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    repetitions: Optional["PtSituationElementStructure.Repetitions"] = field(
        default=None,
        metadata={
            "name": "Repetitions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publication_window: List[HalfOpenTimestampOutputRangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "PublicationWindow",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    alert_cause: Optional[AlertCauseEnumeration] = field(
        default=None,
        metadata={
            "name": "AlertCause",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    unknown_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "UnknownReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    miscellaneous_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "MiscellaneousReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    personnel_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "PersonnelReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    equipment_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquipmentReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    environment_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "EnvironmentReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    undefined_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "UndefinedReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    miscellaneous_sub_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "MiscellaneousSubReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    personnel_sub_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "PersonnelSubReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    equipment_sub_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquipmentSubReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    environment_sub_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "EnvironmentSubReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    public_event_reason: Optional[PublicEventTypeEnum] = field(
        default=None,
        metadata={
            "name": "PublicEventReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ReasonName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    severity: Optional[SeverityEnumeration] = field(
        default=None,
        metadata={
            "name": "Severity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    priority: Optional[int] = field(
        default=None,
        metadata={
            "name": "Priority",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    sensitivity: Optional[SensitivityEnumeration] = field(
        default=None,
        metadata={
            "name": "Sensitivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    audience: Optional[AudienceEnumeration] = field(
        default=None,
        metadata={
            "name": "Audience",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    scope_type: Optional[ScopeTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "ScopeType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    report_type: Optional[ReportTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "ReportType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    planned: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Planned",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    keywords: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Keywords",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "tokens": True,
        }
    )
    secondary_reasons: Optional["PtSituationElementStructure.SecondaryReasons"] = field(
        default=None,
        metadata={
            "name": "SecondaryReasons",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: Optional[str] = field(
        default=None,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    summary: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "Summary",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    detail: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "Detail",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advice: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "Advice",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    internal: Optional[DefaultedTextStructure] = field(
        default=None,
        metadata={
            "name": "Internal",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    images: Optional["PtSituationElementStructure.Images"] = field(
        default=None,
        metadata={
            "name": "Images",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    info_links: Optional["PtSituationElementStructure.InfoLinks"] = field(
        default=None,
        metadata={
            "name": "InfoLinks",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affects: Optional[AffectsScopeStructure] = field(
        default=None,
        metadata={
            "name": "Affects",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    consequences: Optional[PtConsequencesStructure] = field(
        default=None,
        metadata={
            "name": "Consequences",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publishing_actions: Optional[ActionsStructure] = field(
        default=None,
        metadata={
            "name": "PublishingActions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Repetitions:
        day_type: List[DayTypeEnumeration] = field(
            default_factory=list,
            metadata={
                "name": "DayType",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class SecondaryReasons:
        reason: List["PtSituationElementStructure.SecondaryReasons.Reason"] = field(
            default_factory=list,
            metadata={
                "name": "Reason",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

        @dataclass
        class Reason:
            alert_cause: Optional[AlertCauseEnumeration] = field(
                default=None,
                metadata={
                    "name": "AlertCause",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            unknown_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "UnknownReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            miscellaneous_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "MiscellaneousReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            personnel_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "PersonnelReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            equipment_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "EquipmentReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            environment_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "EnvironmentReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            undefined_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "UndefinedReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            miscellaneous_sub_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "MiscellaneousSubReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            personnel_sub_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "PersonnelSubReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            equipment_sub_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "EquipmentSubReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            environment_sub_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "EnvironmentSubReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            public_event_reason: Optional[PublicEventTypeEnum] = field(
                default=None,
                metadata={
                    "name": "PublicEventReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            reason_name: List[NaturalLanguageStringStructure] = field(
                default_factory=list,
                metadata={
                    "name": "ReasonName",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )

    @dataclass
    class Images:
        image: List["PtSituationElementStructure.Images.Image"] = field(
            default_factory=list,
            metadata={
                "name": "Image",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

        @dataclass
        class Image(ImageStructure):
            pass

    @dataclass
    class InfoLinks:
        info_link: List[InfoLinkStructure] = field(
            default_factory=list,
            metadata={
                "name": "InfoLink",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class RoadSituationElementStructure(SituationElementStructure):
    verification: Optional[VerificationStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "Verification",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    progress: Optional[WorkflowStatusEnumeration] = field(
        default=None,
        metadata={
            "name": "Progress",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    quality_index: Optional[QualityIndexEnumeration] = field(
        default=None,
        metadata={
            "name": "QualityIndex",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reality: Optional[InformationStatusEnum] = field(
        default=None,
        metadata={
            "name": "Reality",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    likelihood: Optional[ProbabilityOfOccurrenceEnum] = field(
        default=None,
        metadata={
            "name": "Likelihood",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publication: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Publication",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    validity_period: List[HalfOpenTimestampOutputRangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "ValidityPeriod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    repetitions: Optional["RoadSituationElementStructure.Repetitions"] = field(
        default=None,
        metadata={
            "name": "Repetitions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publication_window: List[HalfOpenTimestampOutputRangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "PublicationWindow",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    alert_cause: Optional[AlertCauseEnumeration] = field(
        default=None,
        metadata={
            "name": "AlertCause",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    unknown_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "UnknownReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    miscellaneous_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "MiscellaneousReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    personnel_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "PersonnelReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    equipment_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquipmentReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    environment_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "EnvironmentReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    undefined_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "UndefinedReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    miscellaneous_sub_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "MiscellaneousSubReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    personnel_sub_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "PersonnelSubReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    equipment_sub_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "EquipmentSubReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    environment_sub_reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "EnvironmentSubReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    public_event_reason: Optional[PublicEventTypeEnum] = field(
        default=None,
        metadata={
            "name": "PublicEventReason",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    reason_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "ReasonName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    severity: Optional[SeverityEnumeration] = field(
        default=None,
        metadata={
            "name": "Severity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    priority: Optional[int] = field(
        default=None,
        metadata={
            "name": "Priority",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    sensitivity: Optional[SensitivityEnumeration] = field(
        default=None,
        metadata={
            "name": "Sensitivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    audience: Optional[AudienceEnumeration] = field(
        default=None,
        metadata={
            "name": "Audience",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    scope_type: Optional[ScopeTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "ScopeType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    report_type: Optional[ReportTypeEnumeration] = field(
        default=None,
        metadata={
            "name": "ReportType",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    planned: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Planned",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    keywords: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Keywords",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "tokens": True,
        }
    )
    secondary_reasons: Optional["RoadSituationElementStructure.SecondaryReasons"] = field(
        default=None,
        metadata={
            "name": "SecondaryReasons",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    language: Optional[str] = field(
        default=None,
        metadata={
            "name": "Language",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    summary: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "Summary",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    description: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    detail: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "Detail",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    advice: List[DefaultedTextStructure] = field(
        default_factory=list,
        metadata={
            "name": "Advice",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    internal: Optional[DefaultedTextStructure] = field(
        default=None,
        metadata={
            "name": "Internal",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    images: Optional["RoadSituationElementStructure.Images"] = field(
        default=None,
        metadata={
            "name": "Images",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    info_links: Optional["RoadSituationElementStructure.InfoLinks"] = field(
        default=None,
        metadata={
            "name": "InfoLinks",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    affects: Optional[AffectsScopeStructure] = field(
        default=None,
        metadata={
            "name": "Affects",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    consequences: Optional[PtConsequencesStructure] = field(
        default=None,
        metadata={
            "name": "Consequences",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    publishing_actions: Optional[ActionsStructure] = field(
        default=None,
        metadata={
            "name": "PublishingActions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_record: Optional[SituationRecord] = field(
        default=None,
        metadata={
            "name": "SituationRecord",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class Repetitions:
        day_type: List[DayTypeEnumeration] = field(
            default_factory=list,
            metadata={
                "name": "DayType",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

    @dataclass
    class SecondaryReasons:
        reason: List["RoadSituationElementStructure.SecondaryReasons.Reason"] = field(
            default_factory=list,
            metadata={
                "name": "Reason",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

        @dataclass
        class Reason:
            alert_cause: Optional[AlertCauseEnumeration] = field(
                default=None,
                metadata={
                    "name": "AlertCause",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            unknown_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "UnknownReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            miscellaneous_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "MiscellaneousReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            personnel_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "PersonnelReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            equipment_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "EquipmentReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            environment_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "EnvironmentReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            undefined_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "UndefinedReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            miscellaneous_sub_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "MiscellaneousSubReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            personnel_sub_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "PersonnelSubReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            equipment_sub_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "EquipmentSubReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            environment_sub_reason: Optional[str] = field(
                default=None,
                metadata={
                    "name": "EnvironmentSubReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            public_event_reason: Optional[PublicEventTypeEnum] = field(
                default=None,
                metadata={
                    "name": "PublicEventReason",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )
            reason_name: List[NaturalLanguageStringStructure] = field(
                default_factory=list,
                metadata={
                    "name": "ReasonName",
                    "type": "Element",
                    "namespace": "http://www.siri.org.uk/siri",
                }
            )

    @dataclass
    class Images:
        image: List["RoadSituationElementStructure.Images.Image"] = field(
            default_factory=list,
            metadata={
                "name": "Image",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )

        @dataclass
        class Image(ImageStructure):
            pass

    @dataclass
    class InfoLinks:
        info_link: List[InfoLinkStructure] = field(
            default_factory=list,
            metadata={
                "name": "InfoLink",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
                "min_occurs": 1,
            }
        )


@dataclass
class TargetedVehicleJourneyStructure:
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    framed_vehicle_journey_ref: Optional[FramedVehicleJourneyRefStructure] = field(
        default=None,
        metadata={
            "name": "FramedVehicleJourneyRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPatternRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "JourneyPatternName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_lines_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupOfLinesRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding: Optional[BrandingStructure] = field(
        default=None,
        metadata={
            "name": "Branding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProductCategoryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ServiceFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VehicleFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OriginRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display_at_origin: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplayAtOrigin",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    via: List[ViaNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "Via",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DestinationRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_short_name: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationShortName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display_at_destination: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplayAtDestination",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_journey_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "VehicleJourneyName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_note: List[JourneyNote] = field(
        default_factory=list,
        metadata={
            "name": "JourneyNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    public_contact: Optional[SimpleContactStructure] = field(
        default=None,
        metadata={
            "name": "PublicContact",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operations_contact: Optional[SimpleContactStructure] = field(
        default=None,
        metadata={
            "name": "OperationsContact",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    headway_service: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HeadwayService",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_aimed_departure_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "OriginAimedDepartureTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_aimed_arrival_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "DestinationAimedArrivalTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    first_or_last_journey: Optional[FirstOrLastJourneyEnumeration] = field(
        default=None,
        metadata={
            "name": "FirstOrLastJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    targeted_call: Optional[TargetedCall] = field(
        default=None,
        metadata={
            "name": "TargetedCall",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DatedTimetableVersionFrameStructure(AbstractItemStructure):
    version_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VersionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    validity_period: Optional[TimetableValidityPeriod] = field(
        default=None,
        metadata={
            "name": "ValidityPeriod",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    shortest_possible_cycle: Optional[XmlDuration] = field(
        default=None,
        metadata={
            "name": "ShortestPossibleCycle",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "LineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    direction_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "DirectionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    journey_pattern_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "JourneyPatternRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    journey_pattern_name: Optional[NaturalLanguageStringStructure] = field(
        default=None,
        metadata={
            "name": "JourneyPatternName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_mode: List[VehicleModesEnumeration] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMode",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    route_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "RouteRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    published_line_name: List[PublishedLineName] = field(
        default_factory=list,
        metadata={
            "name": "PublishedLineName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    group_of_lines_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "GroupOfLinesRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    direction_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DirectionName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    external_line_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExternalLineRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "BrandingRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    branding: Optional[BrandingStructure] = field(
        default=None,
        metadata={
            "name": "Branding",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    operator_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "OperatorRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    product_category_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProductCategoryRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "ServiceFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_feature_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VehicleFeatureRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    origin_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "OriginDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    destination_display: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "DestinationDisplay",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    line_note: List[NaturalLanguagePlaceNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "LineNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    first_or_last_journey: Optional[FirstOrLastJourneyEnumeration] = field(
        default=None,
        metadata={
            "name": "FirstOrLastJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    headway_service: Optional[bool] = field(
        default=None,
        metadata={
            "name": "HeadwayService",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Monitored",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    dated_vehicle_journey: List[DatedVehicleJourneyStructure] = field(
        default_factory=list,
        metadata={
            "name": "DatedVehicleJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    removed_dated_vehicle_journey: List[RemovedDatedVehicleJourneyStructure] = field(
        default_factory=list,
        metadata={
            "name": "RemovedDatedVehicleJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_journey_interchange: List[ServiceJourneyInterchangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "ServiceJourneyInterchange",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    removed_service_journey_interchange: List[RemovedServiceJourneyInterchangeStructure] = field(
        default_factory=list,
        metadata={
            "name": "RemovedServiceJourneyInterchange",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class DatedVehicleJourney(DatedVehicleJourneyStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EstimatedVehicleJourney(EstimatedVehicleJourneyStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class MonitoredStopVisitStructure(AbstractIdentifiedItemStructure):
    valid_until_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidUntilTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    clear_down_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "ClearDownRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored_vehicle_journey: Optional[MonitoredVehicleJourneyStructure] = field(
        default=None,
        metadata={
            "name": "MonitoredVehicleJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    stop_visit_note: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "StopVisitNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_facility: Optional[str] = field(
        default=None,
        metadata={
            "name": "StopFacility",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class PtSituationElement(PtSituationElementStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class RoadSituationElement(RoadSituationElementStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class TargetedVehicleJourney(TargetedVehicleJourneyStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class VehicleActivityStructure(AbstractIdentifiedItemStructure):
    valid_until_time: Optional[XmlDateTime] = field(
        default=None,
        metadata={
            "name": "ValidUntilTime",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    vehicle_monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VehicleMonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitoring_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "MonitoringName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    progress_between_stops: Optional[ProgressBetweenStopsStructure] = field(
        default=None,
        metadata={
            "name": "ProgressBetweenStops",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored_vehicle_journey: Optional["VehicleActivityStructure.MonitoredVehicleJourney"] = field(
        default=None,
        metadata={
            "name": "MonitoredVehicleJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    vehicle_activity_note: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "VehicleActivityNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )

    @dataclass
    class MonitoredVehicleJourney(MonitoredVehicleJourneyStructure):
        pass


@dataclass
class DatedTimetableVersionFrame(DatedTimetableVersionFrameStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EstimatedVersionFrameStructure(AbstractItemStructure):
    version_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "VersionRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_vehicle_journey: List[EstimatedVehicleJourney] = field(
        default_factory=list,
        metadata={
            "name": "EstimatedVehicleJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    estimated_service_journey_interchange: List[EstimatedServiceJourneyInterchange] = field(
        default_factory=list,
        metadata={
            "name": "EstimatedServiceJourneyInterchange",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class MonitoredStopVisit(MonitoredStopVisitStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SituationExchangeDeliveryStructure(AbstractServiceDeliveryStructure):
    pt_situation_context: Optional[ContextStructure] = field(
        default=None,
        metadata={
            "name": "PtSituationContext",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situations: Optional["SituationExchangeDeliveryStructure.Situations"] = field(
        default=None,
        metadata={
            "name": "Situations",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )

    @dataclass
    class Situations:
        pt_situation_element: List[PtSituationElementStructure] = field(
            default_factory=list,
            metadata={
                "name": "PtSituationElement",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        road_situation_element: List[RoadSituationElement] = field(
            default_factory=list,
            metadata={
                "name": "RoadSituationElement",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class TimetabledStopVisitStructure(AbstractIdentifiedItemStructure):
    monitoring_ref: Optional[str] = field(
        default=None,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    targeted_vehicle_journey: Optional[TargetedVehicleJourney] = field(
        default=None,
        metadata={
            "name": "TargetedVehicleJourney",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class VehicleMonitoringDeliveryStructure(AbstractServiceDeliveryStructure):
    vehicle_activity: List[VehicleActivityStructure] = field(
        default_factory=list,
        metadata={
            "name": "VehicleActivity",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_activity_cancellation: List[VehicleActivityCancellationStructure] = field(
        default_factory=list,
        metadata={
            "name": "VehicleActivityCancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_activity_note: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "VehicleActivityNote",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class EstimatedTimetableDeliveryStructure(AbstractServiceDeliveryStructure):
    estimated_journey_version_frame: List[EstimatedVersionFrameStructure] = field(
        default_factory=list,
        metadata={
            "name": "EstimatedJourneyVersionFrame",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class IncludedSituationExchangeDelivery(SituationExchangeDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ProductionTimetableDeliveryStructure(AbstractServiceDeliveryStructure):
    dated_timetable_version_frame: List[DatedTimetableVersionFrame] = field(
        default_factory=list,
        metadata={
            "name": "DatedTimetableVersionFrame",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class SituationExchangeDelivery(SituationExchangeDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopMonitoringDeliveryStructure(AbstractServiceDeliveryStructure):
    monitoring_ref: List[str] = field(
        default_factory=list,
        metadata={
            "name": "MonitoringRef",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitoring_name: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "MonitoringName",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored_stop_visit: List[MonitoredStopVisit] = field(
        default_factory=list,
        metadata={
            "name": "MonitoredStopVisit",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    monitored_stop_visit_cancellation: List[MonitoredStopVisitCancellation] = field(
        default_factory=list,
        metadata={
            "name": "MonitoredStopVisitCancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_line_notice: List[StopLineNotice] = field(
        default_factory=list,
        metadata={
            "name": "StopLineNotice",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_line_notice_cancellation: List[StopLineNoticeCancellation] = field(
        default_factory=list,
        metadata={
            "name": "StopLineNoticeCancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_notice: List[StopNotice] = field(
        default_factory=list,
        metadata={
            "name": "StopNotice",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_notice_cancellation: List[StopNoticeCancellation] = field(
        default_factory=list,
        metadata={
            "name": "StopNoticeCancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    service_exception: List[ServiceException] = field(
        default_factory=list,
        metadata={
            "name": "ServiceException",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    note: List[NaturalLanguageStringStructure] = field(
        default_factory=list,
        metadata={
            "name": "Note",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class StopTimetableDeliveryStructure(AbstractServiceDeliveryStructure):
    timetabled_stop_visit: List[TimetabledStopVisitStructure] = field(
        default_factory=list,
        metadata={
            "name": "TimetabledStopVisit",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    timetabled_stop_visit_cancellation: List[TimetabledStopVisitCancellationStructure] = field(
        default_factory=list,
        metadata={
            "name": "TimetabledStopVisitCancellation",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )


@dataclass
class VehicleMonitoringDelivery(VehicleMonitoringDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class EstimatedTimetableDelivery(EstimatedTimetableDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class ProductionTimetableDelivery(ProductionTimetableDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class SituationExchangeDeliveriesStructure:
    situation_exchange_delivery: List[SituationExchangeDelivery] = field(
        default_factory=list,
        metadata={
            "name": "SituationExchangeDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class StopMonitoringDelivery(StopMonitoringDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class StopTimetableDelivery(StopTimetableDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class VehicleMonitoringDeliveriesStructure:
    vehicle_monitoring_delivery: List[VehicleMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class EstimatedTimetableDeliveriesStructure:
    estimated_timetable_delivery: List[EstimatedTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "EstimatedTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class ProductionTimetableDeliveriesStructure:
    production_timetable_delivery: List[ProductionTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ProductionTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class ServiceDeliveryBodyStructure:
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional["ServiceDeliveryBodyStructure.ErrorCondition"] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    more_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MoreData",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    included_situation_exchange_delivery: List[IncludedSituationExchangeDelivery] = field(
        default_factory=list,
        metadata={
            "name": "IncludedSituationExchangeDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    production_timetable_delivery: List[ProductionTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ProductionTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_timetable_delivery: List[EstimatedTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "EstimatedTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_timetable_delivery: List[StopTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "StopTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_delivery: List[StopMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "StopMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_monitoring_delivery: List[VehicleMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_timetable_delivery: List[ConnectionTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_feeder_delivery: List[ConnectionMonitoringFeederDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringFeederDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_distributor_delivery: List[ConnectionMonitoringDistributorDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringDistributorDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_message_delivery: List[GeneralMessageDelivery] = field(
        default_factory=list,
        metadata={
            "name": "GeneralMessageDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_monitoring_delivery: List[FacilityMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "FacilityMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_exchange_delivery: List[SituationExchangeDelivery] = field(
        default_factory=list,
        metadata={
            "name": "SituationExchangeDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        }
    )

    @dataclass
    class ErrorCondition:
        capability_not_supported_error: Optional[CapabilityNotSupportedError] = field(
            default=None,
            metadata={
                "name": "CapabilityNotSupportedError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        other_error: Optional[OtherError] = field(
            default=None,
            metadata={
                "name": "OtherError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        description: Optional[str] = field(
            default=None,
            metadata={
                "name": "Description",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class ServiceDeliveryStructure(ProducerResponseStructure):
    status: Optional[bool] = field(
        default=None,
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    error_condition: Optional["ServiceDeliveryStructure.ErrorCondition"] = field(
        default=None,
        metadata={
            "name": "ErrorCondition",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    more_data: Optional[bool] = field(
        default=None,
        metadata={
            "name": "MoreData",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    included_situation_exchange_delivery: List[IncludedSituationExchangeDelivery] = field(
        default_factory=list,
        metadata={
            "name": "IncludedSituationExchangeDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    production_timetable_delivery: List[ProductionTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ProductionTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_timetable_delivery: List[EstimatedTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "EstimatedTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_timetable_delivery: List[StopTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "StopTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_delivery: List[StopMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "StopMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_monitoring_delivery: List[VehicleMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_timetable_delivery: List[ConnectionTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_feeder_delivery: List[ConnectionMonitoringFeederDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringFeederDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_distributor_delivery: List[ConnectionMonitoringDistributorDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringDistributorDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_message_delivery: List[GeneralMessageDelivery] = field(
        default_factory=list,
        metadata={
            "name": "GeneralMessageDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_monitoring_delivery: List[FacilityMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "FacilityMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_exchange_delivery: List[SituationExchangeDelivery] = field(
        default_factory=list,
        metadata={
            "name": "SituationExchangeDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    srs_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "srsName",
            "type": "Attribute",
        }
    )

    @dataclass
    class ErrorCondition:
        capability_not_supported_error: Optional[CapabilityNotSupportedError] = field(
            default=None,
            metadata={
                "name": "CapabilityNotSupportedError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        other_error: Optional[OtherError] = field(
            default=None,
            metadata={
                "name": "OtherError",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )
        description: Optional[str] = field(
            default=None,
            metadata={
                "name": "Description",
                "type": "Element",
                "namespace": "http://www.siri.org.uk/siri",
            }
        )


@dataclass
class SiriServiceDeliveryStructure:
    included_situation_exchange_delivery: List[IncludedSituationExchangeDelivery] = field(
        default_factory=list,
        metadata={
            "name": "IncludedSituationExchangeDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    production_timetable_delivery: List[ProductionTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ProductionTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    estimated_timetable_delivery: List[EstimatedTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "EstimatedTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_timetable_delivery: List[StopTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "StopTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    stop_monitoring_delivery: List[StopMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "StopMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    vehicle_monitoring_delivery: List[VehicleMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "VehicleMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_timetable_delivery: List[ConnectionTimetableDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_feeder_delivery: List[ConnectionMonitoringFeederDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringFeederDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    connection_monitoring_distributor_delivery: List[ConnectionMonitoringDistributorDelivery] = field(
        default_factory=list,
        metadata={
            "name": "ConnectionMonitoringDistributorDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    general_message_delivery: List[GeneralMessageDelivery] = field(
        default_factory=list,
        metadata={
            "name": "GeneralMessageDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    facility_monitoring_delivery: List[FacilityMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "FacilityMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )
    situation_exchange_delivery: List[SituationExchangeDelivery] = field(
        default_factory=list,
        metadata={
            "name": "SituationExchangeDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
        }
    )


@dataclass
class StopMonitoringDeliveriesStructure:
    stop_monitoring_delivery: List[StopMonitoringDelivery] = field(
        default_factory=list,
        metadata={
            "name": "StopMonitoringDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "min_occurs": 1,
        }
    )


@dataclass
class StopTimetableDeliveriesStructure:
    stop_timetable_delivery: Optional[StopTimetableDelivery] = field(
        default=None,
        metadata={
            "name": "StopTimetableDelivery",
            "type": "Element",
            "namespace": "http://www.siri.org.uk/siri",
            "required": True,
        }
    )


@dataclass
class ServiceDelivery(ServiceDeliveryStructure):
    class Meta:
        namespace = "http://www.siri.org.uk/siri"


@dataclass
class Siri:
    class Meta:
        namespace = "http://www.siri.org.uk/siri"

    service_request: Optional[ServiceRequest] = field(
        default=None,
        metadata={
            "name": "ServiceRequest",
            "type": "Element",
        }
    )
    subscription_request: Optional[SubscriptionRequest] = field(
        default=None,
        metadata={
            "name": "SubscriptionRequest",
            "type": "Element",
        }
    )
    terminate_subscription_request: Optional[TerminateSubscriptionRequest] = field(
        default=None,
        metadata={
            "name": "TerminateSubscriptionRequest",
            "type": "Element",
        }
    )
    data_ready_notification: Optional[DataReadyNotification] = field(
        default=None,
        metadata={
            "name": "DataReadyNotification",
            "type": "Element",
        }
    )
    data_supply_request: Optional[DataSupplyRequest] = field(
        default=None,
        metadata={
            "name": "DataSupplyRequest",
            "type": "Element",
        }
    )
    check_status_request: Optional[CheckStatusRequest] = field(
        default=None,
        metadata={
            "name": "CheckStatusRequest",
            "type": "Element",
        }
    )
    heartbeat_notification: Optional[HeartbeatNotification] = field(
        default=None,
        metadata={
            "name": "HeartbeatNotification",
            "type": "Element",
        }
    )
    capabilities_request: Optional[CapabilitiesRequest] = field(
        default=None,
        metadata={
            "name": "CapabilitiesRequest",
            "type": "Element",
        }
    )
    stop_points_request: Optional[StopPointsRequest] = field(
        default=None,
        metadata={
            "name": "StopPointsRequest",
            "type": "Element",
        }
    )
    lines_request: Optional[LinesRequest] = field(
        default=None,
        metadata={
            "name": "LinesRequest",
            "type": "Element",
        }
    )
    service_features_request: Optional[ServiceFeaturesRequest] = field(
        default=None,
        metadata={
            "name": "ServiceFeaturesRequest",
            "type": "Element",
        }
    )
    product_categories_request: Optional[ProductCategoriesRequest] = field(
        default=None,
        metadata={
            "name": "ProductCategoriesRequest",
            "type": "Element",
        }
    )
    vehicle_features_request: Optional[VehicleFeaturesRequest] = field(
        default=None,
        metadata={
            "name": "VehicleFeaturesRequest",
            "type": "Element",
        }
    )
    info_channel_request: Optional[InfoChannelRequest] = field(
        default=None,
        metadata={
            "name": "InfoChannelRequest",
            "type": "Element",
        }
    )
    facility_request: Optional[FacilityRequest] = field(
        default=None,
        metadata={
            "name": "FacilityRequest",
            "type": "Element",
        }
    )
    connection_links_request: Optional[ConnectionLinksRequest] = field(
        default=None,
        metadata={
            "name": "ConnectionLinksRequest",
            "type": "Element",
        }
    )
    subscription_response: Optional[SubscriptionResponse] = field(
        default=None,
        metadata={
            "name": "SubscriptionResponse",
            "type": "Element",
        }
    )
    terminate_subscription_response: Optional[TerminateSubscriptionResponse] = field(
        default=None,
        metadata={
            "name": "TerminateSubscriptionResponse",
            "type": "Element",
        }
    )
    subscription_terminated_notification: Optional[SubscriptionTerminatedNotification] = field(
        default=None,
        metadata={
            "name": "SubscriptionTerminatedNotification",
            "type": "Element",
        }
    )
    data_ready_acknowledgement: Optional[DataReadyAcknowledgement] = field(
        default=None,
        metadata={
            "name": "DataReadyAcknowledgement",
            "type": "Element",
        }
    )
    service_delivery: Optional[ServiceDelivery] = field(
        default=None,
        metadata={
            "name": "ServiceDelivery",
            "type": "Element",
        }
    )
    data_received_acknowledgement: Optional[DataReceivedAcknowledgement] = field(
        default=None,
        metadata={
            "name": "DataReceivedAcknowledgement",
            "type": "Element",
        }
    )
    check_status_response: Optional[CheckStatusResponse] = field(
        default=None,
        metadata={
            "name": "CheckStatusResponse",
            "type": "Element",
        }
    )
    capabilities_response: Optional[CapabilitiesResponse] = field(
        default=None,
        metadata={
            "name": "CapabilitiesResponse",
            "type": "Element",
        }
    )
    stop_points_delivery: Optional[StopPointsDelivery] = field(
        default=None,
        metadata={
            "name": "StopPointsDelivery",
            "type": "Element",
        }
    )
    lines_delivery: Optional[LinesDelivery] = field(
        default=None,
        metadata={
            "name": "LinesDelivery",
            "type": "Element",
        }
    )
    product_categories_delivery: Optional[ProductCategoriesDelivery] = field(
        default=None,
        metadata={
            "name": "ProductCategoriesDelivery",
            "type": "Element",
        }
    )
    service_features_delivery: Optional[ServiceFeaturesDelivery] = field(
        default=None,
        metadata={
            "name": "ServiceFeaturesDelivery",
            "type": "Element",
        }
    )
    vehicle_features_delivery: Optional[VehicleFeaturesDelivery] = field(
        default=None,
        metadata={
            "name": "VehicleFeaturesDelivery",
            "type": "Element",
        }
    )
    info_channel_delivery: Optional[InfoChannelDelivery] = field(
        default=None,
        metadata={
            "name": "InfoChannelDelivery",
            "type": "Element",
        }
    )
    facility_delivery: Optional[FacilityDelivery] = field(
        default=None,
        metadata={
            "name": "FacilityDelivery",
            "type": "Element",
        }
    )
    connection_links_delivery: Optional[ConnectionLinksDelivery] = field(
        default=None,
        metadata={
            "name": "ConnectionLinksDelivery",
            "type": "Element",
        }
    )
    extensions: Optional[Extensions1] = field(
        default=None,
        metadata={
            "name": "Extensions",
            "type": "Element",
        }
    )
    version: str = field(
        default="2.1",
        metadata={
            "type": "Attribute",
        }
    )
